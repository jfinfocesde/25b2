{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-backend-2","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Backend 2","text":"<p>\u00a1Bienvenidos a este emocionante viaje hacia el mundo del desarrollo de APIs REST, patrones de dise\u00f1o y frameworks modernos como Spring Boot! Este curso est\u00e1 dise\u00f1ado para introducirte en herramientas esenciales que son ampliamente utilizadas en la industria moderna. Ya seas un principiante o alguien con experiencia previa en tecnolog\u00eda, este curso te brindar\u00e1 las habilidades pr\u00e1cticas necesarias para destacar en el desarrollo de aplicaciones robustas y escalables.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas fundamentales y avanzados, organizados en m\u00f3dulos espec\u00edficos:</p>"},{"location":"#1-concepto-api-rest","title":"1. Concepto API REST","text":"<ul> <li>API: Introducci\u00f3n al concepto de API (Interfaz de Programaci\u00f3n de Aplicaciones) y su importancia en el desarrollo de software.</li> <li>Generalidades API WEB: Entender\u00e1s c\u00f3mo funcionan las APIs web y su papel en la comunicaci\u00f3n entre sistemas.</li> <li>REST: Aprender\u00e1s los principios de arquitectura REST y c\u00f3mo se aplica en el desarrollo de servicios web.</li> <li>M\u00e9todos HTTP: Dominar\u00e1s los m\u00e9todos m\u00e1s comunes: GET, POST, PUT y DELETE, y sus casos de uso.</li> <li>Endpoints: Crear\u00e1s y gestionar\u00e1s endpoints para exponer funcionalidades de tu API.</li> <li>Formato JSON: Explorar\u00e1s el formato JSON como est\u00e1ndar para intercambiar datos entre sistemas.</li> <li>Servicios en la nube: Aprender\u00e1s a desplegar y consumir APIs REST en entornos cloud.</li> <li>Clientes REST: Utilizar\u00e1s herramientas como Postman o cURL para probar y consumir APIs.</li> </ul>"},{"location":"#2-patrones-de-diseno","title":"2. Patrones de Dise\u00f1o","text":"<ul> <li>Patr\u00f3n MVC (Modelo-Vista-Controlador): Conocer\u00e1s este patr\u00f3n fundamental para separar la l\u00f3gica de negocio, la interfaz de usuario y los datos.</li> <li>Patr\u00f3n por capas: Aprender\u00e1s a estructurar aplicaciones en capas (presentaci\u00f3n, l\u00f3gica de negocio y acceso a datos).</li> <li>Patr\u00f3n Hexagonal: Explorar\u00e1s este patr\u00f3n avanzado para construir aplicaciones altamente desacopladas y testables.</li> </ul>"},{"location":"#3-generalidades-de-spring-boot","title":"3. Generalidades de Spring Boot","text":"<ul> <li>Introducci\u00f3n a Spring Boot: Entender\u00e1s qu\u00e9 es Spring Boot y por qu\u00e9 es uno de los frameworks m\u00e1s populares para el desarrollo de aplicaciones Java.</li> <li>Configuraci\u00f3n del entorno de desarrollo con Maven: Aprender\u00e1s a configurar proyectos utilizando Maven como gestor de dependencias.</li> <li>Dependencias gen\u00e9ricas: Integrar\u00e1s dependencias clave como Spring Web, JPA, DevTools y conectores a bases de datos relacionales.</li> </ul>"},{"location":"#4-entidades-en-spring-boot","title":"4. Entidades en Spring Boot","text":"<ul> <li>JPA y Hibernate: Aprender\u00e1s a trabajar con JPA y Hibernate para mapear objetos Java a tablas de bases de datos.</li> <li>Anotaciones para crear y configurar entidades persistidas: Utilizar\u00e1s anotaciones como <code>@Entity</code>, <code>@Table</code> y <code>@Column</code>.</li> <li>Anotaciones para crear relaciones: Implementar\u00e1s relaciones uno a uno, uno a muchos, muchos a uno y muchos a muchos.</li> </ul>"},{"location":"#5-repositorios-en-spring-boot","title":"5. Repositorios en Spring Boot","text":"<ul> <li>Anotaciones para crear repositorios: Utilizar\u00e1s interfaces como <code>JpaRepository</code> para acceder a datos.</li> <li>Consultas gen\u00e9ricas desde JPA: Aprender\u00e1s a usar m\u00e9todos predefinidos para realizar operaciones CRUD.</li> <li>Consultas personalizadas: Crear\u00e1s queries personalizadas utilizando JPQL o consultas nativas.</li> <li>Genericidad: Implementar\u00e1s repositorios gen\u00e9ricos para reutilizar c\u00f3digo.</li> </ul>"},{"location":"#6-servicios-en-spring-boot","title":"6. Servicios en Spring Boot","text":"<ul> <li>Anotaciones para crear servicios: Utilizar\u00e1s <code>@Service</code> para definir la l\u00f3gica de negocio.</li> <li>Inyecci\u00f3n de dependencias con @Autowired: Aprender\u00e1s a inyectar repositorios y otros servicios.</li> <li>L\u00f3gica de negocio y manejo de errores: Implementar\u00e1s validaciones y manejar\u00e1s excepciones de manera efectiva.</li> </ul>"},{"location":"#7-controladores-en-spring-boot","title":"7. Controladores en Spring Boot","text":"<ul> <li>Anotaciones para crear controladores: Utilizar\u00e1s <code>@RestController</code> para exponer endpoints REST.</li> <li>Configuraci\u00f3n de endpoints: Definir\u00e1s rutas y m\u00e9todos HTTP para tus APIs.</li> <li>Manejo de errores: Implementar\u00e1s mecanismos para manejar errores y devolver respuestas claras.</li> </ul>"},{"location":"#8-documentacion-de-apis","title":"8. Documentaci\u00f3n de APIs","text":"<ul> <li>Uso de Swagger: Aprender\u00e1s a documentar tus APIs REST utilizando Swagger para facilitar su consumo.</li> </ul>"},{"location":"#9-construccion-de-dtos","title":"9. Construcci\u00f3n de DTOs","text":"<ul> <li>Diferencia entre entidades y DTOs: Entender\u00e1s c\u00f3mo separar la capa de datos de la capa de presentaci\u00f3n.</li> <li>Transferencia de datos y serializaci\u00f3n: Implementar\u00e1s DTOs para transferir datos entre capas.</li> <li>Validaci\u00f3n de DTOs: Aprender\u00e1s a validar datos entrantes utilizando anotaciones como <code>@NotNull</code> y <code>@Size</code>.</li> </ul>"},{"location":"#10-pruebas-unitarias","title":"10. Pruebas Unitarias","text":"<ul> <li>Concepto de pruebas unitarias: Comprender\u00e1s la importancia de las pruebas unitarias en el desarrollo de software.</li> <li>Introducci\u00f3n a JUnit: Aprender\u00e1s a escribir pruebas unitarias utilizando JUnit.</li> <li>Configuraci\u00f3n de pruebas en Spring Boot: Implementar\u00e1s pruebas para servicios, controladores y repositorios.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del Curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integran APIs REST, patrones de dise\u00f1o y Spring Boot.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte herramientas tecnol\u00f3gicas, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo digital. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s desarrollando APIs REST robustas, implementando patrones de dise\u00f1o avanzados y creando aplicaciones escalables con Spring Boot.</p> <p>\u00a1Bienvenido al futuro del desarrollo de software!</p>"},{"location":"about/","title":"About","text":"<p>Es una iniciativa educativa del CESDE, dise\u00f1ada para introducir a los estudiantes en herramientas clave como APIs REST, patrones de dise\u00f1o y el framework Spring Boot. Este curso combina teor\u00eda y pr\u00e1ctica para brindar una base s\u00f3lida en el desarrollo de aplicaciones robustas, escalables y modernas, utilizando tecnolog\u00edas ampliamente adoptadas en la industria.</p>"},{"location":"about/#docente-del-curso","title":"Docente del Curso","text":"<p>\u00a1Hola a todos! Soy Jhon Fredy Valencia G\u00f3mez, su docente para este programa de Desarrollo de Software. Me emociona mucho darles la bienvenida y comenzar este viaje de aprendizaje juntos.  </p> <p>En este programa, mi objetivo es proporcionarles una formaci\u00f3n pr\u00e1ctica y completa en el desarrollo de APIs REST y la implementaci\u00f3n de patrones de dise\u00f1o utilizando Spring Boot. Mi enfoque se basa en el aprendizaje activo, utilizando ejercicios, proyectos y casos de estudio que les permitir\u00e1n aplicar inmediatamente lo aprendido.  </p> <p>Mi experiencia en el CESDE y el SENA me ha ense\u00f1ado la importancia de una ense\u00f1anza clara, accesible y motivadora. Estoy comprometido con su \u00e9xito y har\u00e9 todo lo posible para apoyarlos en cada etapa del proceso de aprendizaje, respondiendo a sus dudas y brind\u00e1ndoles la retroalimentaci\u00f3n que necesitan.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso busca capacitar a los estudiantes en el uso de herramientas modernas para resolver problemas reales en el \u00e1mbito del desarrollo de software, desde la creaci\u00f3n de APIs REST hasta la implementaci\u00f3n de patrones de dise\u00f1o avanzados. Al finalizar, los participantes estar\u00e1n preparados para: - Desarrollar APIs RESTful utilizando Spring Boot. - Implementar patrones de dise\u00f1o como MVC, por capas y hexagonal para construir aplicaciones desacopladas y mantenibles. - Trabajar con bases de datos relacionales mediante JPA y Hibernate. - Documentar APIs utilizando herramientas como Swagger. - Realizar pruebas unitarias para garantizar la calidad del software.  </p> <p>Con estos conocimientos, los estudiantes estar\u00e1n listos para aplicar sus habilidades en entornos profesionales y colaborar en proyectos tecnol\u00f3gicos de alto impacto.  </p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro del desarrollo de software! \ud83d\ude80</p>"},{"location":"activities/p1/","title":"Semana 3 - Actividad colaborativa: Dise\u00f1ando una API REST con MVC sin escribir c\u00f3digo","text":"<p>Duraci\u00f3n estimada</p> <p>2 horas presenciales. Modalidad: trabajo en equipo de 3-4 personas.</p>"},{"location":"activities/p1/#0-objetivos-de-aprendizaje","title":"0. Objetivos de aprendizaje","text":"<p>Al finalizar la actividad el estudiante ser\u00e1 capaz de:</p> <ol> <li>Describir qu\u00e9 responsabilidad le corresponde a cada capa del patr\u00f3n MVC en una API REST.  </li> <li>Identificar recursos, endpoints y m\u00e9todos HTTP antes de tocar el IDE.  </li> <li>Elaborar un \u201ccontrato\u201d visual (tablas + diagramas) que sirva como gu\u00eda para futura implementaci\u00f3n.  </li> <li>Argumentar y tomar decisiones de dise\u00f1o de forma colaborativa.</li> </ol>"},{"location":"activities/p1/#1-ejemplo-completo-resuelto-gestor-de-tareas","title":"1. Ejemplo completo resuelto: \u201cGestor de Tareas\u201d","text":"<p>Contexto del ejemplo</p> <p>Una startup necesita una API para que sus aplicaciones web y m\u00f3vil puedan crear, listar, actualizar y eliminar tareas de los usuarios.</p>"},{"location":"activities/p1/#11-analisis-de-negocio","title":"1.1 An\u00e1lisis de negocio","text":"Pregunta clave Respuesta \u00bfQu\u00e9 es un \u201crecurso\u201d? Una tarea y sus comentarios. \u00bfAtributos m\u00ednimos de una tarea? id, titulo, descripci\u00f3n, fechaVencimiento, estado (PENDIENTE, EN_PROGRESO, COMPLETADA), usuarioId. \u00bfRelaciones? Un usuario tiene muchas tareas. Una tarea puede tener muchos comentarios."},{"location":"activities/p1/#12-diseno-mvc-sin-codigo","title":"1.2 Dise\u00f1o MVC (sin c\u00f3digo)","text":""},{"location":"activities/p1/#121-capas-y-responsabilidades","title":"1.2.1 Capas y responsabilidades","text":"Capa Responsabilidad en la API Elementos que dise\u00f1amos Modelo Persistir y reglas de negocio Entidad Tarea, regla \u201cno permitir fecha de vencimiento pasada\u201d, repositorio TareaRepository. Vista Representaci\u00f3n JSON al cliente DTO TareaResponse (campos que se env\u00edan) y TareaRequest (campos que recibe). Controlador Orquestar peticiones TareaController con endpoints REST."},{"location":"activities/p1/#122-diagrama-de-recursos-y-rutas","title":"1.2.2 Diagrama de recursos y rutas","text":"<pre><code>graph TD\nsubgraph \"API REST /tareas\"\n   A[GET /tareas] --&gt;|devuelve lista| R1[TareaResponseArray]\n   B[POST /tareas] --&gt;|crea| R2[TareaResponse]\n   C[GET /tareas/:id] --&gt;|devuelve una| R3[TareaResponse]\n   D[PUT /tareas/:id] --&gt;|actualiza| R4[TareaResponse]\n   E[DELETE /tareas/:id] --&gt;|204 No Content| R5[Void]\nend</code></pre>"},{"location":"activities/p1/#123-ejemplo-de-contrato-tabla-compacta","title":"1.2.3 Ejemplo de \u201ccontrato\u201d (tabla compacta)","text":"Endpoint M\u00e9todo Descripci\u00f3n C\u00f3digo \u00e9xito C\u00f3digo error ejemplo Vista (DTO) <code>/tareas</code> GET Listar tareas del usuario logueado 200 OK 401 Unauthorized <code>[{\"id\":1,\"titulo\":\"Comprar pan\",...}]</code> <code>/tareas</code> POST Crear nueva tarea 201 Created + Location 400 Bad Request <code>{\"titulo\":\"Comprar pan\",\"fechaVencimiento\":\"2024-07-25\"}</code> <code>/tareas/7</code> PUT Actualizar tarea completa 200 OK 404 Not Found Misma estructura <code>/tareas/7</code> DELETE Eliminar 204 No Content 404 Not Found \u2014"},{"location":"activities/p1/#13-reglas-de-negocio-declaradas-sin-codigo","title":"1.3 Reglas de negocio declaradas (sin c\u00f3digo)","text":"<ol> <li>Solo el propietario puede modificar o borrar su tarea.  </li> <li>El campo estado solo puede pasar de PENDIENTE \u2192 EN_PROGRESO \u2192 COMPLETADA (sin saltos).  </li> <li>Si la fecha de vencimiento es anterior a \u201choy\u201d, rechazar la operaci\u00f3n.</li> </ol>"},{"location":"activities/p1/#14-entregables-del-ejemplo-lo-que-ven-los-estudiantes","title":"1.4 Entregables del ejemplo (lo que ven los estudiantes)","text":"<ol> <li>Tabla \u201cEndpoints\u201d (arriba).  </li> <li>Diagrama de secuencia simplificado: <pre><code>sequenceDiagram\n   Cliente-&gt;&gt;+TareaController: POST /tareas\n   TareaController-&gt;&gt;+TareaService: crear(request)\n   TareaService-&gt;&gt;TareaService: validarFecha()\n   TareaService-&gt;&gt;+TareaRepository: save(tarea)\n   TareaRepository--&gt;&gt;-TareaService: tareaEntity\n   TareaService--&gt;&gt;-TareaController: tareaResponse\n   TareaController--&gt;&gt;-Cliente: 201 + Location</code></pre></li> <li>Mock de respuesta JSON:    <pre><code>{\n  \"id\": 12,\n  \"titulo\": \"Comprar pan\",\n  \"descripcion\": \"Integral sin sal\",\n  \"fechaVencimiento\": \"2024-07-25\",\n  \"estado\": \"PENDIENTE\",\n  \"usuarioId\": 5\n}\n</code></pre></li> </ol>"},{"location":"activities/p1/#2-actividad-para-los-equipos","title":"2. Actividad para los equipos","text":"<p>Objetivo</p> <p>Replicar el proceso anterior para un dominio nuevo elegido por el equipo.</p>"},{"location":"activities/p1/#21-fase-1-idear","title":"2.1 Fase 1 \u2013 Idear","text":"<p>Cada equipo elige una tem\u00e1tica diferente y la anota en la pizarra compartida para evitar duplicados. Ideas sugeridas:</p> <ul> <li>Gestor de recetas de cocina  </li> <li>Agenda de mascotas (vacunas, citas)  </li> <li>Reservas de canchas deportivas  </li> <li>Cat\u00e1logo de pel\u00edculas con puntuaci\u00f3n  </li> <li>Sistema de notas r\u00e1pidas con etiquetas</li> </ul>"},{"location":"activities/p1/#22-fase-2-analisis-de-negocio","title":"2.2 Fase 2 \u2013 An\u00e1lisis de negocio","text":"<p>Rellenar la siguiente tabla:</p> Recurso principal Atributos m\u00ednimos Relaciones (Ej: Mascota) id, nombre, especie, fechaNac, due\u00f1oId Un due\u00f1o tiene muchas mascotas"},{"location":"activities/p1/#23-fase-3-diseno-mvc-25-min","title":"2.3 Fase 3 \u2013 Dise\u00f1o MVC (25 min)","text":""},{"location":"activities/p1/#a-capas-y-responsabilidades","title":"A. Capas y responsabilidades","text":"<p>Copiar y completar la plantilla:</p> Capa Responsabilidad Elemento que dise\u00f1amos (nombre) Modelo Persistir + reglas Entidad: __ , Regla: ____ Vista JSON de salida DTO: ______Response Controlador Endpoints Clase: ______Controller"},{"location":"activities/p1/#b-tabla-de-endpoints","title":"B. Tabla de endpoints","text":"<p>Usar la misma estructura que en el ejemplo resuelto (endpoint, m\u00e9todo, descripci\u00f3n, c\u00f3digos, DTO). M\u00ednimo 5 endpoints (incluir GET colecci\u00f3n, GET uno, POST, PUT y DELETE).</p>"},{"location":"activities/p1/#c-regla-de-negocio-al-menos-3","title":"C. Regla de negocio (al menos 3)","text":"<p>Describir en lenguaje natural:  </p> <p>\u201cUn due\u00f1o solo puede registrar hasta 5 mascotas activas.\u201d</p>"},{"location":"activities/p1/#24-fase-4-diagrama-de-secuencia","title":"2.4 Fase 4 \u2013 Diagrama de secuencia","text":"<p>Dibujar un solo flujo clave (p.ej. \u201ccrear mascota\u201d) con el mismo estilo del ejemplo anterior. Herramientas: Miro, plantUML en modo texto, o papel.</p>"},{"location":"activities/p1/#25-fase-5-presentacion-y-feedback","title":"2.5 Fase 5 \u2013 Presentaci\u00f3n y feedback","text":"<ul> <li>Cada equipo expone en 2 min su dominio y tablas.  </li> <li>El resto de la clase pregunta o sugiere mejoras (formato 1 pregunta + 1 idea).  </li> <li>Docente anota en una \u201cr\u00fabrica visible\u201d los criterios: claridad, completitud, consistencia REST.</li> </ul>"},{"location":"activities/p1/#3-rubrica-de-evaluacion-rapida-compartida","title":"3. R\u00fabrica de evaluaci\u00f3n r\u00e1pida (compartida)","text":"Criterio Excelente (3) Bueno (2) Necesita mejora (1) Identificaci\u00f3n correcta de recursos Recursos claros y bien nombrados Algunos nombres confusos Faltan recursos clave Endpoints RESTful Usan bien verbos y rutas 1-2 desviaciones Errores frecuentes Reglas de negocio Regla l\u00f3gica y coherente Simple, pero funciona No hay regla o es inconsistente Diagrama de secuencia Flujo l\u00f3gico y legible Falta detalle No coincide con endpoints"},{"location":"activities/p1/#4-entrega-final-sin-codigo","title":"4. Entrega final (sin c\u00f3digo)","text":"<p>Cada equipo sube al archivo de evidencia (PDF) con:</p> <ol> <li>Tabla de an\u00e1lisis de negocio.  </li> <li>Tabla de endpoints.  </li> <li>Diagrama de secuencia.  </li> <li>Regla de negocio descrita.  </li> </ol>"},{"location":"activities/p2/","title":"Semana 4 - Gu\u00eda Completa para Crear un Proyecto Spring Boot con H2, PostgreSQL y MySQL","text":""},{"location":"activities/p2/#paso-1-crear-un-fork-de","title":"Paso 1: Crear un fork de:","text":"<pre><code>https://github.com/jfinfocesde/act_b2_s4.git\n</code></pre>"},{"location":"activities/p2/#11-clonar-el-repositorio","title":"1.1 Clonar el Repositorio","text":"<pre><code># Navegar a la carpeta donde deseas clonar el proyecto\ncd /ruta/deseada/\n\n# Clonar el repositorio (reemplaza con la URL real del fork)\ngit clone https://github.com/tu-usuario/act_b2_s4.git\n\n# Navegar al directorio del proyecto\ncd act_b2_s4.git\n</code></pre>"},{"location":"activities/p2/#12-abrir-el-proyecto-en-tu-ide","title":"1.2 Abrir el Proyecto en tu IDE","text":"<ul> <li>IntelliJ IDEA: File \u2192 Open \u2192 Seleccionar el directorio del proyecto</li> <li>VS Code: File \u2192 Open Folder \u2192 Seleccionar el directorio del proyecto</li> <li>Eclipse: File \u2192 Import \u2192 Existing Maven Projects</li> </ul>"},{"location":"activities/p2/#paso-2-estructura-del-proyecto","title":"Paso 2: Estructura del Proyecto","text":"<p>La estructura final debe ser: <pre><code>src/main/java/com/example/demo/\n\u251c\u2500\u2500 DemoApplication.java\n\u251c\u2500\u2500 model/\n\u2502   \u2514\u2500\u2500 User.java\n\u251c\u2500\u2500 repository/\n\u2502   \u2514\u2500\u2500 UserRepository.java\n\u251c\u2500\u2500 service/\n\u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u2514\u2500\u2500 UserServiceImpl.java\n\u2514\u2500\u2500 controller/\n    \u2514\u2500\u2500 UserController.java\n</code></pre></p>"},{"location":"activities/p2/#paso-3-crear-los-paquetes","title":"Paso 3: Crear los Paquetes","text":""},{"location":"activities/p2/#31-crear-paquetes-en-tu-ide","title":"3.1 Crear Paquetes en tu IDE","text":"<ol> <li>En <code>src/main/java</code>, crea el paquete base: <code>com.example.demo</code></li> <li>Dentro del paquete base, crea los siguientes paquetes:</li> <li><code>model</code></li> <li><code>repository</code></li> <li><code>service</code></li> <li><code>controller</code></li> </ol>"},{"location":"activities/p2/#paso-4-crear-la-clase-modelo","title":"Paso 4: Crear la Clase Modelo","text":""},{"location":"activities/p2/#41-crear-userjava-en-model","title":"4.1 Crear <code>User.java</code> en <code>model/</code>","text":"<pre><code>package com.example.demo.model;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 100)\n    private String name;\n\n    @Column(nullable = false, unique = true, length = 100)\n    private String email;\n\n    @Column(length = 20)\n    private String phone;\n\n    // Constructores\n    public User() {}\n\n    public User(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n    }\n\n    // Getters y Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", phone='\" + phone + '\\'' +\n                '}';\n    }\n}\n</code></pre>"},{"location":"activities/p2/#paso-5-crear-el-repositorio","title":"Paso 5: Crear el Repositorio","text":""},{"location":"activities/p2/#51-crear-userrepositoryjava-en-repository","title":"5.1 Crear <code>UserRepository.java</code> en <code>repository/</code>","text":"<pre><code>package com.example.demo.repository;\n\nimport com.example.demo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    // M\u00e9todos personalizados\n    List&lt;User&gt; findByNameContainingIgnoreCase(String name);\n    List&lt;User&gt; findByEmailContainingIgnoreCase(String email);\n    boolean existsByEmail(String email);\n}\n</code></pre>"},{"location":"activities/p2/#paso-6-crear-la-capa-de-servicio","title":"Paso 6: Crear la Capa de Servicio","text":""},{"location":"activities/p2/#61-crear-userservicejava-en-service","title":"6.1 Crear <code>UserService.java</code> en <code>service/</code>","text":"<pre><code>package com.example.demo.service;\n\nimport com.example.demo.model.User;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface UserService {\n\n    List&lt;User&gt; getAllUsers();\n    Optional&lt;User&gt; getUserById(Long id);\n    User saveUser(User user);\n    User updateUser(Long id, User user);\n    void deleteUser(Long id);\n    List&lt;User&gt; findByName(String name);\n    List&lt;User&gt; findByEmail(String email);\n    boolean existsByEmail(String email);\n}\n</code></pre>"},{"location":"activities/p2/#62-crear-userserviceimpljava-en-service","title":"6.2 Crear <code>UserServiceImpl.java</code> en <code>service/</code>","text":"<pre><code>package com.example.demo.service;\n\nimport com.example.demo.model.User;\nimport com.example.demo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public List&lt;User&gt; getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    @Override\n    public Optional&lt;User&gt; getUserById(Long id) {\n        return userRepository.findById(id);\n    }\n\n    @Override\n    public User saveUser(User user) {\n        if (userRepository.existsByEmail(user.getEmail())) {\n            throw new RuntimeException(\"El email ya est\u00e1 registrado\");\n        }\n        return userRepository.save(user);\n    }\n\n    @Override\n    public User updateUser(Long id, User user) {\n        Optional&lt;User&gt; existingUser = userRepository.findById(id);\n        if (existingUser.isPresent()) {\n            User updatedUser = existingUser.get();\n            updatedUser.setName(user.getName());\n            updatedUser.setEmail(user.getEmail());\n            updatedUser.setPhone(user.getPhone());\n            return userRepository.save(updatedUser);\n        } else {\n            throw new RuntimeException(\"Usuario no encontrado con id: \" + id);\n        }\n    }\n\n    @Override\n    public void deleteUser(Long id) {\n        if (userRepository.existsById(id)) {\n            userRepository.deleteById(id);\n        } else {\n            throw new RuntimeException(\"Usuario no encontrado con id: \" + id);\n        }\n    }\n\n    @Override\n    public List&lt;User&gt; findByName(String name) {\n        return userRepository.findByNameContainingIgnoreCase(name);\n    }\n\n    @Override\n    public List&lt;User&gt; findByEmail(String email) {\n        return userRepository.findByEmailContainingIgnoreCase(email);\n    }\n\n    @Override\n    public boolean existsByEmail(String email) {\n        return userRepository.existsByEmail(email);\n    }\n}\n</code></pre>"},{"location":"activities/p2/#paso-7-crear-el-controlador","title":"Paso 7: Crear el Controlador","text":""},{"location":"activities/p2/#71-crear-usercontrollerjava-en-controller","title":"7.1 Crear <code>UserController.java</code> en <code>controller/</code>","text":"<pre><code>package com.example.demo.controller;\n\nimport com.example.demo.model.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/users\")\n@CrossOrigin(origins = \"*\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    // Obtener todos los usuarios\n    @GetMapping\n    public ResponseEntity&lt;List&lt;User&gt;&gt; getAllUsers() {\n        List&lt;User&gt; users = userService.getAllUsers();\n        return new ResponseEntity&lt;&gt;(users, HttpStatus.OK);\n    }\n\n    // Obtener usuario por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;User&gt; getUserById(@PathVariable Long id) {\n        Optional&lt;User&gt; user = userService.getUserById(id);\n        if (user.isPresent()) {\n            return new ResponseEntity&lt;&gt;(user.get(), HttpStatus.OK);\n        } else {\n            return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n        }\n    }\n\n    // Crear nuevo usuario\n    @PostMapping\n    public ResponseEntity&lt;User&gt; createUser(@RequestBody User user) {\n        try {\n            User newUser = userService.saveUser(user);\n            return new ResponseEntity&lt;&gt;(newUser, HttpStatus.CREATED);\n        } catch (RuntimeException e) {\n            return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    // Actualizar usuario\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;User&gt; updateUser(@PathVariable Long id, @RequestBody User user) {\n        try {\n            User updatedUser = userService.updateUser(id, user);\n            return new ResponseEntity&lt;&gt;(updatedUser, HttpStatus.OK);\n        } catch (RuntimeException e) {\n            return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n        }\n    }\n\n    // Eliminar usuario\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;HttpStatus&gt; deleteUser(@PathVariable Long id) {\n        try {\n            userService.deleteUser(id);\n            return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);\n        } catch (RuntimeException e) {\n            return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n        }\n    }\n\n    // Buscar usuarios por nombre\n    @GetMapping(\"/search/name/{name}\")\n    public ResponseEntity&lt;List&lt;User&gt;&gt; findByName(@PathVariable String name) {\n        List&lt;User&gt; users = userService.findByName(name);\n        return new ResponseEntity&lt;&gt;(users, HttpStatus.OK);\n    }\n\n    // Buscar usuarios por email\n    @GetMapping(\"/search/email/{email}\")\n    public ResponseEntity&lt;List&lt;User&gt;&gt; findByEmail(@PathVariable String email) {\n        List&lt;User&gt; users = userService.findByEmail(email);\n        return new ResponseEntity&lt;&gt;(users, HttpStatus.OK);\n    }\n}\n</code></pre>"},{"location":"activities/p2/#paso-8-configuracion-de-la-aplicacion-base","title":"Paso 8: Configuraci\u00f3n de la Aplicaci\u00f3n Base","text":""},{"location":"activities/p2/#81-verificar-demoapplicationjava","title":"8.1 Verificar <code>DemoApplication.java</code>","text":"<pre><code>package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"activities/p2/#paso-9-configuracion-para-h2-database","title":"Paso 9: Configuraci\u00f3n para H2 Database","text":""},{"location":"activities/p2/#91-agregar-dependencias-en-pomxml-si-no-existen","title":"9.1 Agregar dependencias en <code>pom.xml</code> (si no existen)","text":"<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n        &lt;artifactId&gt;h2&lt;/artifactId&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"activities/p2/#92-configurar-applicationproperties-para-h2","title":"9.2 Configurar <code>application.properties</code> para H2","text":"<pre><code># Configuraci\u00f3n de H2 Database\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\n\n# Configuraci\u00f3n de JPA/Hibernate\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n\n# Configuraci\u00f3n de H2 Console\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2-console\n\n# Configuraci\u00f3n del servidor\nserver.port=8080\n</code></pre>"},{"location":"activities/p2/#paso-10-probar-con-h2-database","title":"Paso 10: Probar con H2 Database","text":""},{"location":"activities/p2/#101-ejecutar-la-aplicacion-utilizando-la-extension-spring-boot-extension-pack","title":"10.1 Ejecutar la aplicaci\u00f3n utilizando la extensi\u00f3n Spring Boot Extension Pack","text":""},{"location":"activities/p2/#102-probar-endpoints-con-curl-o-postman","title":"10.2 Probar endpoints con curl o Postman","text":"<pre><code># Crear usuarios\ncurl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Juan P\u00e9rez\",\"email\":\"juan@email.com\",\"phone\":\"123456789\"}'\n\ncurl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Mar\u00eda Garc\u00eda\",\"email\":\"maria@email.com\",\"phone\":\"987654321\"}'\n\n# Obtener todos los usuarios\ncurl -X GET http://localhost:8080/api/users\n\n# Obtener usuario por ID\ncurl -X GET http://localhost:8080/api/users/1\n\n# Actualizar usuario\ncurl -X PUT http://localhost:8080/api/users/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Juan P\u00e9rez Actualizado\",\"email\":\"juan.actualizado@email.com\",\"phone\":\"111111111\"}'\n\n# Buscar por nombre\ncurl -X GET http://localhost:8080/api/users/search/name/Juan\n\n# Acceder a H2 Console para Ver la Base de Datos\nPara ejecutar y visualizar la base de datos H2:\n1. Aseg\u00farate de que `spring.h2.console.enabled=true` est\u00e9 en `application.properties`.\n2. Ejecuta la aplicaci\u00f3n con `mvn spring-boot:run`.\n3. Abre un navegador y ve a `http://localhost:8080/h2-console`.\n4. En la consola H2, ingresa:\n   - JDBC URL: `jdbc:h2:mem:testdb`\n   - User Name: `sa`\n   - Password: (deja en blanco)\n5. Haz clic en \"Connect\".\n6. Ahora puedes explorar tablas, ejecutar queries y ver datos.\n</code></pre>"},{"location":"activities/p2/#paso-11-configuracion-para-postgresql","title":"Paso 11: Configuraci\u00f3n para PostgreSQL","text":""},{"location":"activities/p2/#111-agregar-dependencia-de-postgresql-en-pomxml","title":"11.1 Agregar dependencia de PostgreSQL en <code>pom.xml</code>","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"activities/p2/#112-crear-base-de-datos-en-postgresql","title":"11.2 Crear base de datos en PostgreSQL","text":"<pre><code>-- Conectarse a PostgreSQL y ejecutar:\nCREATE DATABASE demo_springboot;\nCREATE USER demo_user WITH PASSWORD 'demo_password';\nGRANT ALL PRIVILEGES ON DATABASE demo_springboot TO demo_user;\n</code></pre>"},{"location":"activities/p2/#113-configurar-application-postgresqlproperties","title":"11.3 Configurar <code>application-postgresql.properties</code>","text":"<pre><code># Configuraci\u00f3n de PostgreSQL\nspring.datasource.url=jdbc:postgresql://localhost:5432/postgres\nspring.datasource.username=postgres\nspring.datasource.password=\nspring.datasource.driver-class-name=org.postgresql.Driver\n\n# Configuraci\u00f3n de JPA/Hibernate\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n\n# Configuraci\u00f3n adicional de PostgreSQL\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\n</code></pre>"},{"location":"activities/p2/#paso-12-configuracion-para-mysql","title":"Paso 12: Configuraci\u00f3n para MySQL","text":""},{"location":"activities/p2/#121-agregar-dependencia-de-mysql-en-pomxml","title":"12.1 Agregar dependencia de MySQL en <code>pom.xml</code>","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;version&gt;8.0.33&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"activities/p2/#122-crear-base-de-datos-en-mysql","title":"12.2 Crear base de datos en MySQL","text":"<pre><code>-- Conectarse a MySQL y ejecutar:\nCREATE DATABASE demo_springboot;\nCREATE USER 'demo_user'@'localhost' IDENTIFIED BY 'demo_password';\nGRANT ALL PRIVILEGES ON demo_springboot.* TO 'demo_user'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre>"},{"location":"activities/p2/#123-configurar-application-mysqlproperties","title":"12.3 Configurar <code>application-mysql.properties</code>","text":"<pre><code># Configuraci\u00f3n de MySQL\nspring.datasource.url=jdbc:mysql://localhost:3306/demo_springboot?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true\nspring.datasource.username=demo_user\nspring.datasource.password=demo_password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n# Configuraci\u00f3n de JPA/Hibernate\nspring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n\n# Configuraci\u00f3n adicional de MySQL\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n</code></pre>"},{"location":"activities/p2/#paso-13-configuracion-principal","title":"Paso 13: Configuraci\u00f3n Principal","text":""},{"location":"activities/p2/#131-crear-applicationproperties-principal","title":"13.1 Crear <code>application.properties</code> principal","text":"<pre><code># Perfil activo por defecto (puede ser h2, postgresql o mysql)\nspring.profiles.active=h2\n\n# Configuraci\u00f3n general del servidor\nserver.port=8080\nserver.servlet.context-path=/api\n\n# Configuraci\u00f3n de logging\nlogging.level.com.example.demo=DEBUG\nlogging.level.org.springframework.web=DEBUG\nlogging.level.org.hibernate=ERROR\n</code></pre>"},{"location":"activities/p2/#paso-14-pruebas-completas","title":"Paso 14: Pruebas Completas","text":""},{"location":"activities/p2/#141-script-de-pruebas-con-curl","title":"14.1 Script de pruebas con curl","text":"<p>Crear archivo <code>test-apis.sh</code>:</p> <pre><code>#!/bin/bash\n\necho \"=== PRUEBAS DE API REST ===\"\nBASE_URL=\"http://localhost:8080/api\"\n\necho \"1. Creando usuarios...\"\ncurl -X POST $BASE_URL/usuarios \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nombre\":\"Usuario Test 1\",\"email\":\"test1@example.com\",\"telefono\":\"111111111\"}'\n\necho -e \"\\n\"\n\ncurl -X POST $BASE_URL/usuarios \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nombre\":\"Usuario Test 2\",\"email\":\"test2@example.com\",\"telefono\":\"222222222\"}'\n\necho -e \"\\n\"\n\necho \"2. Obteniendo todos los usuarios...\"\ncurl -X GET $BASE_URL/usuarios\n\necho -e \"\\n\"\n\necho \"3. Obteniendo usuario por ID...\"\ncurl -X GET $BASE_URL/usuarios/1\n\necho -e \"\\n\"\n\necho \"4. Actualizando usuario...\"\ncurl -X PUT $BASE_URL/usuarios/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nombre\":\"Usuario Actualizado\",\"email\":\"actualizado@example.com\",\"telefono\":\"999999999\"}'\n\necho -e \"\\n\"\n\necho \"5. Buscando por nombre...\"\ncurl -X GET \"$BASE_URL/usuarios/buscar/nombre/Usuario\"\n\necho -e \"\\n\"\n\necho \"6. Eliminando usuario...\"\ncurl -X DELETE $BASE_URL/usuarios/2\n\necho -e \"\\n\"\n\necho \"7. Verificando eliminaci\u00f3n...\"\ncurl -X GET $BASE_URL/usuarios\n</code></pre>"},{"location":"activities/p2/#142-ejecutar-pruebas","title":"14.2 Ejecutar pruebas","text":"<pre><code>chmod +x test-apis.sh\n./test-apis.sh\n</code></pre>"},{"location":"activities/p2/#paso-15-verificacion-final","title":"Paso 15: Verificaci\u00f3n Final","text":""},{"location":"activities/p2/#151-verificar-estructura-del-proyecto","title":"15.1 Verificar estructura del proyecto","text":"<p>Aseg\u00farate de tener: <pre><code>src/\n\u251c\u2500\u2500 main/\n\u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502       \u2514\u2500\u2500 ejemplo/\n\u2502   \u2502           \u2514\u2500\u2500 demo/\n\u2502   \u2502               \u251c\u2500\u2500 DemoApplication.java\n\u2502   \u2502               \u251c\u2500\u2500 controller/\n\u2502   \u2502               \u2502   \u2514\u2500\u2500 UsuarioController.java\n\u2502   \u2502               \u251c\u2500\u2500 model/\n\u2502   \u2502               \u2502   \u2514\u2500\u2500 Usuario.java\n\u2502   \u2502               \u251c\u2500\u2500 repository/\n\u2502   \u2502               \u2502   \u2514\u2500\u2500 UsuarioRepository.java\n\u2502   \u2502               \u2514\u2500\u2500 service/\n\u2502   \u2502                   \u251c\u2500\u2500 UsuarioService.java\n\u2502   \u2502                   \u2514\u2500\u2500 UsuarioServiceImpl.java\n\u2502   \u2514\u2500\u2500 resources/\n\u2502       \u251c\u2500\u2500 application.properties\n\u2502       \u251c\u2500\u2500 application-h2.properties\n\u2502       \u251c\u2500\u2500 application-mysql.properties\n\u2502       \u2514\u2500\u2500 application-postgresql.properties\n\u2514\u2500\u2500 test/\n</code></pre></p>"},{"location":"activities/p2/#152-verificar-funcionalidad","title":"15.2 Verificar funcionalidad","text":"<ol> <li>H2: Ejecutar con <code>spring.profiles.active=h2</code></li> <li>PostgreSQL: Ejecutar con <code>spring.profiles.active=postgresql</code></li> <li>MySQL: Ejecutar con <code>spring.profiles.active=mysql</code></li> </ol>"},{"location":"activities/p2/#153-probar-endpoints","title":"15.3 Probar endpoints","text":"<ul> <li>POST <code>/api/usuarios</code> - Crear usuario</li> <li>GET <code>/api/usuarios</code> - Listar usuarios</li> <li>GET <code>/api/usuarios/{id}</code> - Obtener usuario por ID</li> <li>PUT <code>/api/usuarios/{id}</code> - Actualizar usuario</li> <li>DELETE <code>/api/usuarios/{id}</code> - Eliminar usuario</li> <li>GET <code>/api/usuarios/buscar/nombre/{nombre}</code> - Buscar por nombre</li> <li>GET <code>/api/usuarios/buscar/email/{email}</code> - Buscar por email</li> </ul>"},{"location":"api/","title":"Tutorial: Construyendo una API REST con Spring Boot","text":""},{"location":"api/#guia-completa-para-desarrollar-un-sistema-de-inventario","title":"\ud83d\udcda Gu\u00eda Completa para Desarrollar un Sistema de Inventario","text":"<p>Este tutorial te guiar\u00e1 paso a paso en la construcci\u00f3n de una API REST completa utilizando Spring Boot. Aprender\u00e1s a crear un sistema de inventario funcional que incluye gesti\u00f3n de usuarios, items, pr\u00e9stamos e historial.</p>"},{"location":"api/#objetivos-del-tutorial","title":"\ud83c\udfaf Objetivos del Tutorial","text":"<p>Al finalizar este tutorial, ser\u00e1s capaz de: - Configurar un proyecto Spring Boot desde cero - Implementar una arquitectura REST bien estructurada - Trabajar con bases de datos usando JPA/Hibernate - Crear entidades, DTOs, servicios y controladores - Implementar operaciones CRUD completas - Configurar endpoints de monitoreo con Actuator - Probar tu API de manera efectiva</p>"},{"location":"api/#contenido-del-tutorial","title":"\ud83d\udccb Contenido del Tutorial","text":""},{"location":"api/#1-configuracion-inicial-del-proyecto","title":"1. Configuraci\u00f3n Inicial del Proyecto","text":"<ul> <li>Creaci\u00f3n del proyecto Spring Boot</li> <li>Estructura de directorios</li> <li>Configuraci\u00f3n del archivo <code>pom.xml</code></li> <li>Configuraci\u00f3n b\u00e1sica de la aplicaci\u00f3n</li> </ul>"},{"location":"api/#2-configuracion-de-base-de-datos-y-jpa","title":"2. Configuraci\u00f3n de Base de Datos y JPA","text":"<ul> <li>Configuraci\u00f3n de PostgreSQL</li> <li>Propiedades de conexi\u00f3n</li> <li>Configuraci\u00f3n de JPA/Hibernate</li> <li>Variables de entorno</li> </ul>"},{"location":"api/#3-creacion-de-entidades","title":"3. Creaci\u00f3n de Entidades","text":"<ul> <li>Dise\u00f1o del modelo de datos</li> <li>Entidad User (Usuario)</li> <li>Entidad Item (Art\u00edculo)</li> <li>Entidad Loan (Pr\u00e9stamo)</li> <li>Entidad LoanHistory (Historial de Pr\u00e9stamos)</li> <li>Relaciones entre entidades</li> </ul>"},{"location":"api/#4-dtos-y-mapeo-de-datos","title":"4. DTOs y Mapeo de Datos","text":"<ul> <li>\u00bfQu\u00e9 son los DTOs y por qu\u00e9 usarlos?</li> <li>Creaci\u00f3n de DTOs para cada entidad</li> <li>M\u00e9todos de conversi\u00f3n (toDTO/toEntity)</li> <li>Mejores pr\u00e1cticas de mapeo</li> </ul>"},{"location":"api/#5-repositorios-y-acceso-a-datos","title":"5. Repositorios y Acceso a Datos","text":"<ul> <li>Spring Data JPA y repositorios</li> <li>Operaciones CRUD autom\u00e1ticas</li> <li>Consultas derivadas y personalizadas</li> <li>Mejores pr\u00e1cticas de acceso a datos</li> </ul>"},{"location":"api/#6-servicios-y-logica-de-negocio","title":"6. Servicios y L\u00f3gica de Negocio","text":"<ul> <li>Patr\u00f3n de servicios en Spring</li> <li>Implementaci\u00f3n de servicios para cada entidad</li> <li>Inyecci\u00f3n de dependencias</li> <li>Manejo de excepciones</li> </ul>"},{"location":"api/#7-controladores-rest","title":"7. Controladores REST","text":"<ul> <li>Fundamentos de REST</li> <li>Creaci\u00f3n de controladores</li> <li>Anotaciones de Spring Web</li> <li>Implementaci\u00f3n de endpoints CRUD</li> <li>Manejo de respuestas HTTP</li> </ul>"},{"location":"api/#8-actuator-y-monitoreo","title":"8. Actuator y Monitoreo","text":"<ul> <li>Configuraci\u00f3n de Spring Boot Actuator</li> <li>Endpoints de salud e informaci\u00f3n</li> <li>Health Indicators personalizados</li> <li>M\u00e9tricas y monitoreo de aplicaciones</li> </ul>"},{"location":"api/#9-validacion-y-manejo-de-errores","title":"9. Validaci\u00f3n y Manejo de Errores","text":"<ul> <li>Bean Validation con anotaciones</li> <li>Manejo centralizado de errores</li> <li>Excepciones personalizadas</li> <li>Validaciones de negocio</li> </ul>"},{"location":"api/#proyecto-de-referencia","title":"\ud83d\ude80 Proyecto de Referencia","text":"<p>Este tutorial est\u00e1 basado en un proyecto real de sistema de inventario que incluye:</p> <p>Entidades principales: - Users: Gesti\u00f3n de usuarios del sistema - Items: Cat\u00e1logo de art\u00edculos disponibles - Loans: Registro de pr\u00e9stamos de art\u00edculos - LoanHistory: Historial de acciones sobre pr\u00e9stamos</p> <p>Funcionalidades: - CRUD completo para todas las entidades - Relaciones entre entidades - Endpoints de monitoreo - Validaci\u00f3n de datos - Manejo de errores</p>"},{"location":"api/#estructura-del-proyecto-final","title":"\ud83d\udcc1 Estructura del Proyecto Final","text":"<pre><code>pi_backend2/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/com/example/pib2/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/     # Controladores REST\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 entities/    # Entidades JPA\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 dtos/        # Data Transfer Objects\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 servicios/       # L\u00f3gica de negocio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Pib2Application.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u2514\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 test/\n\u251c\u2500\u2500 doc/                         # Documentaci\u00f3n del tutorial\n\u251c\u2500\u2500 pom.xml                      # Dependencias Maven\n\u2514\u2500\u2500 test-endpoints.ps1           # Script de pruebas\n</code></pre>"},{"location":"api/#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnolog\u00edas Utilizadas","text":"<ul> <li>Spring Boot 3.x: Framework principal</li> <li>Spring Web: Para crear APIs REST</li> <li>Spring Data JPA: Para persistencia de datos</li> <li>PostgreSQL: Base de datos</li> <li>Spring Boot Actuator: Monitoreo y m\u00e9tricas</li> <li>Maven: Gesti\u00f3n de dependencias</li> </ul>"},{"location":"api/#prerrequisitos","title":"\ud83d\udcdd Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener instalado: - Java 21 o superior - Maven 3.6+ - PostgreSQL (o acceso a una base de datos PostgreSQL) - Un IDE como IntelliJ IDEA, Eclipse o VS Code - Conocimientos b\u00e1sicos de Java y programaci\u00f3n orientada a objetos</p>"},{"location":"api/#metodologia-de-aprendizaje","title":"\ud83c\udf93 Metodolog\u00eda de Aprendizaje","text":"<p>Cada secci\u00f3n del tutorial incluye:</p> <ul> <li>Explicaci\u00f3n te\u00f3rica: Conceptos fundamentales</li> <li>C\u00f3digo de ejemplo: Implementaci\u00f3n pr\u00e1ctica</li> <li>Explicaci\u00f3n l\u00ednea por l\u00ednea: Detalles de cada componente</li> <li>Ejercicios pr\u00e1cticos: Para reforzar el aprendizaje</li> <li>Consejos y mejores pr\u00e1cticas: Experiencia del mundo real</li> </ul> <p>\u00a1Comienza tu viaje en el desarrollo de APIs REST con Spring Boot! \ud83d\ude80</p> <p>Siguiente: Configuraci\u00f3n Inicial del Proyecto \u2192</p>"},{"location":"api/00-estructura-proyecto/","title":"Estructura del Proyecto Spring Boot","text":""},{"location":"api/00-estructura-proyecto/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Entender la estructura est\u00e1ndar de un proyecto Spring Boot - Conocer la organizaci\u00f3n de paquetes en Java - Crear la estructura de carpetas correcta - Aplicar las mejores pr\u00e1cticas de organizaci\u00f3n de c\u00f3digo</p>"},{"location":"api/00-estructura-proyecto/#estructura-general-del-proyecto","title":"\ud83d\udcc1 Estructura General del Proyecto","text":"<pre><code>pi_backend2/\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .mvn/\n\u2502   \u2514\u2500\u2500 wrapper/\n\u2502       \u2514\u2500\u2500 maven-wrapper.properties\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 doc/                              # Documentaci\u00f3n del proyecto\n\u2502   \u251c\u2500\u2500 00-estructura-proyecto.md\n\u2502   \u251c\u2500\u2500 01-configuracion-inicial.md\n\u2502   \u251c\u2500\u2500 02-configuracion-database.md\n\u2502   \u251c\u2500\u2500 03-entidades-modelos.md\n\u2502   \u251c\u2500\u2500 04-dtos-mapeo.md\n\u2502   \u251c\u2500\u2500 05-repositorios-acceso-datos.md\n\u2502   \u251c\u2500\u2500 06-servicios-logica-negocio.md\n\u2502   \u251c\u2500\u2500 07-controladores-rest.md\n\u2502   \u251c\u2500\u2500 08-actuator-monitoreo.md\n\u2502   \u251c\u2500\u2500 09-validacion-manejo-errores.md\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 info.json\n\u251c\u2500\u2500 mvnw                              # Maven Wrapper (Unix)\n\u251c\u2500\u2500 mvnw.cmd                          # Maven Wrapper (Windows)\n\u251c\u2500\u2500 pom.xml                           # Configuraci\u00f3n de Maven\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 pib2/         # Paquete base de la aplicaci\u00f3n\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 Pib2Application.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 config/   # Configuraciones\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 controller/ # Controladores REST\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 dto/      # Data Transfer Objects\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 entity/   # Entidades JPA\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 exception/ # Excepciones personalizadas\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 health/   # Health Indicators\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 info/     # Info Contributors\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 metrics/  # M\u00e9tricas personalizadas\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 repository/ # Repositorios JPA\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 service/  # Servicios de negocio\n\u2502   \u2502   \u2502               \u2514\u2500\u2500 util/     # Utilidades\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.properties\n\u2502   \u2502       \u251c\u2500\u2500 application-dev.properties\n\u2502   \u2502       \u251c\u2500\u2500 application-prod.properties\n\u2502   \u2502       \u2514\u2500\u2500 static/               # Archivos est\u00e1ticos\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 example/\n\u2502                   \u2514\u2500\u2500 pib2/         # Tests del proyecto\n\u2514\u2500\u2500 test-endpoints.ps1                # Script de pruebas\n</code></pre>"},{"location":"api/00-estructura-proyecto/#estructura-de-paquetes-java","title":"\ud83c\udfd7\ufe0f Estructura de Paquetes Java","text":""},{"location":"api/00-estructura-proyecto/#paquete-base-comexamplepib2","title":"Paquete Base: <code>com.example.pib2</code>","text":"<p>El paquete base sigue la convenci\u00f3n de Java: - com: Dominio comercial - example: Nombre de la organizaci\u00f3n - pib2: Nombre del proyecto</p>"},{"location":"api/00-estructura-proyecto/#organizacion-por-capas","title":"Organizaci\u00f3n por Capas","text":""},{"location":"api/00-estructura-proyecto/#1-config-configuraciones","title":"1. config/ - Configuraciones","text":"<pre><code>com.example.pib2.config/\n\u251c\u2500\u2500 DatabaseConfig.java           // Configuraci\u00f3n de base de datos\n\u251c\u2500\u2500 SecurityConfig.java           // Configuraci\u00f3n de seguridad\n\u251c\u2500\u2500 WebConfig.java               // Configuraci\u00f3n web\n\u251c\u2500\u2500 ActuatorConfig.java          // Configuraci\u00f3n de Actuator\n\u2514\u2500\u2500 InternationalizationConfig.java // Configuraci\u00f3n de i18n\n</code></pre>"},{"location":"api/00-estructura-proyecto/#2-entity-entidades-jpa","title":"2. entity/ - Entidades JPA","text":"<pre><code>com.example.pib2.entity/\n\u251c\u2500\u2500 User.java                    // Entidad Usuario\n\u251c\u2500\u2500 Item.java                    // Entidad Art\u00edculo\n\u251c\u2500\u2500 Loan.java                    // Entidad Pr\u00e9stamo\n\u2514\u2500\u2500 LoanHistory.java             // Entidad Historial de Pr\u00e9stamos\n</code></pre>"},{"location":"api/00-estructura-proyecto/#3-dto-data-transfer-objects","title":"3. dto/ - Data Transfer Objects","text":"<pre><code>com.example.pib2.dto/\n\u251c\u2500\u2500 UserDTO.java                 // DTO para Usuario\n\u251c\u2500\u2500 ItemDTO.java                 // DTO para Art\u00edculo\n\u251c\u2500\u2500 LoanDTO.java                 // DTO para Pr\u00e9stamo\n\u251c\u2500\u2500 LoanHistoryDTO.java          // DTO para Historial\n\u251c\u2500\u2500 CreateUserDTO.java           // DTO para crear usuario\n\u251c\u2500\u2500 UpdateUserDTO.java           // DTO para actualizar usuario\n\u2514\u2500\u2500 ErrorResponseDTO.java        // DTO para respuestas de error\n</code></pre>"},{"location":"api/00-estructura-proyecto/#4-repository-repositorios-de-datos","title":"4. repository/ - Repositorios de Datos","text":"<pre><code>com.example.pib2.repository/\n\u251c\u2500\u2500 UserRepository.java          // Repositorio de Usuario\n\u251c\u2500\u2500 ItemRepository.java          // Repositorio de Art\u00edculo\n\u251c\u2500\u2500 LoanRepository.java          // Repositorio de Pr\u00e9stamo\n\u2514\u2500\u2500 LoanHistoryRepository.java   // Repositorio de Historial\n</code></pre>"},{"location":"api/00-estructura-proyecto/#5-service-servicios-de-negocio","title":"5. service/ - Servicios de Negocio","text":"<pre><code>com.example.pib2.service/\n\u251c\u2500\u2500 UserService.java             // Servicio de Usuario\n\u251c\u2500\u2500 ItemService.java             // Servicio de Art\u00edculo\n\u251c\u2500\u2500 LoanService.java             // Servicio de Pr\u00e9stamo\n\u251c\u2500\u2500 LoanHistoryService.java      // Servicio de Historial\n\u2514\u2500\u2500 impl/                        // Implementaciones\n    \u251c\u2500\u2500 UserServiceImpl.java\n    \u251c\u2500\u2500 ItemServiceImpl.java\n    \u251c\u2500\u2500 LoanServiceImpl.java\n    \u2514\u2500\u2500 LoanHistoryServiceImpl.java\n</code></pre>"},{"location":"api/00-estructura-proyecto/#6-controller-controladores-rest","title":"6. controller/ - Controladores REST","text":"<pre><code>com.example.pib2.controller/\n\u251c\u2500\u2500 UserController.java          // Controlador de Usuario\n\u251c\u2500\u2500 ItemController.java          // Controlador de Art\u00edculo\n\u251c\u2500\u2500 LoanController.java          // Controlador de Pr\u00e9stamo\n\u2514\u2500\u2500 LoanHistoryController.java   // Controlador de Historial\n</code></pre>"},{"location":"api/00-estructura-proyecto/#7-exception-excepciones-personalizadas","title":"7. exception/ - Excepciones Personalizadas","text":"<pre><code>com.example.pib2.exception/\n\u251c\u2500\u2500 GlobalExceptionHandler.java  // Manejador global de excepciones\n\u251c\u2500\u2500 ResourceNotFoundException.java // Excepci\u00f3n de recurso no encontrado\n\u251c\u2500\u2500 BadRequestException.java     // Excepci\u00f3n de petici\u00f3n incorrecta\n\u251c\u2500\u2500 DuplicateResourceException.java // Excepci\u00f3n de recurso duplicado\n\u2514\u2500\u2500 ValidationException.java     // Excepci\u00f3n de validaci\u00f3n\n</code></pre>"},{"location":"api/00-estructura-proyecto/#8-health-health-indicators","title":"8. health/ - Health Indicators","text":"<pre><code>com.example.pib2.health/\n\u251c\u2500\u2500 DatabaseHealthIndicator.java // Indicador de salud de BD\n\u2514\u2500\u2500 ExternalServiceHealthIndicator.java // Indicador de servicios externos\n</code></pre>"},{"location":"api/00-estructura-proyecto/#9-metrics-metricas-personalizadas","title":"9. metrics/ - M\u00e9tricas Personalizadas","text":"<pre><code>com.example.pib2.metrics/\n\u2514\u2500\u2500 CustomMetrics.java           // M\u00e9tricas personalizadas\n</code></pre>"},{"location":"api/00-estructura-proyecto/#10-info-info-contributors","title":"10. info/ - Info Contributors","text":"<pre><code>com.example.pib2.info/\n\u2514\u2500\u2500 CustomInfoContributor.java   // Contribuidor de informaci\u00f3n\n</code></pre>"},{"location":"api/00-estructura-proyecto/#11-util-utilidades","title":"11. util/ - Utilidades","text":"<pre><code>com.example.pib2.util/\n\u251c\u2500\u2500 DateUtils.java               // Utilidades de fecha\n\u251c\u2500\u2500 StringUtils.java             // Utilidades de cadenas\n\u2514\u2500\u2500 ValidationUtils.java         // Utilidades de validaci\u00f3n\n</code></pre>"},{"location":"api/00-estructura-proyecto/#como-crear-la-estructura-de-paquetes","title":"\ud83d\udee0\ufe0f C\u00f3mo Crear la Estructura de Paquetes","text":""},{"location":"api/00-estructura-proyecto/#paso-1-crear-paquete-base","title":"Paso 1: Crear Paquete Base","text":"<ol> <li>En tu IDE (IntelliJ IDEA, Eclipse, VS Code):</li> <li>Navega a <code>src/main/java</code></li> <li>Clic derecho \u2192 New \u2192 Package</li> <li> <p>Nombre: <code>com.example.pib2</code></p> </li> <li> <p>Desde l\u00ednea de comandos:    <pre><code>mkdir -p src/main/java/com/example/pib2\n</code></pre></p> </li> </ol>"},{"location":"api/00-estructura-proyecto/#paso-2-crear-subpaquetes","title":"Paso 2: Crear Subpaquetes","text":"<pre><code># Crear todos los paquetes de una vez\nmkdir -p src/main/java/com/example/pib2/config\nmkdir -p src/main/java/com/example/pib2/controller\nmkdir -p src/main/java/com/example/pib2/dto\nmkdir -p src/main/java/com/example/pib2/entity\nmkdir -p src/main/java/com/example/pib2/exception\nmkdir -p src/main/java/com/example/pib2/health\nmkdir -p src/main/java/com/example/pib2/info\nmkdir -p src/main/java/com/example/pib2/metrics\nmkdir -p src/main/java/com/example/pib2/repository\nmkdir -p src/main/java/com/example/pib2/service\nmkdir -p src/main/java/com/example/pib2/service/impl\nmkdir -p src/main/java/com/example/pib2/util\n</code></pre>"},{"location":"api/00-estructura-proyecto/#paso-3-crear-estructura-de-tests","title":"Paso 3: Crear Estructura de Tests","text":"<pre><code># Crear estructura de tests\nmkdir -p src/test/java/com/example/pib2/controller\nmkdir -p src/test/java/com/example/pib2/service\nmkdir -p src/test/java/com/example/pib2/repository\nmkdir -p src/test/resources\n</code></pre>"},{"location":"api/00-estructura-proyecto/#paso-4-crear-archivos-de-recursos","title":"Paso 4: Crear Archivos de Recursos","text":"<pre><code># Crear archivos de configuraci\u00f3n\ntouch src/main/resources/application.properties\ntouch src/main/resources/application-dev.properties\ntouch src/main/resources/application-prod.properties\ntouch src/test/resources/application-test.properties\n</code></pre>"},{"location":"api/00-estructura-proyecto/#convenciones-de-nomenclatura","title":"\ud83d\udcdd Convenciones de Nomenclatura","text":""},{"location":"api/00-estructura-proyecto/#paquetes","title":"Paquetes","text":"<ul> <li>Min\u00fasculas: <code>com.example.pib2.controller</code></li> <li>Descriptivos: <code>service</code>, <code>repository</code>, <code>controller</code></li> <li>Singulares: <code>entity</code> (no <code>entities</code>)</li> </ul>"},{"location":"api/00-estructura-proyecto/#clases","title":"Clases","text":"<ul> <li>PascalCase: <code>UserController</code>, <code>ItemService</code></li> <li>Descriptivas: <code>UserRepository</code>, <code>LoanHistoryDTO</code></li> <li>Sufijos claros: <code>Controller</code>, <code>Service</code>, <code>Repository</code>, <code>DTO</code></li> </ul>"},{"location":"api/00-estructura-proyecto/#archivos","title":"Archivos","text":"<ul> <li>Configuraci\u00f3n: <code>application.properties</code></li> <li>Perfiles: <code>application-{profile}.properties</code></li> <li>Tests: <code>application-test.properties</code></li> </ul>"},{"location":"api/00-estructura-proyecto/#mejores-practicas","title":"\ud83c\udfa8 Mejores Pr\u00e1cticas","text":""},{"location":"api/00-estructura-proyecto/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<pre><code>// \u2705 Correcto: Cada clase tiene una responsabilidad\ncom.example.pib2.controller.UserController  // Solo maneja HTTP\ncom.example.pib2.service.UserService        // Solo l\u00f3gica de negocio\ncom.example.pib2.repository.UserRepository  // Solo acceso a datos\n\n// \u274c Incorrecto: Mezclar responsabilidades\ncom.example.pib2.UserEverything             // Hace todo\n</code></pre>"},{"location":"api/00-estructura-proyecto/#2-organizacion-por-funcionalidad-vs-capas","title":"2. Organizaci\u00f3n por Funcionalidad vs Capas","text":"<p>Por Capas (Recomendado para proyectos peque\u00f1os-medianos): <pre><code>com.example.pib2/\n\u251c\u2500\u2500 controller/\n\u251c\u2500\u2500 service/\n\u251c\u2500\u2500 repository/\n\u2514\u2500\u2500 entity/\n</code></pre></p> <p>Por Funcionalidad (Para proyectos grandes): <pre><code>com.example.pib2/\n\u251c\u2500\u2500 user/\n\u2502   \u251c\u2500\u2500 UserController.java\n\u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u251c\u2500\u2500 UserRepository.java\n\u2502   \u2514\u2500\u2500 User.java\n\u251c\u2500\u2500 item/\n\u2502   \u251c\u2500\u2500 ItemController.java\n\u2502   \u251c\u2500\u2500 ItemService.java\n\u2502   \u251c\u2500\u2500 ItemRepository.java\n\u2502   \u2514\u2500\u2500 Item.java\n\u2514\u2500\u2500 loan/\n    \u251c\u2500\u2500 LoanController.java\n    \u251c\u2500\u2500 LoanService.java\n    \u251c\u2500\u2500 LoanRepository.java\n    \u2514\u2500\u2500 Loan.java\n</code></pre></p>"},{"location":"api/00-estructura-proyecto/#3-configuracion-por-entornos","title":"3. Configuraci\u00f3n por Entornos","text":"<pre><code>src/main/resources/\n\u251c\u2500\u2500 application.properties           # Configuraci\u00f3n base\n\u251c\u2500\u2500 application-dev.properties       # Desarrollo\n\u251c\u2500\u2500 application-test.properties      # Testing\n\u2514\u2500\u2500 application-prod.properties      # Producci\u00f3n\n</code></pre>"},{"location":"api/00-estructura-proyecto/#4-estructura-de-tests","title":"4. Estructura de Tests","text":"<pre><code>src/test/java/com/example/pib2/\n\u251c\u2500\u2500 controller/\n\u2502   \u251c\u2500\u2500 UserControllerTest.java      # Tests de controlador\n\u2502   \u2514\u2500\u2500 ItemControllerTest.java\n\u251c\u2500\u2500 service/\n\u2502   \u251c\u2500\u2500 UserServiceTest.java         # Tests de servicio\n\u2502   \u2514\u2500\u2500 ItemServiceTest.java\n\u251c\u2500\u2500 repository/\n\u2502   \u251c\u2500\u2500 UserRepositoryTest.java      # Tests de repositorio\n\u2502   \u2514\u2500\u2500 ItemRepositoryTest.java\n\u2514\u2500\u2500 integration/\n    \u251c\u2500\u2500 UserIntegrationTest.java     # Tests de integraci\u00f3n\n    \u2514\u2500\u2500 ItemIntegrationTest.java\n</code></pre>"},{"location":"api/00-estructura-proyecto/#comandos-utiles-para-crear-estructura","title":"\ud83d\udd27 Comandos \u00datiles para Crear Estructura","text":""},{"location":"api/00-estructura-proyecto/#script-powershell-para-windows","title":"Script PowerShell para Windows","text":"<pre><code># crear-estructura.ps1\n$basePath = \"src/main/java/com/example/pib2\"\n$testPath = \"src/test/java/com/example/pib2\"\n$resourcesPath = \"src/main/resources\"\n$testResourcesPath = \"src/test/resources\"\n\n# Crear directorios principales\n$directories = @(\n    \"$basePath/config\",\n    \"$basePath/controller\",\n    \"$basePath/dto\",\n    \"$basePath/entity\",\n    \"$basePath/exception\",\n    \"$basePath/health\",\n    \"$basePath/info\",\n    \"$basePath/metrics\",\n    \"$basePath/repository\",\n    \"$basePath/service\",\n    \"$basePath/service/impl\",\n    \"$basePath/util\",\n    \"$testPath/controller\",\n    \"$testPath/service\",\n    \"$testPath/repository\",\n    \"$testPath/integration\",\n    $resourcesPath,\n    \"$resourcesPath/static\",\n    $testResourcesPath\n)\n\nforeach ($dir in $directories) {\n    New-Item -ItemType Directory -Path $dir -Force\n    Write-Host \"Creado: $dir\"\n}\n\n# Crear archivos de configuraci\u00f3n\n$configFiles = @(\n    \"$resourcesPath/application.properties\",\n    \"$resourcesPath/application-dev.properties\",\n    \"$resourcesPath/application-prod.properties\",\n    \"$testResourcesPath/application-test.properties\"\n)\n\nforeach ($file in $configFiles) {\n    New-Item -ItemType File -Path $file -Force\n    Write-Host \"Creado: $file\"\n}\n\nWrite-Host \"Estructura del proyecto creada exitosamente!\"\n</code></pre>"},{"location":"api/00-estructura-proyecto/#script-bash-para-linuxmac","title":"Script Bash para Linux/Mac","text":"<pre><code>#!/bin/bash\n# crear-estructura.sh\n\nBASE_PATH=\"src/main/java/com/example/pib2\"\nTEST_PATH=\"src/test/java/com/example/pib2\"\nRESOURCES_PATH=\"src/main/resources\"\nTEST_RESOURCES_PATH=\"src/test/resources\"\n\n# Crear directorios\ndirectories=(\n    \"$BASE_PATH/config\"\n    \"$BASE_PATH/controller\"\n    \"$BASE_PATH/dto\"\n    \"$BASE_PATH/entity\"\n    \"$BASE_PATH/exception\"\n    \"$BASE_PATH/health\"\n    \"$BASE_PATH/info\"\n    \"$BASE_PATH/metrics\"\n    \"$BASE_PATH/repository\"\n    \"$BASE_PATH/service\"\n    \"$BASE_PATH/service/impl\"\n    \"$BASE_PATH/util\"\n    \"$TEST_PATH/controller\"\n    \"$TEST_PATH/service\"\n    \"$TEST_PATH/repository\"\n    \"$TEST_PATH/integration\"\n    \"$RESOURCES_PATH\"\n    \"$RESOURCES_PATH/static\"\n    \"$TEST_RESOURCES_PATH\"\n)\n\nfor dir in \"${directories[@]}\"; do\n    mkdir -p \"$dir\"\n    echo \"Creado: $dir\"\ndone\n\n# Crear archivos de configuraci\u00f3n\nconfig_files=(\n    \"$RESOURCES_PATH/application.properties\"\n    \"$RESOURCES_PATH/application-dev.properties\"\n    \"$RESOURCES_PATH/application-prod.properties\"\n    \"$TEST_RESOURCES_PATH/application-test.properties\"\n)\n\nfor file in \"${config_files[@]}\"; do\n    touch \"$file\"\n    echo \"Creado: $file\"\ndone\n\necho \"Estructura del proyecto creada exitosamente!\"\n</code></pre>"},{"location":"api/00-estructura-proyecto/#errores-comunes-a-evitar","title":"\ud83d\udea8 Errores Comunes a Evitar","text":""},{"location":"api/00-estructura-proyecto/#1-paquetes-mal-nombrados","title":"1. Paquetes Mal Nombrados","text":"<pre><code>// \u274c Incorrecto\ncom.example.pib2.Controllers  // May\u00fascula\ncom.example.pib2.ENTITY       // Todo may\u00fasculas\ncom.example.pib2.dto_package  // Guiones bajos\n\n// \u2705 Correcto\ncom.example.pib2.controller\ncom.example.pib2.entity\ncom.example.pib2.dto\n</code></pre>"},{"location":"api/00-estructura-proyecto/#2-clases-en-paquetes-incorrectos","title":"2. Clases en Paquetes Incorrectos","text":"<pre><code>// \u274c Incorrecto\ncom.example.pib2.controller.UserService     // Servicio en controller\ncom.example.pib2.entity.UserController      // Controlador en entity\n\n// \u2705 Correcto\ncom.example.pib2.service.UserService\ncom.example.pib2.controller.UserController\n</code></pre>"},{"location":"api/00-estructura-proyecto/#3-dependencias-circulares","title":"3. Dependencias Circulares","text":"<pre><code>// \u274c Incorrecto: Controller depende de Repository directamente\n@RestController\npublic class UserController {\n    @Autowired\n    private UserRepository userRepository;  // Saltar la capa de servicio\n}\n\n// \u2705 Correcto: Controller depende de Service\n@RestController\npublic class UserController {\n    @Autowired\n    private UserService userService;        // Respetar las capas\n}\n</code></pre>"},{"location":"api/00-estructura-proyecto/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>Estructura de Proyecto: Organizaci\u00f3n est\u00e1ndar de Spring Boot</li> <li>Paquetes Java: Convenciones de nomenclatura y organizaci\u00f3n</li> <li>Separaci\u00f3n de Capas: Controller, Service, Repository, Entity</li> <li>Configuraci\u00f3n por Entornos: Perfiles de Spring Boot</li> <li>Mejores Pr\u00e1cticas: Organizaci\u00f3n limpia y mantenible</li> <li>Herramientas: Scripts para automatizar creaci\u00f3n de estructura</li> </ul>"},{"location":"api/00-estructura-proyecto/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Configurar el proyecto Spring Boot inicial - Configurar Maven y dependencias - Crear la clase principal de la aplicaci\u00f3n - Configurar el servidor embebido - Establecer la configuraci\u00f3n b\u00e1sica</p> <p>Volver al \u00cdndice | Siguiente: Configuraci\u00f3n Inicial \u2192</p>"},{"location":"api/01-configuracion-inicial/","title":"1. Configuraci\u00f3n Inicial del Proyecto Spring Boot","text":""},{"location":"api/01-configuracion-inicial/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Crear un proyecto Spring Boot desde cero - Configurar las dependencias necesarias - Entender la estructura b\u00e1sica del proyecto - Configurar el archivo principal de la aplicaci\u00f3n</p>"},{"location":"api/01-configuracion-inicial/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Java 21 instalado</li> <li>Maven 3.6+ instalado</li> <li>IDE de tu preferencia (IntelliJ IDEA, Eclipse, VS Code)</li> <li>Conocimientos b\u00e1sicos de Java</li> </ul>"},{"location":"api/01-configuracion-inicial/#creacion-del-proyecto","title":"\ud83d\ude80 Creaci\u00f3n del Proyecto","text":""},{"location":"api/01-configuracion-inicial/#opcion-1-spring-initializr-recomendado","title":"Opci\u00f3n 1: Spring Initializr (Recomendado)","text":"<ol> <li>Ve a Spring Initializr</li> <li>Configura los siguientes par\u00e1metros:</li> <li>Project: Maven</li> <li>Language: Java</li> <li>Spring Boot: 3.5.4</li> <li>Group: <code>com.example</code></li> <li>Artifact: <code>pib2</code></li> <li>Name: <code>pib2</code></li> <li>Description: <code>Demo project for Spring Boot</code></li> <li>Package name: <code>com.example.pib2</code></li> <li>Packaging: Jar</li> <li> <p>Java: 21</p> </li> <li> <p>Agrega las siguientes dependencias:</p> </li> <li>Spring Web</li> <li>Spring Data JPA</li> <li>PostgreSQL Driver</li> <li>Spring Boot DevTools</li> <li>Lombok</li> <li>Validation</li> <li>Spring Boot Actuator</li> <li> <p>H2 Database (para testing)</p> </li> <li> <p>Haz clic en \"Generate\" y descarga el proyecto</p> </li> <li>Extrae el archivo ZIP en tu directorio de trabajo</li> </ol>"},{"location":"api/01-configuracion-inicial/#opcion-2-crear-manualmente","title":"Opci\u00f3n 2: Crear manualmente","text":"<p>Si prefieres crear el proyecto manualmente, sigue estos pasos:</p> <ol> <li>Crea la estructura de directorios: <pre><code>pi_backend2/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 pib2/\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 README.md\n</code></pre></li> </ol>"},{"location":"api/01-configuracion-inicial/#configuracion-del-archivo-pomxml","title":"\ud83d\udcc4 Configuraci\u00f3n del archivo pom.xml","text":"<p>El archivo <code>pom.xml</code> es el coraz\u00f3n de cualquier proyecto Maven. Define las dependencias, plugins y configuraciones necesarias.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n         https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;!-- Configuraci\u00f3n del proyecto padre --&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.4&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n\n    &lt;!-- Informaci\u00f3n del proyecto --&gt;\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;pib2&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;pib2&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n\n    &lt;!-- Propiedades del proyecto --&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;!-- Dependencias --&gt;\n    &lt;dependencies&gt;\n        &lt;!-- Spring Boot Starter Web: Para crear APIs REST --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot Starter Data JPA: Para persistencia de datos --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot Starter Validation: Para validaci\u00f3n de datos --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- PostgreSQL Driver: Para conectar con PostgreSQL --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- H2 Database: Base de datos en memoria para testing --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot DevTools: Herramientas de desarrollo --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Lombok: Para reducir c\u00f3digo boilerplate --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot Actuator: Para monitoreo y m\u00e9tricas --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot Starter Test: Para testing --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;!-- Plugins de construcci\u00f3n --&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Plugin del compilador Maven --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;annotationProcessorPaths&gt;\n                        &lt;path&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/path&gt;\n                    &lt;/annotationProcessorPaths&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n\n            &lt;!-- Plugin de Spring Boot Maven --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"api/01-configuracion-inicial/#explicacion-de-las-dependencias","title":"\ud83d\udd0d Explicaci\u00f3n de las Dependencias","text":""},{"location":"api/01-configuracion-inicial/#dependencias-core-de-spring-boot","title":"Dependencias Core de Spring Boot","text":"<ol> <li>spring-boot-starter-web</li> <li>Incluye Spring MVC, Tomcat embebido, y Jackson</li> <li>Permite crear APIs REST</li> <li> <p>Maneja peticiones HTTP</p> </li> <li> <p>spring-boot-starter-data-jpa</p> </li> <li>Incluye Hibernate, Spring Data JPA</li> <li>Facilita el trabajo con bases de datos</li> <li> <p>Proporciona repositorios autom\u00e1ticos</p> </li> <li> <p>spring-boot-starter-validation</p> </li> <li>Incluye Bean Validation (JSR-303)</li> <li>Permite validar datos de entrada</li> <li>Integraci\u00f3n con Spring MVC</li> </ol>"},{"location":"api/01-configuracion-inicial/#dependencias-de-base-de-datos","title":"Dependencias de Base de Datos","text":"<ol> <li>postgresql</li> <li>Driver JDBC para PostgreSQL</li> <li>Permite conectar con bases de datos PostgreSQL</li> <li> <p>Scope <code>runtime</code> porque solo se necesita en ejecuci\u00f3n</p> </li> <li> <p>h2</p> </li> <li>Base de datos en memoria</li> <li>\u00datil para testing y desarrollo</li> <li>Scope <code>runtime</code></li> </ol>"},{"location":"api/01-configuracion-inicial/#dependencias-de-desarrollo","title":"Dependencias de Desarrollo","text":"<ol> <li>spring-boot-devtools</li> <li>Reinicio autom\u00e1tico de la aplicaci\u00f3n</li> <li>LiveReload para el navegador</li> <li> <p>Configuraciones adicionales para desarrollo</p> </li> <li> <p>lombok</p> </li> <li>Reduce c\u00f3digo boilerplate</li> <li>Genera autom\u00e1ticamente getters, setters, constructores</li> <li>Mejora la legibilidad del c\u00f3digo</li> </ol>"},{"location":"api/01-configuracion-inicial/#dependencias-de-monitoreo-y-testing","title":"Dependencias de Monitoreo y Testing","text":"<ol> <li>spring-boot-starter-actuator</li> <li>Endpoints de monitoreo (/health, /info, /metrics)</li> <li>Informaci\u00f3n sobre el estado de la aplicaci\u00f3n</li> <li> <p>\u00datil para producci\u00f3n</p> </li> <li> <p>spring-boot-starter-test</p> </li> <li>Incluye JUnit, Mockito, AssertJ</li> <li>Framework completo para testing</li> <li>Scope <code>test</code></li> </ol>"},{"location":"api/01-configuracion-inicial/#clase-principal-de-la-aplicacion","title":"\ud83d\udcf1 Clase Principal de la Aplicaci\u00f3n","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/Pib2Application.java</code>:</p> <pre><code>package com.example.pib2;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Pib2Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Pib2Application.class, args);\n    }\n}\n</code></pre>"},{"location":"api/01-configuracion-inicial/#explicacion-de-la-clase-principal","title":"\ud83d\udd0d Explicaci\u00f3n de la Clase Principal","text":"<ol> <li>@SpringBootApplication</li> <li> <p>Anotaci\u00f3n compuesta que incluye:</p> <ul> <li><code>@Configuration</code>: Marca la clase como fuente de configuraci\u00f3n</li> <li><code>@EnableAutoConfiguration</code>: Habilita la configuraci\u00f3n autom\u00e1tica</li> <li><code>@ComponentScan</code>: Escanea componentes en el paquete actual y subpaquetes</li> </ul> </li> <li> <p>SpringApplication.run()</p> </li> <li>Inicia la aplicaci\u00f3n Spring Boot</li> <li>Configura el contexto de Spring</li> <li>Inicia el servidor embebido (Tomcat por defecto)</li> </ol>"},{"location":"api/01-configuracion-inicial/#estructura-final-del-proyecto","title":"\ud83c\udfd7\ufe0f Estructura Final del Proyecto","text":"<p>Despu\u00e9s de la configuraci\u00f3n inicial, tu proyecto deber\u00eda tener esta estructura:</p> <pre><code>pi_backend2/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 pib2/\n\u2502   \u2502   \u2502               \u2514\u2500\u2500 Pib2Application.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u2514\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 example/\n\u2502                   \u2514\u2500\u2500 pib2/\n\u2502                       \u2514\u2500\u2500 Pib2ApplicationTests.java\n\u251c\u2500\u2500 target/                    # Generado por Maven\n\u251c\u2500\u2500 .mvn/                     # Wrapper de Maven\n\u251c\u2500\u2500 mvnw                      # Script de Maven (Unix)\n\u251c\u2500\u2500 mvnw.cmd                  # Script de Maven (Windows)\n\u251c\u2500\u2500 pom.xml                   # Configuraci\u00f3n de Maven\n\u2514\u2500\u2500 README.md                 # Documentaci\u00f3n del proyecto\n</code></pre>"},{"location":"api/01-configuracion-inicial/#verificacion-de-la-configuracion","title":"\u2705 Verificaci\u00f3n de la Configuraci\u00f3n","text":""},{"location":"api/01-configuracion-inicial/#1-compilar-el-proyecto","title":"1. Compilar el proyecto","text":"<p>Ejecuta el siguiente comando en la ra\u00edz del proyecto:</p> <pre><code>./mvnw clean compile\n</code></pre> <p>En Windows: <pre><code>.\\mvnw.cmd clean compile\n</code></pre></p>"},{"location":"api/01-configuracion-inicial/#2-ejecutar-la-aplicacion","title":"2. Ejecutar la aplicaci\u00f3n","text":"<pre><code>./mvnw spring-boot:run\n</code></pre> <p>En Windows: <pre><code>.\\mvnw.cmd spring-boot:run\n</code></pre></p>"},{"location":"api/01-configuracion-inicial/#3-verificar-que-la-aplicacion-este-funcionando","title":"3. Verificar que la aplicaci\u00f3n est\u00e9 funcionando","text":"<p>Si todo est\u00e1 configurado correctamente, deber\u00edas ver en la consola:</p> <pre><code>  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.5.4)\n\n2024-08-30 00:00:00.000  INFO 12345 --- [           main] com.example.pib2.Pib2Application        : Starting Pib2Application\n2024-08-30 00:00:00.000  INFO 12345 --- [           main] com.example.pib2.Pib2Application        : Started Pib2Application in 2.345 seconds\n</code></pre> <p>La aplicaci\u00f3n estar\u00e1 disponible en: <code>http://localhost:8080</code></p>"},{"location":"api/01-configuracion-inicial/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/01-configuracion-inicial/#error-java-version-not-supported","title":"Error: \"Java version not supported\"","text":"<p>Soluci\u00f3n: Verifica que tienes Java 21 instalado: <pre><code>java -version\n</code></pre></p>"},{"location":"api/01-configuracion-inicial/#error-maven-not-found","title":"Error: \"Maven not found\"","text":"<p>Soluci\u00f3n: Usa el wrapper de Maven incluido: <pre><code>./mvnw clean compile\n</code></pre></p>"},{"location":"api/01-configuracion-inicial/#error-port-8080-already-in-use","title":"Error: \"Port 8080 already in use\"","text":"<p>Soluci\u00f3n: Cambia el puerto en <code>application.properties</code>: <pre><code>server.port=8081\n</code></pre></p>"},{"location":"api/01-configuracion-inicial/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>Spring Boot: Framework que simplifica el desarrollo de aplicaciones Spring</li> <li>Maven: Herramienta de gesti\u00f3n de dependencias y construcci\u00f3n</li> <li>Starter Dependencies: Dependencias preconfiguradas que incluyen todo lo necesario</li> <li>Auto-configuration: Configuraci\u00f3n autom\u00e1tica basada en las dependencias presentes</li> <li>Embedded Server: Servidor web incluido en la aplicaci\u00f3n (no necesitas instalar Tomcat)</li> </ul>"},{"location":"api/01-configuracion-inicial/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Configurar la conexi\u00f3n a la base de datos - Configurar JPA/Hibernate - Manejar variables de entorno - Configurar perfiles de Spring</p> <p>\u2190 Volver al \u00cdndice | Siguiente: Configuraci\u00f3n de Base de Datos \u2192</p>"},{"location":"api/02-configuracion-database/","title":"2. Configuraci\u00f3n de Base de Datos y JPA","text":""},{"location":"api/02-configuracion-database/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Configurar la conexi\u00f3n a PostgreSQL - Entender las propiedades de JPA/Hibernate - Configurar variables de entorno para seguridad - Configurar Actuator para monitoreo - Manejar diferentes perfiles de configuraci\u00f3n</p>"},{"location":"api/02-configuracion-database/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Proyecto Spring Boot configurado (secci\u00f3n anterior)</li> <li>PostgreSQL instalado o acceso a una base de datos en la nube (ej: Supabase)</li> <li>Conocimientos b\u00e1sicos de SQL</li> </ul>"},{"location":"api/02-configuracion-database/#configuracion-de-base-de-datos","title":"\ud83d\uddc4\ufe0f Configuraci\u00f3n de Base de Datos","text":""},{"location":"api/02-configuracion-database/#archivo-applicationproperties","title":"Archivo application.properties","text":"<p>El archivo <code>src/main/resources/application.properties</code> es donde configuramos todas las propiedades de nuestra aplicaci\u00f3n.</p> <pre><code># Nombre de la aplicaci\u00f3n\nspring.application.name=pib2\n\n# Configuraci\u00f3n de la base de datos PostgreSQL (Supabase)\nspring.datasource.url=${DB_URL}\nspring.datasource.username=${DB_USERNAME}\nspring.datasource.password=${DB_PASSWORD}\nspring.datasource.driver-class-name=org.postgresql.Driver\n\n# Configuraci\u00f3n de JPA/Hibernate para producci\u00f3n\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\nspring.jpa.defer-datasource-initialization=true\n\n# Habilitar endpoints de Actuator\nmanagement.endpoints.web.exposure.include=health,info\nmanagement.endpoint.health.show-details=always\nmanagement.info.env.enabled=true\n\n# Informaci\u00f3n personalizada para /actuator/info\ninfo.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API built with Spring Boot\ninfo.app.author.name=John Doe\ninfo.app.author.email=john.doe@example.com\ninfo.app.author.organization=Example Corp\n</code></pre>"},{"location":"api/02-configuracion-database/#explicacion-detallada-de-las-configuraciones","title":"\ud83d\udd0d Explicaci\u00f3n Detallada de las Configuraciones","text":""},{"location":"api/02-configuracion-database/#1-configuracion-de-datasource","title":"1. Configuraci\u00f3n de DataSource","text":"<pre><code># URL de conexi\u00f3n a la base de datos\nspring.datasource.url=${DB_URL}\n# Usuario de la base de datos\nspring.datasource.username=${DB_USERNAME}\n# Contrase\u00f1a de la base de datos\nspring.datasource.password=${DB_PASSWORD}\n# Driver JDBC para PostgreSQL\nspring.datasource.driver-class-name=org.postgresql.Driver\n</code></pre> <p>\u00bfPor qu\u00e9 usar variables de entorno? - Seguridad: Las credenciales no se almacenan en el c\u00f3digo - Flexibilidad: Diferentes configuraciones para diferentes entornos - Mejores pr\u00e1cticas: Siguiendo el patr\u00f3n 12-factor app</p>"},{"location":"api/02-configuracion-database/#2-configuracion-de-jpahibernate","title":"2. Configuraci\u00f3n de JPA/Hibernate","text":"<p><pre><code># Dialecto espec\u00edfico para PostgreSQL\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\n</code></pre> - Dialecto: Le dice a Hibernate c\u00f3mo generar SQL espec\u00edfico para PostgreSQL - Optimizaci\u00f3n: Usa caracter\u00edsticas espec\u00edficas de PostgreSQL</p> <pre><code># Estrategia de creaci\u00f3n/actualizaci\u00f3n de esquema\nspring.jpa.hibernate.ddl-auto=update\n</code></pre> <p>Opciones disponibles: - <code>none</code>: No hace nada (recomendado para producci\u00f3n) - <code>validate</code>: Solo valida el esquema - <code>update</code>: Actualiza el esquema si es necesario - <code>create</code>: Crea el esquema, destruyendo datos previos - <code>create-drop</code>: Crea al inicio, destruye al final</p> <p><pre><code># Mostrar consultas SQL en la consola\nspring.jpa.show-sql=true\n# Formatear las consultas SQL para mejor legibilidad\nspring.jpa.properties.hibernate.format_sql=true\n</code></pre> - Desarrollo: \u00datil para debugging y aprendizaje - Producci\u00f3n: Desactivar para mejor rendimiento</p> <p><pre><code># Diferir la inicializaci\u00f3n del DataSource\nspring.jpa.defer-datasource-initialization=true\n</code></pre> - Prop\u00f3sito: Permite que Hibernate cree las tablas antes de ejecutar scripts SQL - \u00datil: Cuando tienes archivos <code>data.sql</code> para datos iniciales</p>"},{"location":"api/02-configuracion-database/#3-configuracion-de-actuator","title":"3. Configuraci\u00f3n de Actuator","text":"<pre><code># Exponer endpoints espec\u00edficos\nmanagement.endpoints.web.exposure.include=health,info\n# Mostrar detalles completos del health check\nmanagement.endpoint.health.show-details=always\n# Habilitar informaci\u00f3n de variables de entorno\nmanagement.info.env.enabled=true\n</code></pre> <p>Endpoints disponibles: - <code>/actuator/health</code>: Estado de la aplicaci\u00f3n y dependencias - <code>/actuator/info</code>: Informaci\u00f3n sobre la aplicaci\u00f3n - <code>/actuator/metrics</code>: M\u00e9tricas de la aplicaci\u00f3n - <code>/actuator/env</code>: Variables de entorno</p>"},{"location":"api/02-configuracion-database/#4-informacion-personalizada","title":"4. Informaci\u00f3n Personalizada","text":"<pre><code>info.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API built with Spring Boot\ninfo.app.author.name=John Doe\ninfo.app.author.email=john.doe@example.com\ninfo.app.author.organization=Example Corp\n</code></pre> <p>Esta informaci\u00f3n aparecer\u00e1 en el endpoint <code>/actuator/info</code>.</p>"},{"location":"api/02-configuracion-database/#variables-de-entorno","title":"\ud83c\udf0d Variables de Entorno","text":""},{"location":"api/02-configuracion-database/#configuracion-local-desarrollo","title":"Configuraci\u00f3n Local (Desarrollo)","text":"<p>Crea un archivo <code>.env</code> en la ra\u00edz del proyecto (NO lo subas a Git):</p> <pre><code># .env\nDB_URL=jdbc:postgresql://localhost:5432/inventory_db\nDB_USERNAME=postgres\nDB_PASSWORD=tu_password_aqui\n</code></pre>"},{"location":"api/02-configuracion-database/#configuracion-para-supabase","title":"Configuraci\u00f3n para Supabase","text":"<p>Si usas Supabase, tus variables ser\u00edan:</p> <pre><code># .env\nDB_URL=jdbc:postgresql://db.supabase.co:5432/postgres?sslmode=require\nDB_USERNAME=postgres\nDB_PASSWORD=tu_password_de_supabase\n</code></pre>"},{"location":"api/02-configuracion-database/#configuracion-en-el-sistema","title":"Configuraci\u00f3n en el Sistema","text":"<p>Windows (PowerShell): <pre><code>$env:DB_URL=\"jdbc:postgresql://localhost:5432/inventory_db\"\n$env:DB_USERNAME=\"postgres\"\n$env:DB_PASSWORD=\"tu_password\"\n</code></pre></p> <p>Linux/Mac: <pre><code>export DB_URL=\"jdbc:postgresql://localhost:5432/inventory_db\"\nexport DB_USERNAME=\"postgres\"\nexport DB_PASSWORD=\"tu_password\"\n</code></pre></p>"},{"location":"api/02-configuracion-database/#configuracion-en-ide","title":"Configuraci\u00f3n en IDE","text":"<p>IntelliJ IDEA: 1. Ve a Run \u2192 Edit Configurations 2. En Environment Variables, agrega:    - <code>DB_URL=jdbc:postgresql://localhost:5432/inventory_db</code>    - <code>DB_USERNAME=postgres</code>    - <code>DB_PASSWORD=tu_password</code></p> <p>VS Code: Crea un archivo <code>.vscode/launch.json</code>:</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"java\",\n            \"name\": \"Launch Pib2Application\",\n            \"request\": \"launch\",\n            \"mainClass\": \"com.example.pib2.Pib2Application\",\n            \"env\": {\n                \"DB_URL\": \"jdbc:postgresql://localhost:5432/inventory_db\",\n                \"DB_USERNAME\": \"postgres\",\n                \"DB_PASSWORD\": \"tu_password\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"api/02-configuracion-database/#configuracion-de-postgresql-local","title":"\ud83c\udfd7\ufe0f Configuraci\u00f3n de PostgreSQL Local","text":""},{"location":"api/02-configuracion-database/#instalacion-de-postgresql","title":"Instalaci\u00f3n de PostgreSQL","text":"<p>Windows: 1. Descarga PostgreSQL desde postgresql.org 2. Ejecuta el instalador 3. Configura la contrase\u00f1a para el usuario <code>postgres</code> 4. Anota el puerto (por defecto 5432)</p> <p>Mac (con Homebrew): <pre><code>brew install postgresql\nbrew services start postgresql\n</code></pre></p> <p>Linux (Ubuntu/Debian): <pre><code>sudo apt update\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\n</code></pre></p>"},{"location":"api/02-configuracion-database/#creacion-de-la-base-de-datos","title":"Creaci\u00f3n de la Base de Datos","text":"<pre><code>-- Conectar como usuario postgres\npsql -U postgres\n\n-- Crear la base de datos\nCREATE DATABASE inventory_db;\n\n-- Crear un usuario espec\u00edfico (opcional)\nCREATE USER inventory_user WITH PASSWORD 'tu_password';\n\n-- Otorgar permisos\nGRANT ALL PRIVILEGES ON DATABASE inventory_db TO inventory_user;\n\n-- Salir\n\\q\n</code></pre>"},{"location":"api/02-configuracion-database/#perfiles-de-spring","title":"\ud83d\udcca Perfiles de Spring","text":""},{"location":"api/02-configuracion-database/#application-devproperties-desarrollo","title":"application-dev.properties (Desarrollo)","text":"<pre><code># Configuraci\u00f3n para desarrollo\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\nlogging.level.org.hibernate.SQL=DEBUG\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n\n# Base de datos H2 en memoria para desarrollo r\u00e1pido\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\nspring.h2.console.enabled=true\n</code></pre>"},{"location":"api/02-configuracion-database/#application-prodproperties-produccion","title":"application-prod.properties (Producci\u00f3n)","text":"<pre><code># Configuraci\u00f3n para producci\u00f3n\nspring.jpa.show-sql=false\nspring.jpa.hibernate.ddl-auto=validate\nlogging.level.org.hibernate.SQL=WARN\n\n# Configuraci\u00f3n de pool de conexiones\nspring.datasource.hikari.maximum-pool-size=20\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.connection-timeout=20000\n</code></pre>"},{"location":"api/02-configuracion-database/#activar-perfiles","title":"Activar Perfiles","text":"<p>En application.properties: <pre><code>spring.profiles.active=dev\n</code></pre></p> <p>Como variable de entorno: <pre><code>SPRING_PROFILES_ACTIVE=prod\n</code></pre></p> <p>Al ejecutar la aplicaci\u00f3n: <pre><code>java -jar app.jar --spring.profiles.active=prod\n</code></pre></p>"},{"location":"api/02-configuracion-database/#verificacion-de-la-configuracion","title":"\u2705 Verificaci\u00f3n de la Configuraci\u00f3n","text":""},{"location":"api/02-configuracion-database/#1-verificar-conexion-a-la-base-de-datos","title":"1. Verificar Conexi\u00f3n a la Base de Datos","text":"<p>Ejecuta la aplicaci\u00f3n:</p> <pre><code>./mvnw spring-boot:run\n</code></pre> <p>Busca en los logs:</p> <pre><code>2024-08-30 10:00:00.000  INFO 12345 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...\n2024-08-30 10:00:00.000  INFO 12345 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.\n</code></pre>"},{"location":"api/02-configuracion-database/#2-verificar-endpoints-de-actuator","title":"2. Verificar Endpoints de Actuator","text":"<p>Health Check: <pre><code>curl http://localhost:8080/actuator/health\n</code></pre></p> <p>Respuesta esperada: <pre><code>{\n  \"status\": \"UP\",\n  \"components\": {\n    \"db\": {\n      \"status\": \"UP\",\n      \"details\": {\n        \"database\": \"PostgreSQL\",\n        \"validationQuery\": \"isValid()\"\n      }\n    },\n    \"diskSpace\": {\n      \"status\": \"UP\"\n    }\n  }\n}\n</code></pre></p> <p>Informaci\u00f3n de la App: <pre><code>curl http://localhost:8080/actuator/info\n</code></pre></p> <p>Respuesta esperada: <pre><code>{\n  \"app\": {\n    \"name\": \"My REST API\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A sample REST API built with Spring Boot\",\n    \"author\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"organization\": \"Example Corp\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/02-configuracion-database/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/02-configuracion-database/#error-failed-to-configure-a-datasource","title":"Error: \"Failed to configure a DataSource\"","text":"<p>Causa: Variables de entorno no configuradas</p> <p>Soluci\u00f3n: 1. Verifica que las variables est\u00e9n configuradas:    <pre><code>echo $DB_URL\necho $DB_USERNAME\necho $DB_PASSWORD\n</code></pre></p> <ol> <li>O configura valores por defecto:    <pre><code>spring.datasource.url=${DB_URL:jdbc:h2:mem:testdb}\nspring.datasource.username=${DB_USERNAME:sa}\nspring.datasource.password=${DB_PASSWORD:}\n</code></pre></li> </ol>"},{"location":"api/02-configuracion-database/#error-connection-refused","title":"Error: \"Connection refused\"","text":"<p>Causa: PostgreSQL no est\u00e1 ejecut\u00e1ndose</p> <p>Soluci\u00f3n: <pre><code># Windows\nnet start postgresql-x64-13\n\n# Linux/Mac\nsudo systemctl start postgresql\n# o\nbrew services start postgresql\n</code></pre></p>"},{"location":"api/02-configuracion-database/#error-authentication-failed","title":"Error: \"Authentication failed\"","text":"<p>Causa: Credenciales incorrectas</p> <p>Soluci\u00f3n: 1. Verifica las credenciales en PostgreSQL 2. Resetea la contrase\u00f1a si es necesario:    <pre><code>ALTER USER postgres PASSWORD 'nueva_password';\n</code></pre></p>"},{"location":"api/02-configuracion-database/#error-database-does-not-exist","title":"Error: \"Database does not exist\"","text":"<p>Causa: La base de datos no fue creada</p> <p>Soluci\u00f3n: <pre><code>CREATE DATABASE inventory_db;\n</code></pre></p>"},{"location":"api/02-configuracion-database/#mejores-practicas-de-seguridad","title":"\ud83d\udd12 Mejores Pr\u00e1cticas de Seguridad","text":""},{"location":"api/02-configuracion-database/#1-nunca-hardcodear-credenciales","title":"1. Nunca hardcodear credenciales","text":"<p>\u274c Malo: <pre><code>spring.datasource.password=mi_password_secreto\n</code></pre></p> <p>\u2705 Bueno: <pre><code>spring.datasource.password=${DB_PASSWORD}\n</code></pre></p>"},{"location":"api/02-configuracion-database/#2-usar-gitignore","title":"2. Usar .gitignore","text":"<p>Agrega al <code>.gitignore</code>: <pre><code>.env\n*.env\napplication-local.properties\n</code></pre></p>"},{"location":"api/02-configuracion-database/#3-configuracion-por-entorno","title":"3. Configuraci\u00f3n por entorno","text":"<ul> <li>Desarrollo: H2 en memoria o PostgreSQL local</li> <li>Testing: H2 en memoria</li> <li>Producci\u00f3n: PostgreSQL con SSL</li> </ul>"},{"location":"api/02-configuracion-database/#4-pool-de-conexiones","title":"4. Pool de conexiones","text":"<pre><code># Configuraci\u00f3n del pool de conexiones\nspring.datasource.hikari.maximum-pool-size=10\nspring.datasource.hikari.minimum-idle=2\nspring.datasource.hikari.connection-timeout=20000\nspring.datasource.hikari.idle-timeout=300000\nspring.datasource.hikari.max-lifetime=1200000\n</code></pre>"},{"location":"api/02-configuracion-database/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>DataSource: Configuraci\u00f3n de conexi\u00f3n a la base de datos</li> <li>JPA/Hibernate: ORM para mapeo objeto-relacional</li> <li>Variables de entorno: Configuraci\u00f3n externa segura</li> <li>Perfiles de Spring: Configuraciones espec\u00edficas por entorno</li> <li>Actuator: Monitoreo y m\u00e9tricas de la aplicaci\u00f3n</li> <li>Pool de conexiones: Gesti\u00f3n eficiente de conexiones a BD</li> </ul>"},{"location":"api/02-configuracion-database/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Crear entidades JPA - Definir relaciones entre entidades - Usar anotaciones de validaci\u00f3n - Configurar auditor\u00eda autom\u00e1tica</p> <p>\u2190 Anterior: Configuraci\u00f3n Inicial | Volver al \u00cdndice | Siguiente: Entidades y Modelos \u2192</p>"},{"location":"api/03-entidades-modelos/","title":"3. Entidades y Modelos de Datos","text":""},{"location":"api/03-entidades-modelos/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Dise\u00f1ar el modelo de datos del sistema de inventario - Crear entidades JPA con anotaciones - Definir relaciones entre entidades - Usar Lombok para reducir c\u00f3digo boilerplate - Manejar referencias circulares con Jackson - Implementar buenas pr\u00e1cticas en el dise\u00f1o de entidades</p>"},{"location":"api/03-entidades-modelos/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Proyecto Spring Boot configurado</li> <li>Base de datos PostgreSQL configurada</li> <li>Conocimientos b\u00e1sicos de JPA/Hibernate</li> <li>Comprensi\u00f3n de relaciones de base de datos</li> </ul>"},{"location":"api/03-entidades-modelos/#diseno-del-modelo-de-datos","title":"\ud83c\udfd7\ufe0f Dise\u00f1o del Modelo de Datos","text":""},{"location":"api/03-entidades-modelos/#diagrama-de-entidades","title":"Diagrama de Entidades","text":"<p>Nuestro sistema de inventario tendr\u00e1 las siguientes entidades:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    User     \u2502       \u2502    Item     \u2502       \u2502    Loan     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id (PK)     \u2502       \u2502 id (PK)     \u2502       \u2502 id (PK)     \u2502\n\u2502 username    \u2502       \u2502 name        \u2502       \u2502 item_id(FK) \u2502\n\u2502 email       \u2502       \u2502 description \u2502       \u2502 user_id(FK) \u2502\n\u2502 password    \u2502       \u2502 quantity    \u2502       \u2502 loanDate    \u2502\n\u2502 role        \u2502       \u2502             \u2502       \u2502 returnDate  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 returned    \u2502\n       \u2502                       \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                       \u2502                     \u2502\n       \u2502                       \u2502                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 LoanHistory \u2502\n                    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n                    \u2502 id (PK)     \u2502\n                    \u2502 loan_id(FK) \u2502\n                    \u2502 actionDate  \u2502\n                    \u2502 action      \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api/03-entidades-modelos/#relaciones","title":"Relaciones","text":"<ul> <li>User \u2194 Loan: Un usuario puede tener m\u00faltiples pr\u00e9stamos (1:N)</li> <li>Item \u2194 Loan: Un item puede estar en m\u00faltiples pr\u00e9stamos (1:N)</li> <li>Loan \u2194 LoanHistory: Un pr\u00e9stamo puede tener m\u00faltiples registros de historial (1:N)</li> </ul>"},{"location":"api/03-entidades-modelos/#entidad-user-usuario","title":"\ud83d\udc64 Entidad User (Usuario)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/entities/User.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String username;\n    private String email;\n    private String password;\n    private String role;\n\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, orphanRemoval = true)\n    @JsonManagedReference\n    private List&lt;Loan&gt; loans;\n}\n</code></pre>"},{"location":"api/03-entidades-modelos/#explicacion-de-la-entidad-user","title":"\ud83d\udd0d Explicaci\u00f3n de la Entidad User","text":""},{"location":"api/03-entidades-modelos/#anotaciones-de-clase","title":"Anotaciones de Clase","text":"<p><pre><code>@Entity\n</code></pre> - Prop\u00f3sito: Marca la clase como una entidad JPA - Resultado: Hibernate crear\u00e1 una tabla en la base de datos</p> <p><pre><code>@Data\n</code></pre> - Prop\u00f3sito: Anotaci\u00f3n de Lombok que genera autom\u00e1ticamente:   - Getters y setters para todos los campos   - M\u00e9todo <code>toString()</code>   - M\u00e9todos <code>equals()</code> y <code>hashCode()</code>   - Constructor sin argumentos</p> <p><pre><code>@Table(name = \"users\")\n</code></pre> - Prop\u00f3sito: Especifica el nombre de la tabla en la base de datos - Raz\u00f3n: \"user\" es una palabra reservada en PostgreSQL</p>"},{"location":"api/03-entidades-modelos/#anotaciones-de-campo","title":"Anotaciones de Campo","text":"<p><pre><code>@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Long id;\n</code></pre> - @Id: Marca el campo como clave primaria - @GeneratedValue: Especifica c\u00f3mo se genera el valor - IDENTITY: Usa auto-incremento de la base de datos</p> <p><pre><code>@OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, orphanRemoval = true)\n@JsonManagedReference\nprivate List&lt;Loan&gt; loans;\n</code></pre> - @OneToMany: Relaci\u00f3n uno a muchos - mappedBy: Indica que la relaci\u00f3n es mapeada por el campo \"user\" en la entidad Loan - cascade = CascadeType.ALL: Las operaciones se propagan a las entidades relacionadas - orphanRemoval = true: Elimina autom\u00e1ticamente los pr\u00e9stamos hu\u00e9rfanos - @JsonManagedReference: Evita referencias circulares en JSON</p>"},{"location":"api/03-entidades-modelos/#entidad-item-articulo","title":"\ud83d\udce6 Entidad Item (Art\u00edculo)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/entities/Item.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Item {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String description;\n    private int quantity;\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true)\n    @JsonManagedReference\n    private List&lt;Loan&gt; loans;\n}\n</code></pre>"},{"location":"api/03-entidades-modelos/#explicacion-de-la-entidad-item","title":"\ud83d\udd0d Explicaci\u00f3n de la Entidad Item","text":""},{"location":"api/03-entidades-modelos/#campos-de-negocio","title":"Campos de Negocio","text":"<p><pre><code>private String name;\nprivate String description;\nprivate int quantity;\n</code></pre> - name: Nombre del art\u00edculo - description: Descripci\u00f3n detallada - quantity: Cantidad disponible en inventario</p>"},{"location":"api/03-entidades-modelos/#relacion-con-loan","title":"Relaci\u00f3n con Loan","text":"<p><pre><code>@OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true)\n@JsonManagedReference\nprivate List&lt;Loan&gt; loans;\n</code></pre> - Un item puede estar en m\u00faltiples pr\u00e9stamos - Si se elimina un item, se eliminan todos sus pr\u00e9stamos - Evita referencias circulares en la serializaci\u00f3n JSON</p>"},{"location":"api/03-entidades-modelos/#entidad-loan-prestamo","title":"\ud83d\udccb Entidad Loan (Pr\u00e9stamo)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/entities/Loan.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Loan {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"item_id\")\n    @JsonBackReference\n    private Item item;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    @JsonBackReference\n    private User user;\n\n    private LocalDate loanDate;\n    private LocalDate returnDate;\n    private boolean returned;\n\n    @OneToMany(mappedBy = \"loan\", cascade = CascadeType.ALL, orphanRemoval = true)\n    @JsonManagedReference\n    private List&lt;LoanHistory&gt; histories;\n}\n</code></pre>"},{"location":"api/03-entidades-modelos/#explicacion-de-la-entidad-loan","title":"\ud83d\udd0d Explicaci\u00f3n de la Entidad Loan","text":""},{"location":"api/03-entidades-modelos/#relaciones-many-to-one","title":"Relaciones Many-to-One","text":"<p><pre><code>@ManyToOne\n@JoinColumn(name = \"item_id\")\n@JsonBackReference\nprivate Item item;\n</code></pre> - @ManyToOne: Muchos pr\u00e9stamos pueden referenciar un item - @JoinColumn: Especifica el nombre de la columna de clave for\u00e1nea - @JsonBackReference: Lado \"back\" de la referencia bidireccional</p> <p><pre><code>@ManyToOne\n@JoinColumn(name = \"user_id\")\n@JsonBackReference\nprivate User user;\n</code></pre> - Similar configuraci\u00f3n para la relaci\u00f3n con User</p>"},{"location":"api/03-entidades-modelos/#campos-de-negocio_1","title":"Campos de Negocio","text":"<p><pre><code>private LocalDate loanDate;\nprivate LocalDate returnDate;\nprivate boolean returned;\n</code></pre> - LocalDate: Tipo de Java 8+ para fechas (sin hora) - loanDate: Fecha en que se realiz\u00f3 el pr\u00e9stamo - returnDate: Fecha programada de devoluci\u00f3n - returned: Estado booleano del pr\u00e9stamo</p>"},{"location":"api/03-entidades-modelos/#relacion-con-loanhistory","title":"Relaci\u00f3n con LoanHistory","text":"<p><pre><code>@OneToMany(mappedBy = \"loan\", cascade = CascadeType.ALL, orphanRemoval = true)\n@JsonManagedReference\nprivate List&lt;LoanHistory&gt; histories;\n</code></pre> - Un pr\u00e9stamo puede tener m\u00faltiples registros de historial - Cascada completa y eliminaci\u00f3n de hu\u00e9rfanos</p>"},{"location":"api/03-entidades-modelos/#entidad-loanhistory-historial-de-prestamos","title":"\ud83d\udcca Entidad LoanHistory (Historial de Pr\u00e9stamos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/entities/LoanHistory.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDateTime;\n\n@Entity\n@Data\npublic class LoanHistory {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"loan_id\")\n    @JsonBackReference\n    private Loan loan;\n\n    private LocalDateTime actionDate;\n    private String action; // e.g., \"CREATED\", \"RETURNED\"\n}\n</code></pre>"},{"location":"api/03-entidades-modelos/#explicacion-de-la-entidad-loanhistory","title":"\ud83d\udd0d Explicaci\u00f3n de la Entidad LoanHistory","text":""},{"location":"api/03-entidades-modelos/#campos-de-auditoria","title":"Campos de Auditor\u00eda","text":"<p><pre><code>private LocalDateTime actionDate;\nprivate String action;\n</code></pre> - LocalDateTime: Incluye fecha y hora exacta - action: Tipo de acci\u00f3n realizada (ej: \"CREATED\", \"RETURNED\", \"EXTENDED\")</p>"},{"location":"api/03-entidades-modelos/#relacion-con-loan_1","title":"Relaci\u00f3n con Loan","text":"<p><pre><code>@ManyToOne\n@JoinColumn(name = \"loan_id\")\n@JsonBackReference\nprivate Loan loan;\n</code></pre> - M\u00faltiples registros de historial por pr\u00e9stamo - Referencia hacia atr\u00e1s para evitar ciclos JSON</p>"},{"location":"api/03-entidades-modelos/#manejo-de-referencias-circulares","title":"\ud83d\udd04 Manejo de Referencias Circulares","text":""},{"location":"api/03-entidades-modelos/#problema-de-referencias-circulares","title":"Problema de Referencias Circulares","text":"<p>Sin las anotaciones de Jackson, tendr\u00edamos: <pre><code>User \u2192 Loan \u2192 User \u2192 Loan \u2192 ... (infinito)\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#solucion-con-jackson","title":"Soluci\u00f3n con Jackson","text":"<pre><code>// En el lado \"padre\" (User, Item)\n@JsonManagedReference\nprivate List&lt;Loan&gt; loans;\n\n// En el lado \"hijo\" (Loan)\n@JsonBackReference\nprivate User user;\n@JsonBackReference\nprivate Item item;\n</code></pre> <p>Resultado en JSON: <pre><code>{\n  \"id\": 1,\n  \"username\": \"john_doe\",\n  \"email\": \"john@example.com\",\n  \"loans\": [\n    {\n      \"id\": 1,\n      \"loanDate\": \"2024-01-15\",\n      \"returned\": false\n      // user e item no aparecen aqu\u00ed\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#estructura-de-directorios","title":"\ud83d\udcc1 Estructura de Directorios","text":"<p>Organiza tus entidades de la siguiente manera:</p> <pre><code>src/main/java/com/example/pib2/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 entities/\n\u2502       \u251c\u2500\u2500 User.java\n\u2502       \u251c\u2500\u2500 Item.java\n\u2502       \u251c\u2500\u2500 Loan.java\n\u2502       \u2514\u2500\u2500 LoanHistory.java\n\u251c\u2500\u2500 controllers/\n\u251c\u2500\u2500 services/\n\u251c\u2500\u2500 repositories/\n\u2514\u2500\u2500 Pib2Application.java\n</code></pre>"},{"location":"api/03-entidades-modelos/#verificacion-de-las-entidades","title":"\u2705 Verificaci\u00f3n de las Entidades","text":""},{"location":"api/03-entidades-modelos/#1-compilar-el-proyecto","title":"1. Compilar el Proyecto","text":"<pre><code>./mvnw clean compile\n</code></pre>"},{"location":"api/03-entidades-modelos/#2-ejecutar-la-aplicacion","title":"2. Ejecutar la Aplicaci\u00f3n","text":"<pre><code>./mvnw spring-boot:run\n</code></pre>"},{"location":"api/03-entidades-modelos/#3-verificar-creacion-de-tablas","title":"3. Verificar Creaci\u00f3n de Tablas","text":"<p>En los logs deber\u00edas ver:</p> <pre><code>Hibernate: create table users (\n    id bigserial not null,\n    email varchar(255),\n    password varchar(255),\n    role varchar(255),\n    username varchar(255),\n    primary key (id)\n)\n\nHibernate: create table item (\n    id bigserial not null,\n    description varchar(255),\n    name varchar(255),\n    quantity integer not null,\n    primary key (id)\n)\n\nHibernate: create table loan (\n    id bigserial not null,\n    loan_date date,\n    return_date date,\n    returned boolean not null,\n    item_id bigint,\n    user_id bigint,\n    primary key (id)\n)\n\nHibernate: create table loan_history (\n    id bigserial not null,\n    action varchar(255),\n    action_date timestamp(6),\n    loan_id bigint,\n    primary key (id)\n)\n</code></pre>"},{"location":"api/03-entidades-modelos/#mejores-practicas","title":"\ud83c\udfa8 Mejores Pr\u00e1cticas","text":""},{"location":"api/03-entidades-modelos/#1-nomenclatura-de-entidades","title":"1. Nomenclatura de Entidades","text":"<p>\u2705 Bueno: <pre><code>@Entity\n@Table(name = \"users\")  // Plural, snake_case\npublic class User {     // Singular, PascalCase\n</code></pre></p> <p>\u274c Malo: <pre><code>@Entity\npublic class user {     // Min\u00fascula\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#2-uso-de-lombok","title":"2. Uso de Lombok","text":"<p>\u2705 Bueno: <pre><code>@Entity\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    // campos\n}\n</code></pre></p> <p>\u274c Malo: <pre><code>@Entity\npublic class User {\n    // Escribir manualmente todos los getters/setters\n}\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#3-relaciones-bidireccionales","title":"3. Relaciones Bidireccionales","text":"<p>\u2705 Bueno: <pre><code>// Lado padre\n@OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, orphanRemoval = true)\n@JsonManagedReference\nprivate List&lt;Loan&gt; loans;\n\n// Lado hijo\n@ManyToOne\n@JoinColumn(name = \"user_id\")\n@JsonBackReference\nprivate User user;\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#4-tipos-de-datos","title":"4. Tipos de Datos","text":"<p>\u2705 Bueno: <pre><code>private LocalDate loanDate;      // Para fechas\nprivate LocalDateTime actionDate; // Para fecha y hora\nprivate BigDecimal price;        // Para dinero\n</code></pre></p> <p>\u274c Malo: <pre><code>private Date loanDate;           // Deprecated\nprivate float price;             // Impreciso para dinero\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/03-entidades-modelos/#error-table-user-doesnt-exist","title":"Error: \"Table 'user' doesn't exist\"","text":"<p>Causa: \"user\" es palabra reservada en PostgreSQL</p> <p>Soluci\u00f3n: <pre><code>@Entity\n@Table(name = \"users\")  // Usar nombre diferente\npublic class User {\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#error-stackoverflowerror-en-json","title":"Error: \"StackOverflowError\" en JSON","text":"<p>Causa: Referencias circulares</p> <p>Soluci\u00f3n: <pre><code>@JsonManagedReference  // En el lado padre\n@JsonBackReference     // En el lado hijo\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#error-lazyinitializationexception","title":"Error: \"LazyInitializationException\"","text":"<p>Causa: Acceso a relaciones lazy fuera de transacci\u00f3n</p> <p>Soluci\u00f3n: <pre><code>@OneToMany(fetch = FetchType.EAGER)  // Solo si es necesario\n// O usar @Transactional en el servicio\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#error-detached-entity-passed-to-persist","title":"Error: \"Detached entity passed to persist\"","text":"<p>Causa: Intentar guardar entidad con ID ya asignado</p> <p>Soluci\u00f3n: <pre><code>// Usar merge() en lugar de save() para entidades existentes\nentityManager.merge(entity);\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#configuraciones-adicionales","title":"\ud83d\udd27 Configuraciones Adicionales","text":""},{"location":"api/03-entidades-modelos/#auditoria-automatica","title":"Auditor\u00eda Autom\u00e1tica","text":"<p>Para agregar campos de auditor\u00eda autom\u00e1tica:</p> <pre><code>@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class User {\n    // campos existentes...\n\n    @CreatedDate\n    private LocalDateTime createdAt;\n\n    @LastModifiedDate\n    private LocalDateTime updatedAt;\n\n    @CreatedBy\n    private String createdBy;\n\n    @LastModifiedBy\n    private String lastModifiedBy;\n}\n</code></pre> <p>Y en la clase principal: <pre><code>@SpringBootApplication\n@EnableJpaAuditing\npublic class Pib2Application {\n    // ...\n}\n</code></pre></p>"},{"location":"api/03-entidades-modelos/#validaciones","title":"Validaciones","text":"<p>Agregar validaciones a los campos:</p> <pre><code>@Entity\n@Data\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotBlank(message = \"Username is required\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    private String username;\n\n    @Email(message = \"Email should be valid\")\n    @NotBlank(message = \"Email is required\")\n    private String email;\n\n    @NotBlank(message = \"Password is required\")\n    @Size(min = 6, message = \"Password must be at least 6 characters\")\n    private String password;\n\n    @NotBlank(message = \"Role is required\")\n    private String role;\n}\n</code></pre>"},{"location":"api/03-entidades-modelos/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>Entidades JPA: Clases que representan tablas de base de datos</li> <li>Anotaciones de mapeo: @Entity, @Table, @Id, @GeneratedValue</li> <li>Relaciones: @OneToMany, @ManyToOne, @JoinColumn</li> <li>Lombok: Reducci\u00f3n de c\u00f3digo boilerplate</li> <li>Jackson: Manejo de referencias circulares en JSON</li> <li>Cascade: Propagaci\u00f3n de operaciones a entidades relacionadas</li> <li>Orphan removal: Eliminaci\u00f3n autom\u00e1tica de entidades hu\u00e9rfanas</li> </ul>"},{"location":"api/03-entidades-modelos/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Crear DTOs (Data Transfer Objects) - Implementar mapeo entre entidades y DTOs - Separar la capa de presentaci\u00f3n de la capa de datos - Validar datos de entrada</p> <p>\u2190 Anterior: Configuraci\u00f3n de Base de Datos | Volver al \u00cdndice | Siguiente: DTOs y Mapeo \u2192</p>"},{"location":"api/04-dtos-mapeo/","title":"4. DTOs y Mapeo de Datos","text":""},{"location":"api/04-dtos-mapeo/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Entender qu\u00e9 son los DTOs y por qu\u00e9 son importantes - Crear DTOs para cada entidad del sistema - Implementar m\u00e9todos de conversi\u00f3n entre entidades y DTOs - Aplicar mejores pr\u00e1cticas en el mapeo de datos - Separar la capa de presentaci\u00f3n de la capa de persistencia</p>"},{"location":"api/04-dtos-mapeo/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Entidades JPA creadas (secci\u00f3n anterior)</li> <li>Conocimientos b\u00e1sicos de Java</li> <li>Comprensi\u00f3n de patrones de dise\u00f1o</li> </ul>"},{"location":"api/04-dtos-mapeo/#que-son-los-dtos","title":"\ud83e\udd14 \u00bfQu\u00e9 son los DTOs?","text":""},{"location":"api/04-dtos-mapeo/#definicion","title":"Definici\u00f3n","text":"<p>DTO (Data Transfer Object) es un patr\u00f3n de dise\u00f1o que se utiliza para transferir datos entre diferentes capas de una aplicaci\u00f3n o entre diferentes sistemas.</p>"},{"location":"api/04-dtos-mapeo/#por-que-usar-dtos","title":"\u00bfPor qu\u00e9 usar DTOs?","text":""},{"location":"api/04-dtos-mapeo/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<pre><code>// \u274c Malo: Exponer entidad directamente\n@GetMapping\npublic List&lt;User&gt; getUsers() {\n    return userService.findAll(); // Expone password, relaciones, etc.\n}\n\n// \u2705 Bueno: Usar DTO\n@GetMapping\npublic List&lt;UserDTO&gt; getUsers() {\n    return userService.findAll().stream()\n        .map(this::toDTO)\n        .collect(Collectors.toList());\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#2-control-de-datos-expuestos","title":"2. Control de Datos Expuestos","text":"<ul> <li>Entidad: Contiene todos los campos, incluyendo sensibles</li> <li>DTO: Solo contiene campos que deben ser expuestos</li> </ul>"},{"location":"api/04-dtos-mapeo/#3-evitar-referencias-circulares","title":"3. Evitar Referencias Circulares","text":"<ul> <li>Las entidades pueden tener relaciones bidireccionales</li> <li>Los DTOs usan IDs en lugar de objetos completos</li> </ul>"},{"location":"api/04-dtos-mapeo/#4-versionado-de-api","title":"4. Versionado de API","text":"<ul> <li>Cambios en entidades no afectan la API</li> <li>M\u00faltiples DTOs para diferentes versiones</li> </ul>"},{"location":"api/04-dtos-mapeo/#5-validacion-especifica","title":"5. Validaci\u00f3n Espec\u00edfica","text":"<ul> <li>Validaciones diferentes para creaci\u00f3n vs actualizaci\u00f3n</li> <li>Campos obligatorios seg\u00fan el contexto</li> </ul>"},{"location":"api/04-dtos-mapeo/#userdto-usuario","title":"\ud83d\udc64 UserDTO (Usuario)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/dtos/UserDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport lombok.Data;\n\n@Data\npublic class UserDTO {\n    private Long id;\n    private String username;\n    private String email;\n    // Nota: NO incluimos password por seguridad\n    // Nota: NO incluimos loans para evitar referencias circulares\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#analisis-del-userdto","title":"\ud83d\udd0d An\u00e1lisis del UserDTO","text":""},{"location":"api/04-dtos-mapeo/#campos-incluidos","title":"Campos Incluidos","text":"<ul> <li>id: Identificador \u00fanico</li> <li>username: Nombre de usuario p\u00fablico</li> <li>email: Email del usuario</li> </ul>"},{"location":"api/04-dtos-mapeo/#campos-excluidos","title":"Campos Excluidos","text":"<ul> <li>password: Informaci\u00f3n sensible que nunca debe exponerse</li> <li>role: Podr\u00eda incluirse seg\u00fan los requerimientos</li> <li>loans: Lista de pr\u00e9stamos (evita referencias circulares)</li> </ul>"},{"location":"api/04-dtos-mapeo/#ventajas","title":"Ventajas","text":"<pre><code>// La respuesta JSON ser\u00e1 limpia:\n{\n  \"id\": 1,\n  \"username\": \"john_doe\",\n  \"email\": \"john@example.com\"\n}\n// Sin password, sin relaciones complejas\n</code></pre>"},{"location":"api/04-dtos-mapeo/#itemdto-articulo","title":"\ud83d\udce6 ItemDTO (Art\u00edculo)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/dtos/ItemDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport lombok.Data;\n\n@Data\npublic class ItemDTO {\n    private Long id;\n    private String name;\n    private String description;\n    private int quantity;\n    // Nota: NO incluimos loans para evitar referencias circulares\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#analisis-del-itemdto","title":"\ud83d\udd0d An\u00e1lisis del ItemDTO","text":""},{"location":"api/04-dtos-mapeo/#campos-incluidos_1","title":"Campos Incluidos","text":"<ul> <li>id: Identificador \u00fanico</li> <li>name: Nombre del art\u00edculo</li> <li>description: Descripci\u00f3n detallada</li> <li>quantity: Cantidad disponible</li> </ul>"},{"location":"api/04-dtos-mapeo/#campos-excluidos_1","title":"Campos Excluidos","text":"<ul> <li>loans: Lista de pr\u00e9stamos (evita complejidad)</li> </ul>"},{"location":"api/04-dtos-mapeo/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Laptop Dell\",\n  \"description\": \"Laptop para desarrollo\",\n  \"quantity\": 5\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#loandto-prestamo","title":"\ud83d\udccb LoanDTO (Pr\u00e9stamo)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/dtos/LoanDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LoanDTO {\n    private Long id;\n    private Long itemId;    // ID en lugar del objeto completo\n    private Long userId;    // ID en lugar del objeto completo\n    private LocalDate loanDate;\n    private LocalDate returnDate;\n    private boolean returned;\n    // Nota: NO incluimos histories para evitar complejidad\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#analisis-del-loandto","title":"\ud83d\udd0d An\u00e1lisis del LoanDTO","text":""},{"location":"api/04-dtos-mapeo/#uso-de-ids-en-lugar-de-objetos","title":"Uso de IDs en lugar de Objetos","text":"<pre><code>// \u274c En la entidad (relaciones completas)\nprivate User user;\nprivate Item item;\n\n// \u2705 En el DTO (solo IDs)\nprivate Long userId;\nprivate Long itemId;\n</code></pre>"},{"location":"api/04-dtos-mapeo/#ventajas-de-usar-ids","title":"Ventajas de usar IDs","text":"<ol> <li>Simplicidad: JSON m\u00e1s limpio</li> <li>Performance: No carga objetos relacionados</li> <li>Flexibilidad: El cliente decide si necesita m\u00e1s datos</li> <li>Evita ciclos: No hay referencias circulares</li> </ol>"},{"location":"api/04-dtos-mapeo/#ejemplo-de-json","title":"Ejemplo de JSON","text":"<pre><code>{\n  \"id\": 1,\n  \"itemId\": 5,\n  \"userId\": 3,\n  \"loanDate\": \"2024-01-15\",\n  \"returnDate\": \"2024-01-30\",\n  \"returned\": false\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#loanhistorydto-historial-de-prestamos","title":"\ud83d\udcca LoanHistoryDTO (Historial de Pr\u00e9stamos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/models/dtos/LoanHistoryDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport lombok.Data;\nimport java.time.LocalDateTime;\n\n@Data\npublic class LoanHistoryDTO {\n    private Long id;\n    private Long loanId;    // ID del pr\u00e9stamo relacionado\n    private LocalDateTime actionDate;\n    private String action;  // e.g., \"CREATED\", \"RETURNED\"\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#analisis-del-loanhistorydto","title":"\ud83d\udd0d An\u00e1lisis del LoanHistoryDTO","text":""},{"location":"api/04-dtos-mapeo/#campos-de-auditoria","title":"Campos de Auditor\u00eda","text":"<ul> <li>actionDate: Timestamp completo con hora</li> <li>action: Tipo de acci\u00f3n realizada</li> </ul>"},{"location":"api/04-dtos-mapeo/#ejemplo-de-json_1","title":"Ejemplo de JSON","text":"<pre><code>{\n  \"id\": 1,\n  \"loanId\": 5,\n  \"actionDate\": \"2024-01-15T10:30:00\",\n  \"action\": \"CREATED\"\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#metodos-de-conversion","title":"\ud83d\udd04 M\u00e9todos de Conversi\u00f3n","text":""},{"location":"api/04-dtos-mapeo/#patron-de-mapeo-manual","title":"Patr\u00f3n de Mapeo Manual","text":"<p>En cada controlador, implementamos m\u00e9todos para convertir entre entidades y DTOs:</p>"},{"location":"api/04-dtos-mapeo/#usercontroller-metodos-de-conversion","title":"UserController - M\u00e9todos de Conversi\u00f3n","text":"<pre><code>@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    // Convertir de Entidad a DTO\n    private UserDTO toDTO(User user) {\n        UserDTO dto = new UserDTO();\n        dto.setId(user.getId());\n        dto.setUsername(user.getUsername());\n        dto.setEmail(user.getEmail());\n        // NO incluimos password ni loans\n        return dto;\n    }\n\n    // Convertir de DTO a Entidad\n    private User toEntity(UserDTO dto) {\n        User user = new User();\n        user.setId(dto.getId());\n        user.setUsername(dto.getUsername());\n        user.setEmail(dto.getEmail());\n        // password y role se manejan por separado\n        return user;\n    }\n\n    // Uso en endpoints\n    @GetMapping\n    public List&lt;UserDTO&gt; getAll() {\n        return userService.findAll().stream()\n            .map(this::toDTO)\n            .collect(Collectors.toList());\n    }\n\n    @PostMapping\n    public UserDTO create(@RequestBody UserDTO userDTO) {\n        User user = toEntity(userDTO);\n        User saved = userService.save(user);\n        return toDTO(saved);\n    }\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#itemcontroller-metodos-de-conversion","title":"ItemController - M\u00e9todos de Conversi\u00f3n","text":"<pre><code>@RestController\n@RequestMapping(\"/api/items\")\npublic class ItemController {\n\n    @Autowired\n    private ItemService itemService;\n\n    private ItemDTO toDTO(Item item) {\n        ItemDTO dto = new ItemDTO();\n        dto.setId(item.getId());\n        dto.setName(item.getName());\n        dto.setDescription(item.getDescription());\n        dto.setQuantity(item.getQuantity());\n        return dto;\n    }\n\n    private Item toEntity(ItemDTO dto) {\n        Item item = new Item();\n        item.setId(dto.getId());\n        item.setName(dto.getName());\n        item.setDescription(dto.getDescription());\n        item.setQuantity(dto.getQuantity());\n        return item;\n    }\n\n    @GetMapping\n    public List&lt;ItemDTO&gt; getAll() {\n        return itemService.findAll().stream()\n            .map(this::toDTO)\n            .collect(Collectors.toList());\n    }\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#loancontroller-metodos-de-conversion-complejos","title":"LoanController - M\u00e9todos de Conversi\u00f3n Complejos","text":"<pre><code>@RestController\n@RequestMapping(\"/api/loans\")\npublic class LoanController {\n\n    @Autowired\n    private LoanService loanService;\n    @Autowired\n    private ItemService itemService;\n    @Autowired\n    private UserService userService;\n\n    private LoanDTO toDTO(Loan loan) {\n        LoanDTO dto = new LoanDTO();\n        dto.setId(loan.getId());\n        // Convertir objetos a IDs\n        dto.setItemId(loan.getItem() != null ? loan.getItem().getId() : null);\n        dto.setUserId(loan.getUser() != null ? loan.getUser().getId() : null);\n        dto.setLoanDate(loan.getLoanDate());\n        dto.setReturnDate(loan.getReturnDate());\n        dto.setReturned(loan.isReturned());\n        return dto;\n    }\n\n    private Loan toEntity(LoanDTO dto) {\n        Loan loan = new Loan();\n        loan.setId(dto.getId());\n\n        // Convertir IDs a objetos (con validaci\u00f3n)\n        if (dto.getItemId() != null) {\n            Optional&lt;Item&gt; item = itemService.findById(dto.getItemId());\n            item.ifPresent(loan::setItem);\n        }\n\n        if (dto.getUserId() != null) {\n            Optional&lt;User&gt; user = userService.findById(dto.getUserId());\n            user.ifPresent(loan::setUser);\n        }\n\n        loan.setLoanDate(dto.getLoanDate());\n        loan.setReturnDate(dto.getReturnDate());\n        loan.setReturned(dto.isReturned());\n        return loan;\n    }\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#loanhistorycontroller-metodos-de-conversion","title":"LoanHistoryController - M\u00e9todos de Conversi\u00f3n","text":"<pre><code>@RestController\n@RequestMapping(\"/api/loanhistories\")\npublic class LoanHistoryController {\n\n    @Autowired\n    private LoanHistoryService loanHistoryService;\n    @Autowired\n    private LoanService loanService;\n\n    private LoanHistoryDTO toDTO(LoanHistory history) {\n        LoanHistoryDTO dto = new LoanHistoryDTO();\n        dto.setId(history.getId());\n        dto.setLoanId(history.getLoan() != null ? history.getLoan().getId() : null);\n        dto.setActionDate(history.getActionDate());\n        dto.setAction(history.getAction());\n        return dto;\n    }\n\n    private LoanHistory toEntity(LoanHistoryDTO dto) {\n        LoanHistory history = new LoanHistory();\n        history.setId(dto.getId());\n\n        if (dto.getLoanId() != null) {\n            Optional&lt;Loan&gt; loan = loanService.findById(dto.getLoanId());\n            loan.ifPresent(history::setLoan);\n        }\n\n        history.setActionDate(dto.getActionDate());\n        history.setAction(dto.getAction());\n        return history;\n    }\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#estructura-de-directorios","title":"\ud83d\udcc1 Estructura de Directorios","text":"<p>Organiza tus DTOs de la siguiente manera:</p> <pre><code>src/main/java/com/example/pib2/\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2502   \u251c\u2500\u2500 Item.java\n\u2502   \u2502   \u251c\u2500\u2500 Loan.java\n\u2502   \u2502   \u2514\u2500\u2500 LoanHistory.java\n\u2502   \u2514\u2500\u2500 dtos/\n\u2502       \u251c\u2500\u2500 UserDTO.java\n\u2502       \u251c\u2500\u2500 ItemDTO.java\n\u2502       \u251c\u2500\u2500 LoanDTO.java\n\u2502       \u2514\u2500\u2500 LoanHistoryDTO.java\n\u251c\u2500\u2500 controllers/\n\u251c\u2500\u2500 services/\n\u2514\u2500\u2500 repositories/\n</code></pre>"},{"location":"api/04-dtos-mapeo/#mejores-practicas","title":"\ud83c\udfa8 Mejores Pr\u00e1cticas","text":""},{"location":"api/04-dtos-mapeo/#1-nomenclatura-consistente","title":"1. Nomenclatura Consistente","text":"<p>\u2705 Bueno: <pre><code>// Entidad\npublic class User { }\n\n// DTO correspondiente\npublic class UserDTO { }\n\n// M\u00e9todos de conversi\u00f3n\nprivate UserDTO toDTO(User user) { }\nprivate User toEntity(UserDTO dto) { }\n</code></pre></p>"},{"location":"api/04-dtos-mapeo/#2-validacion-en-dtos","title":"2. Validaci\u00f3n en DTOs","text":"<pre><code>@Data\npublic class UserDTO {\n    private Long id;\n\n    @NotBlank(message = \"Username is required\")\n    @Size(min = 3, max = 50)\n    private String username;\n\n    @Email(message = \"Email should be valid\")\n    @NotBlank(message = \"Email is required\")\n    private String email;\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#3-dtos-especificos-por-operacion","title":"3. DTOs Espec\u00edficos por Operaci\u00f3n","text":"<pre><code>// Para creaci\u00f3n (sin ID)\npublic class CreateUserDTO {\n    @NotBlank\n    private String username;\n\n    @Email\n    private String email;\n\n    @NotBlank\n    @Size(min = 6)\n    private String password;\n}\n\n// Para actualizaci\u00f3n (con ID)\npublic class UpdateUserDTO {\n    @NotNull\n    private Long id;\n\n    private String username;  // Opcional\n    private String email;     // Opcional\n}\n\n// Para respuesta (sin password)\npublic class UserResponseDTO {\n    private Long id;\n    private String username;\n    private String email;\n    private LocalDateTime createdAt;\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#4-manejo-de-nulos","title":"4. Manejo de Nulos","text":"<pre><code>private LoanDTO toDTO(Loan loan) {\n    if (loan == null) {\n        return null;\n    }\n\n    LoanDTO dto = new LoanDTO();\n    dto.setId(loan.getId());\n    // Verificar nulos antes de acceder a propiedades\n    dto.setItemId(loan.getItem() != null ? loan.getItem().getId() : null);\n    dto.setUserId(loan.getUser() != null ? loan.getUser().getId() : null);\n    return dto;\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#5-uso-de-optional","title":"5. Uso de Optional","text":"<pre><code>private Loan toEntity(LoanDTO dto) {\n    Loan loan = new Loan();\n\n    // Usar Optional para manejo seguro\n    Optional.ofNullable(dto.getItemId())\n        .flatMap(itemService::findById)\n        .ifPresent(loan::setItem);\n\n    Optional.ofNullable(dto.getUserId())\n        .flatMap(userService::findById)\n        .ifPresent(loan::setUser);\n\n    return loan;\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#alternativas-de-mapeo","title":"\ud83d\udd27 Alternativas de Mapeo","text":""},{"location":"api/04-dtos-mapeo/#1-mapstruct-recomendado-para-proyectos-grandes","title":"1. MapStruct (Recomendado para proyectos grandes)","text":"<pre><code>@Mapper(componentModel = \"spring\")\npublic interface UserMapper {\n\n    @Mapping(target = \"password\", ignore = true)\n    @Mapping(target = \"loans\", ignore = true)\n    UserDTO toDTO(User user);\n\n    @Mapping(target = \"password\", ignore = true)\n    @Mapping(target = \"loans\", ignore = true)\n    User toEntity(UserDTO dto);\n\n    List&lt;UserDTO&gt; toDTOList(List&lt;User&gt; users);\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#2-modelmapper","title":"2. ModelMapper","text":"<pre><code>@Service\npublic class MappingService {\n\n    private final ModelMapper modelMapper;\n\n    public MappingService() {\n        this.modelMapper = new ModelMapper();\n        configureMapper();\n    }\n\n    private void configureMapper() {\n        // Configurar mapeos espec\u00edficos\n        modelMapper.typeMap(User.class, UserDTO.class)\n            .addMappings(mapper -&gt; {\n                mapper.skip(UserDTO::setPassword);\n                mapper.skip(UserDTO::setLoans);\n            });\n    }\n\n    public UserDTO toDTO(User user) {\n        return modelMapper.map(user, UserDTO.class);\n    }\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#3-mapeo-manual-usado-en-nuestro-proyecto","title":"3. Mapeo Manual (Usado en nuestro proyecto)","text":"<p>Ventajas: - Control total sobre el mapeo - Sin dependencias adicionales - F\u00e1cil debugging - Flexibilidad m\u00e1xima</p> <p>Desventajas: - M\u00e1s c\u00f3digo para mantener - Propenso a errores manuales - Repetitivo para entidades simples</p>"},{"location":"api/04-dtos-mapeo/#verificacion-del-mapeo","title":"\u2705 Verificaci\u00f3n del Mapeo","text":""},{"location":"api/04-dtos-mapeo/#1-prueba-de-endpoints","title":"1. Prueba de Endpoints","text":"<pre><code># Crear un usuario\ncurl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\"\n  }'\n\n# Respuesta esperada (sin password)\n{\n  \"id\": 1,\n  \"username\": \"john_doe\",\n  \"email\": \"john@example.com\"\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#2-verificar-referencias","title":"2. Verificar Referencias","text":"<pre><code># Crear un pr\u00e9stamo\ncurl -X POST http://localhost:8080/api/loans \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"itemId\": 1,\n    \"userId\": 1,\n    \"loanDate\": \"2024-01-15\",\n    \"returnDate\": \"2024-01-30\",\n    \"returned\": false\n  }'\n\n# Respuesta esperada (con IDs, no objetos completos)\n{\n  \"id\": 1,\n  \"itemId\": 1,\n  \"userId\": 1,\n  \"loanDate\": \"2024-01-15\",\n  \"returnDate\": \"2024-01-30\",\n  \"returned\": false\n}\n</code></pre>"},{"location":"api/04-dtos-mapeo/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/04-dtos-mapeo/#error-stackoverflowerror-en-json","title":"Error: \"StackOverflowError\" en JSON","text":"<p>Causa: Referencias circulares en entidades</p> <p>Soluci\u00f3n: Usar DTOs con IDs <pre><code>// \u274c Malo: Exponer entidad con relaciones\n@GetMapping\npublic List&lt;User&gt; getUsers() {\n    return userService.findAll();\n}\n\n// \u2705 Bueno: Usar DTO\n@GetMapping\npublic List&lt;UserDTO&gt; getUsers() {\n    return userService.findAll().stream()\n        .map(this::toDTO)\n        .collect(Collectors.toList());\n}\n</code></pre></p>"},{"location":"api/04-dtos-mapeo/#error-nullpointerexception-en-conversion","title":"Error: \"NullPointerException\" en conversi\u00f3n","text":"<p>Causa: No validar nulos</p> <p>Soluci\u00f3n: Verificar antes de acceder <pre><code>private LoanDTO toDTO(Loan loan) {\n    if (loan == null) return null;\n\n    LoanDTO dto = new LoanDTO();\n    dto.setItemId(loan.getItem() != null ? loan.getItem().getId() : null);\n    return dto;\n}\n</code></pre></p>"},{"location":"api/04-dtos-mapeo/#error-entity-not-found-al-convertir-dto-a-entity","title":"Error: \"Entity not found\" al convertir DTO a Entity","text":"<p>Causa: ID referenciado no existe</p> <p>Soluci\u00f3n: Usar Optional y manejar casos <pre><code>if (dto.getItemId() != null) {\n    Optional&lt;Item&gt; item = itemService.findById(dto.getItemId());\n    if (item.isPresent()) {\n        loan.setItem(item.get());\n    } else {\n        throw new EntityNotFoundException(\"Item not found: \" + dto.getItemId());\n    }\n}\n</code></pre></p>"},{"location":"api/04-dtos-mapeo/#error-validation-failed-en-dtos","title":"Error: \"Validation failed\" en DTOs","text":"<p>Causa: Datos inv\u00e1lidos en DTO</p> <p>Soluci\u00f3n: Agregar validaciones apropiadas <pre><code>@Data\npublic class UserDTO {\n    @NotBlank(message = \"Username cannot be blank\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    private String username;\n\n    @Email(message = \"Email must be valid\")\n    @NotBlank(message = \"Email cannot be blank\")\n    private String email;\n}\n</code></pre></p>"},{"location":"api/04-dtos-mapeo/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>DTOs: Objetos para transferir datos entre capas</li> <li>Separaci\u00f3n de responsabilidades: Entidades vs DTOs</li> <li>Mapeo manual: Control total sobre la conversi\u00f3n</li> <li>Referencias por ID: Evitar ciclos y complejidad</li> <li>Validaci\u00f3n: Datos seguros en la capa de presentaci\u00f3n</li> <li>Manejo de nulos: C\u00f3digo robusto y seguro</li> <li>Patrones de conversi\u00f3n: toDTO() y toEntity()</li> </ul>"},{"location":"api/04-dtos-mapeo/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Crear repositorios JPA - Implementar consultas personalizadas - Usar Spring Data JPA - Manejar transacciones</p> <p>\u2190 Anterior: Entidades y Modelos | Volver al \u00cdndice | Siguiente: Repositorios \u2192</p>"},{"location":"api/05-repositorios-acceso-datos/","title":"5. Repositorios y Acceso a Datos","text":""},{"location":"api/05-repositorios-acceso-datos/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Entender qu\u00e9 es Spring Data JPA - Crear repositorios con JpaRepository - Implementar operaciones CRUD autom\u00e1ticas - Crear consultas derivadas de nombres de m\u00e9todos - Aplicar el patr\u00f3n Repository - Configurar consultas personalizadas con @Query</p>"},{"location":"api/05-repositorios-acceso-datos/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Entidades JPA creadas</li> <li>Configuraci\u00f3n de base de datos completada</li> <li>Conocimientos b\u00e1sicos de JPA/Hibernate</li> <li>Comprensi\u00f3n de interfaces en Java</li> </ul>"},{"location":"api/05-repositorios-acceso-datos/#que-es-spring-data-jpa","title":"\ud83d\uddc4\ufe0f \u00bfQu\u00e9 es Spring Data JPA?","text":"<p>Spring Data JPA es una abstracci\u00f3n que simplifica el acceso a datos proporcionando:</p>"},{"location":"api/05-repositorios-acceso-datos/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Implementaci\u00f3n autom\u00e1tica: No necesitas escribir c\u00f3digo de implementaci\u00f3n</li> <li>M\u00e9todos CRUD predefinidos: Operaciones b\u00e1sicas ya incluidas</li> <li>Consultas derivadas: Genera consultas basadas en nombres de m\u00e9todos</li> <li>Soporte para paginaci\u00f3n: Manejo autom\u00e1tico de grandes conjuntos de datos</li> <li>Auditor\u00eda: Seguimiento autom\u00e1tico de cambios</li> <li>Transacciones: Gesti\u00f3n autom\u00e1tica de transacciones</li> </ul>"},{"location":"api/05-repositorios-acceso-datos/#ventajas-de-jparepository","title":"Ventajas de JpaRepository","text":"<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    // \u00a1No necesitas implementar nada!\n    // Spring Data JPA genera autom\u00e1ticamente:\n    // - findAll()\n    // - findById(Long id)\n    // - save(User user)\n    // - deleteById(Long id)\n    // - count()\n    // - existsById(Long id)\n    // Y muchos m\u00e1s...\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#jerarquia-de-interfaces","title":"Jerarqu\u00eda de Interfaces","text":"<pre><code>Repository&lt;T, ID&gt;\n    \u2193\nCrudRepository&lt;T, ID&gt;\n    \u2193\nPagingAndSortingRepository&lt;T, ID&gt;\n    \u2193\nJpaRepository&lt;T, ID&gt;\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#estructura-de-repositorios","title":"\ud83d\udcc1 Estructura de Repositorios","text":""},{"location":"api/05-repositorios-acceso-datos/#crear-el-paquete","title":"Crear el Paquete","text":"<p>Primero, crea la estructura de carpetas:</p> <pre><code>src/main/java/com/example/pib2/\n\u2514\u2500\u2500 repositories/\n    \u251c\u2500\u2500 UserRepository.java\n    \u251c\u2500\u2500 ItemRepository.java\n    \u251c\u2500\u2500 LoanRepository.java\n    \u2514\u2500\u2500 LoanHistoryRepository.java\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#userrepository-repositorio-de-usuarios","title":"\ud83d\udc64 UserRepository (Repositorio de Usuarios)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/repositories/UserRepository.java</code>:</p> <pre><code>package com.example.pib2.repositories;\n\nimport com.example.pib2.models.entities.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    // ========================================\n    // M\u00c9TODOS AUTOM\u00c1TICOS HEREDADOS\n    // ========================================\n    // List&lt;User&gt; findAll()\n    // Optional&lt;User&gt; findById(Long id)\n    // User save(User user)\n    // void deleteById(Long id)\n    // long count()\n    // boolean existsById(Long id)\n    // void delete(User user)\n    // void deleteAll()\n\n    // ========================================\n    // CONSULTAS DERIVADAS\n    // ========================================\n\n    // Buscar por username exacto\n    Optional&lt;User&gt; findByUsername(String username);\n\n    // Buscar por email exacto\n    Optional&lt;User&gt; findByEmail(String email);\n\n    // Buscar por rol\n    List&lt;User&gt; findByRole(String role);\n\n    // Buscar por username que contenga texto (ignorando may\u00fasculas)\n    List&lt;User&gt; findByUsernameContainingIgnoreCase(String username);\n\n    // Verificar si existe username\n    boolean existsByUsername(String username);\n\n    // Verificar si existe email\n    boolean existsByEmail(String email);\n\n    // Buscar por username y email\n    Optional&lt;User&gt; findByUsernameAndEmail(String username, String email);\n\n    // ========================================\n    // CONSULTAS PERSONALIZADAS CON @Query\n    // ========================================\n\n    @Query(\"SELECT u FROM User u WHERE u.role = :role AND u.username LIKE %:username%\")\n    List&lt;User&gt; findUsersByRoleAndUsername(@Param(\"role\") String role, @Param(\"username\") String username);\n\n    @Query(\"SELECT COUNT(u) FROM User u WHERE u.role = :role\")\n    long countByRole(@Param(\"role\") String role);\n\n    // Consulta nativa SQL\n    @Query(value = \"SELECT * FROM users WHERE created_at &gt; NOW() - INTERVAL 30 DAY\", nativeQuery = true)\n    List&lt;User&gt; findRecentUsers();\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#analisis-del-userrepository","title":"\ud83d\udd0d An\u00e1lisis del UserRepository","text":""},{"location":"api/05-repositorios-acceso-datos/#herencia-de-jparepository","title":"Herencia de JpaRepository","text":"<pre><code>JpaRepository&lt;User, Long&gt;\n//            \u2191     \u2191\n//         Entidad  Tipo del ID\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#metodos-automaticos-disponibles","title":"M\u00e9todos Autom\u00e1ticos Disponibles","text":"M\u00e9todo Descripci\u00f3n Ejemplo de Uso <code>findAll()</code> Obtiene todos los usuarios <code>List&lt;User&gt; users = userRepository.findAll();</code> <code>findById(Long id)</code> Busca por ID <code>Optional&lt;User&gt; user = userRepository.findById(1L);</code> <code>save(User user)</code> Guarda o actualiza <code>User saved = userRepository.save(user);</code> <code>deleteById(Long id)</code> Elimina por ID <code>userRepository.deleteById(1L);</code> <code>count()</code> Cuenta registros <code>long total = userRepository.count();</code> <code>existsById(Long id)</code> Verifica existencia <code>boolean exists = userRepository.existsById(1L);</code>"},{"location":"api/05-repositorios-acceso-datos/#itemrepository-repositorio-de-articulos","title":"\ud83d\udce6 ItemRepository (Repositorio de Art\u00edculos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/repositories/ItemRepository.java</code>:</p> <pre><code>package com.example.pib2.repositories;\n\nimport com.example.pib2.models.entities.Item;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface ItemRepository extends JpaRepository&lt;Item, Long&gt; {\n\n    // ========================================\n    // CONSULTAS DERIVADAS\n    // ========================================\n\n    // Buscar por nombre exacto\n    Optional&lt;Item&gt; findByName(String name);\n\n    // Buscar por nombre que contenga texto\n    List&lt;Item&gt; findByNameContaining(String name);\n\n    // Buscar por nombre ignorando may\u00fasculas\n    List&lt;Item&gt; findByNameContainingIgnoreCase(String name);\n\n    // Buscar por cantidad mayor que\n    List&lt;Item&gt; findByQuantityGreaterThan(int quantity);\n\n    // Buscar por cantidad menor que\n    List&lt;Item&gt; findByQuantityLessThan(int quantity);\n\n    // Buscar por cantidad entre valores\n    List&lt;Item&gt; findByQuantityBetween(int min, int max);\n\n    // Buscar por nombre y cantidad\n    List&lt;Item&gt; findByNameAndQuantityGreaterThan(String name, int quantity);\n\n    // Buscar por descripci\u00f3n que contenga texto (ignorando may\u00fasculas)\n    List&lt;Item&gt; findByDescriptionContainingIgnoreCase(String description);\n\n    // Contar items con cantidad menor que\n    long countByQuantityLessThan(int quantity);\n\n    // Verificar si existe item con nombre\n    boolean existsByName(String name);\n\n    // Buscar items disponibles (cantidad &gt; 0)\n    List&lt;Item&gt; findByQuantityGreaterThanOrderByNameAsc(int quantity);\n\n    // ========================================\n    // CONSULTAS PERSONALIZADAS\n    // ========================================\n\n    @Query(\"SELECT i FROM Item i WHERE i.quantity &gt; 0 AND i.name LIKE %:searchTerm%\")\n    List&lt;Item&gt; findAvailableItemsByName(@Param(\"searchTerm\") String searchTerm);\n\n    @Query(\"SELECT i FROM Item i WHERE i.quantity &lt; :threshold ORDER BY i.quantity ASC\")\n    List&lt;Item&gt; findLowStockItems(@Param(\"threshold\") int threshold);\n\n    @Query(\"SELECT SUM(i.quantity) FROM Item i\")\n    Long getTotalQuantity();\n\n    // Consulta nativa para estad\u00edsticas\n    @Query(value = \"SELECT AVG(quantity) FROM items\", nativeQuery = true)\n    Double getAverageQuantity();\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#loanrepository-repositorio-de-prestamos","title":"\ud83d\udccb LoanRepository (Repositorio de Pr\u00e9stamos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/repositories/LoanRepository.java</code>:</p> <pre><code>package com.example.pib2.repositories;\n\nimport com.example.pib2.models.entities.Loan;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Repository\npublic interface LoanRepository extends JpaRepository&lt;Loan, Long&gt; {\n\n    // ========================================\n    // CONSULTAS DERIVADAS\n    // ========================================\n\n    // Buscar pr\u00e9stamos por usuario\n    List&lt;Loan&gt; findByUserId(Long userId);\n\n    // Buscar pr\u00e9stamos por art\u00edculo\n    List&lt;Loan&gt; findByItemId(Long itemId);\n\n    // Buscar pr\u00e9stamos devueltos/no devueltos\n    List&lt;Loan&gt; findByReturned(boolean returned);\n\n    // Buscar pr\u00e9stamos activos de un usuario\n    List&lt;Loan&gt; findByUserIdAndReturned(Long userId, boolean returned);\n\n    // Buscar pr\u00e9stamos por fecha de pr\u00e9stamo\n    List&lt;Loan&gt; findByLoanDateBetween(LocalDateTime start, LocalDateTime end);\n\n    // Buscar pr\u00e9stamos vencidos (fecha de devoluci\u00f3n pasada y no devueltos)\n    List&lt;Loan&gt; findByReturnDateBeforeAndReturnedFalse(LocalDateTime date);\n\n    // Contar pr\u00e9stamos activos de un usuario\n    long countByUserIdAndReturnedFalse(Long userId);\n\n    // Verificar si un usuario tiene pr\u00e9stamos activos\n    boolean existsByUserIdAndReturnedFalse(Long userId);\n\n    // Verificar si un art\u00edculo est\u00e1 prestado\n    boolean existsByItemIdAndReturnedFalse(Long itemId);\n\n    // ========================================\n    // CONSULTAS PERSONALIZADAS\n    // ========================================\n\n    @Query(\"SELECT l FROM Loan l WHERE l.user.id = :userId AND l.returned = false\")\n    List&lt;Loan&gt; findActiveLoansByUser(@Param(\"userId\") Long userId);\n\n    @Query(\"SELECT l FROM Loan l WHERE l.returnDate &lt; :currentDate AND l.returned = false\")\n    List&lt;Loan&gt; findOverdueLoans(@Param(\"currentDate\") LocalDateTime currentDate);\n\n    @Query(\"SELECT COUNT(l) FROM Loan l WHERE l.user.id = :userId\")\n    long countTotalLoansByUser(@Param(\"userId\") Long userId);\n\n    @Query(\"SELECT l FROM Loan l JOIN FETCH l.user JOIN FETCH l.item WHERE l.returned = false\")\n    List&lt;Loan&gt; findActiveLoansWithDetails();\n\n    // Estad\u00edsticas\n    @Query(\"SELECT COUNT(l) FROM Loan l WHERE l.loanDate &gt;= :startDate\")\n    long countLoansFromDate(@Param(\"startDate\") LocalDateTime startDate);\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#loanhistoryrepository-repositorio-de-historial","title":"\ud83d\udcca LoanHistoryRepository (Repositorio de Historial)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/repositories/LoanHistoryRepository.java</code>:</p> <pre><code>package com.example.pib2.repositories;\n\nimport com.example.pib2.models.entities.LoanHistory;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Repository\npublic interface LoanHistoryRepository extends JpaRepository&lt;LoanHistory, Long&gt; {\n\n    // ========================================\n    // CONSULTAS DERIVADAS\n    // ========================================\n\n    // Buscar historial por pr\u00e9stamo\n    List&lt;LoanHistory&gt; findByLoanId(Long loanId);\n\n    // Buscar por acci\u00f3n espec\u00edfica\n    List&lt;LoanHistory&gt; findByAction(String action);\n\n    // Buscar por rango de fechas\n    List&lt;LoanHistory&gt; findByActionDateBetween(LocalDateTime start, LocalDateTime end);\n\n    // Buscar por pr\u00e9stamo y acci\u00f3n\n    List&lt;LoanHistory&gt; findByLoanIdAndAction(Long loanId, String action);\n\n    // Buscar historial ordenado por fecha\n    List&lt;LoanHistory&gt; findByLoanIdOrderByActionDateDesc(Long loanId);\n\n    // Buscar acciones recientes\n    List&lt;LoanHistory&gt; findByActionDateAfterOrderByActionDateDesc(LocalDateTime date);\n\n    // ========================================\n    // CONSULTAS PERSONALIZADAS\n    // ========================================\n\n    @Query(\"SELECT lh FROM LoanHistory lh WHERE lh.loan.user.id = :userId ORDER BY lh.actionDate DESC\")\n    List&lt;LoanHistory&gt; findHistoryByUser(@Param(\"userId\") Long userId);\n\n    @Query(\"SELECT lh FROM LoanHistory lh WHERE lh.action = :action AND lh.actionDate &gt;= :fromDate\")\n    List&lt;LoanHistory&gt; findRecentActionHistory(@Param(\"action\") String action, @Param(\"fromDate\") LocalDateTime fromDate);\n\n    @Query(\"SELECT COUNT(lh) FROM LoanHistory lh WHERE lh.action = :action AND lh.actionDate &gt;= :fromDate\")\n    long countActionsSince(@Param(\"action\") String action, @Param(\"fromDate\") LocalDateTime fromDate);\n\n    // Auditor\u00eda completa de un pr\u00e9stamo\n    @Query(\"SELECT lh FROM LoanHistory lh JOIN FETCH lh.loan WHERE lh.loan.id = :loanId ORDER BY lh.actionDate ASC\")\n    List&lt;LoanHistory&gt; findCompleteAuditTrail(@Param(\"loanId\") Long loanId);\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#consultas-derivadas-palabras-clave","title":"\ud83d\udd0d Consultas Derivadas - Palabras Clave","text":""},{"location":"api/05-repositorios-acceso-datos/#palabras-clave-principales","title":"Palabras Clave Principales","text":"Palabra Clave Descripci\u00f3n Ejemplo <code>findBy</code> Buscar registros <code>findByUsername(String username)</code> <code>countBy</code> Contar registros <code>countByRole(String role)</code> <code>existsBy</code> Verificar existencia <code>existsByEmail(String email)</code> <code>deleteBy</code> Eliminar registros <code>deleteByUsername(String username)</code>"},{"location":"api/05-repositorios-acceso-datos/#operadores-de-comparacion","title":"Operadores de Comparaci\u00f3n","text":"Operador Descripci\u00f3n Ejemplo <code>GreaterThan</code> Mayor que <code>findByQuantityGreaterThan(int quantity)</code> <code>LessThan</code> Menor que <code>findByQuantityLessThan(int quantity)</code> <code>Between</code> Entre valores <code>findByQuantityBetween(int min, int max)</code> <code>Like</code> Coincidencia parcial <code>findByNameLike(String pattern)</code> <code>Containing</code> Contiene texto <code>findByNameContaining(String text)</code> <code>IgnoreCase</code> Ignorar may\u00fasculas <code>findByNameIgnoreCase(String name)</code> <code>OrderBy</code> Ordenar resultados <code>findByRoleOrderByUsernameAsc(String role)</code>"},{"location":"api/05-repositorios-acceso-datos/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"Operador Descripci\u00f3n Ejemplo <code>And</code> Y l\u00f3gico <code>findByUsernameAndEmail(String username, String email)</code> <code>Or</code> O l\u00f3gico <code>findByUsernameOrEmail(String username, String email)</code> <code>Not</code> Negaci\u00f3n <code>findByUsernameNot(String username)</code> <code>In</code> En lista <code>findByRoleIn(List&lt;String&gt; roles)</code> <code>NotIn</code> No en lista <code>findByRoleNotIn(List&lt;String&gt; roles)</code>"},{"location":"api/05-repositorios-acceso-datos/#consultas-personalizadas-con-query","title":"\ud83d\udcdd Consultas Personalizadas con @Query","text":""},{"location":"api/05-repositorios-acceso-datos/#jpql-java-persistence-query-language","title":"JPQL (Java Persistence Query Language)","text":"<pre><code>// Consulta JPQL b\u00e1sica\n@Query(\"SELECT u FROM User u WHERE u.role = :role\")\nList&lt;User&gt; findUsersByRole(@Param(\"role\") String role);\n\n// Consulta JPQL con JOIN\n@Query(\"SELECT l FROM Loan l JOIN FETCH l.user JOIN FETCH l.item WHERE l.returned = false\")\nList&lt;Loan&gt; findActiveLoansWithDetails();\n\n// Consulta JPQL con funciones agregadas\n@Query(\"SELECT COUNT(u) FROM User u WHERE u.role = :role\")\nlong countByRole(@Param(\"role\") String role);\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#sql-nativo","title":"SQL Nativo","text":"<pre><code>// Consulta SQL nativa\n@Query(value = \"SELECT * FROM users WHERE created_at &gt; NOW() - INTERVAL 30 DAY\", nativeQuery = true)\nList&lt;User&gt; findRecentUsers();\n\n// Consulta SQL nativa con par\u00e1metros\n@Query(value = \"SELECT AVG(quantity) FROM items WHERE name LIKE %:name%\", nativeQuery = true)\nDouble getAverageQuantityByName(@Param(\"name\") String name);\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#verificacion-de-repositorios","title":"\u2705 Verificaci\u00f3n de Repositorios","text":""},{"location":"api/05-repositorios-acceso-datos/#1-verificar-estructura-de-archivos","title":"1. Verificar Estructura de Archivos","text":"<pre><code># Verificar que los archivos existen\nls src/main/java/com/example/pib2/repositories/\n</code></pre> <p>Deber\u00edas ver: <pre><code>UserRepository.java\nItemRepository.java\nLoanRepository.java\nLoanHistoryRepository.java\n</code></pre></p>"},{"location":"api/05-repositorios-acceso-datos/#2-compilar-el-proyecto","title":"2. Compilar el Proyecto","text":"<pre><code># Compilar para verificar sintaxis\n./mvnw compile\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#3-ejecutar-la-aplicacion","title":"3. Ejecutar la Aplicaci\u00f3n","text":"<pre><code># Ejecutar la aplicaci\u00f3n\n./mvnw spring-boot:run\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#4-verificar-en-logs","title":"4. Verificar en Logs","text":"<p>Busca en los logs mensajes como: <pre><code>Hibernate: create table users (...)\nHibernate: create table items (...)\nHibernate: create table loans (...)\nHibernate: create table loan_history (...)\n</code></pre></p>"},{"location":"api/05-repositorios-acceso-datos/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/05-repositorios-acceso-datos/#error-no-qualifying-bean-of-type-repository-found","title":"Error: \"No qualifying bean of type repository found\"","text":"<p>Problema: Spring no encuentra el repositorio</p> <p>Soluci\u00f3n: <pre><code>// Agregar @Repository a la interfaz\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    // ...\n}\n\n// O habilitar escaneo de repositorios en la clase principal\n@SpringBootApplication\n@EnableJpaRepositories(\"com.example.pib2.repositories\")\npublic class Pib2Application {\n    // ...\n}\n</code></pre></p>"},{"location":"api/05-repositorios-acceso-datos/#error-invalid-derived-query","title":"Error: \"Invalid derived query\"","text":"<p>Problema: Nombre de m\u00e9todo incorrecto</p> <p>Soluci\u00f3n: <pre><code>// \u274c Incorrecto\nList&lt;User&gt; findByUserName(String username); // Campo se llama 'username', no 'userName'\n\n// \u2705 Correcto\nList&lt;User&gt; findByUsername(String username);\n</code></pre></p>"},{"location":"api/05-repositorios-acceso-datos/#error-could-not-resolve-parameter","title":"Error: \"Could not resolve parameter\"","text":"<p>Problema: Falta @Param en consulta personalizada</p> <p>Soluci\u00f3n: <pre><code>// \u274c Incorrecto\n@Query(\"SELECT u FROM User u WHERE u.role = :role\")\nList&lt;User&gt; findUsersByRole(String role);\n\n// \u2705 Correcto\n@Query(\"SELECT u FROM User u WHERE u.role = :role\")\nList&lt;User&gt; findUsersByRole(@Param(\"role\") String role);\n</code></pre></p>"},{"location":"api/05-repositorios-acceso-datos/#mejores-practicas","title":"\ud83c\udfaf Mejores Pr\u00e1cticas","text":""},{"location":"api/05-repositorios-acceso-datos/#1-nomenclatura-consistente","title":"1. Nomenclatura Consistente","text":"<pre><code>// \u2705 Bueno: Nombres descriptivos\nList&lt;User&gt; findByUsernameContainingIgnoreCase(String username);\nboolean existsByEmailAndUsernameNot(String email, String username);\n\n// \u274c Malo: Nombres ambiguos\nList&lt;User&gt; findByName(String name); // \u00bfusername o fullName?\nList&lt;User&gt; findUsers(String param); // \u00bfqu\u00e9 par\u00e1metro?\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#2-usar-optional-para-resultados-unicos","title":"2. Usar Optional para Resultados \u00danicos","text":"<pre><code>// \u2705 Bueno: Manejo seguro de nulos\nOptional&lt;User&gt; findByUsername(String username);\nOptional&lt;User&gt; findByEmail(String email);\n\n// \u274c Malo: Puede retornar null\nUser findByUsername(String username);\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#3-consultas-eficientes","title":"3. Consultas Eficientes","text":"<pre><code>// \u2705 Bueno: JOIN FETCH para evitar N+1\n@Query(\"SELECT l FROM Loan l JOIN FETCH l.user JOIN FETCH l.item\")\nList&lt;Loan&gt; findAllWithDetails();\n\n// \u274c Malo: Carga perezosa puede causar N+1\nList&lt;Loan&gt; findAll(); // Luego acceder a loan.getUser().getUsername()\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#4-validacion-de-parametros","title":"4. Validaci\u00f3n de Par\u00e1metros","text":"<pre><code>// En el servicio que usa el repositorio\npublic Optional&lt;User&gt; findByUsername(String username) {\n    if (username == null || username.trim().isEmpty()) {\n        return Optional.empty();\n    }\n    return userRepository.findByUsername(username.trim());\n}\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#5-documentacion-de-consultas-complejas","title":"5. Documentaci\u00f3n de Consultas Complejas","text":"<pre><code>/**\n * Encuentra pr\u00e9stamos vencidos que no han sido devueltos.\n * Un pr\u00e9stamo se considera vencido si la fecha de devoluci\u00f3n\n * es anterior a la fecha actual y el campo 'returned' es false.\n * \n * @param currentDate fecha actual para comparar\n * @return lista de pr\u00e9stamos vencidos\n */\n@Query(\"SELECT l FROM Loan l WHERE l.returnDate &lt; :currentDate AND l.returned = false\")\nList&lt;Loan&gt; findOverdueLoans(@Param(\"currentDate\") LocalDateTime currentDate);\n</code></pre>"},{"location":"api/05-repositorios-acceso-datos/#conceptos-clave-aprendidos","title":"\ud83d\udd11 Conceptos Clave Aprendidos","text":"<ol> <li>Spring Data JPA: Abstracci\u00f3n que simplifica el acceso a datos</li> <li>JpaRepository: Interfaz que proporciona m\u00e9todos CRUD autom\u00e1ticos</li> <li>Consultas Derivadas: Generaci\u00f3n autom\u00e1tica basada en nombres de m\u00e9todos</li> <li>@Query: Consultas personalizadas con JPQL o SQL nativo</li> <li>@Repository: Anotaci\u00f3n para marcar componentes de acceso a datos</li> <li>Optional: Manejo seguro de resultados que pueden ser nulos</li> <li>JOIN FETCH: Optimizaci\u00f3n para evitar el problema N+1</li> </ol>"},{"location":"api/05-repositorios-acceso-datos/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":"<p>En el siguiente tutorial aprender\u00e1s sobre: - Servicios y L\u00f3gica de Negocio: Implementar la capa de servicios - Inyecci\u00f3n de Dependencias: Usar repositorios en servicios - Transacciones: Gesti\u00f3n autom\u00e1tica de transacciones - Validaciones de Negocio: Reglas espec\u00edficas del dominio - Manejo de Excepciones: Gesti\u00f3n de errores en la capa de datos</p> <p>\ud83d\udcda Recursos Adicionales: - Spring Data JPA Reference - Query Methods - Custom Queries</p> <p>\ud83d\udd17 Enlaces Relacionados: - \u2190 4. DTOs y Mapeo de Datos - \u2192 6. Servicios y L\u00f3gica de Negocio - \ud83d\udccb \u00cdndice Principal</p>"},{"location":"api/06-servicios-logica-negocio/","title":"6. Servicios y L\u00f3gica de Negocio","text":""},{"location":"api/06-servicios-logica-negocio/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Entender la arquitectura de capas en Spring Boot - Implementar servicios con l\u00f3gica de negocio - Aplicar el patr\u00f3n de inyecci\u00f3n de dependencias - Manejar transacciones y operaciones complejas - Separar responsabilidades entre capas - Coordinar operaciones entre m\u00faltiples repositorios</p>"},{"location":"api/06-servicios-logica-negocio/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Entidades JPA creadas</li> <li>DTOs implementados</li> <li>Repositorios configurados</li> <li>Conocimientos b\u00e1sicos de Spring Framework</li> <li>Comprensi\u00f3n de patrones de dise\u00f1o</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#arquitectura-de-capas","title":"\ud83c\udfd7\ufe0f Arquitectura de Capas","text":""},{"location":"api/06-servicios-logica-negocio/#diagrama-de-arquitectura","title":"Diagrama de Arquitectura","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    CAPA DE PRESENTACI\u00d3N                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  UserController \u2502  \u2502  ItemController \u2502  \u2502 LoanController\u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   CAPA DE L\u00d3GICA DE NEGOCIO                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   UserService   \u2502  \u2502   ItemService   \u2502  \u2502 LoanService \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  CAPA DE ACCESO A DATOS                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 UserRepository  \u2502  \u2502 ItemRepository  \u2502  \u2502LoanRepository\u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    CAPA DE PERSISTENCIA                    \u2502\n\u2502                      (Base de Datos)                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502     users       \u2502  \u2502      items      \u2502  \u2502    loans    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#responsabilidades-por-capa","title":"Responsabilidades por Capa","text":""},{"location":"api/06-servicios-logica-negocio/#1-capa-de-presentacion-controllers","title":"1. Capa de Presentaci\u00f3n (Controllers)","text":"<ul> <li>Recibir peticiones HTTP</li> <li>Validar datos de entrada</li> <li>Convertir entre DTOs y Entidades</li> <li>Devolver respuestas HTTP</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#2-capa-de-logica-de-negocio-services","title":"2. Capa de L\u00f3gica de Negocio (Services)","text":"<ul> <li>Implementar reglas de negocio</li> <li>Coordinar operaciones entre repositorios</li> <li>Manejar transacciones</li> <li>Validaciones complejas</li> <li>Aplicar pol\u00edticas empresariales</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#3-capa-de-acceso-a-datos-repositories","title":"3. Capa de Acceso a Datos (Repositories)","text":"<ul> <li>Operaciones CRUD b\u00e1sicas</li> <li>Consultas personalizadas</li> <li>Abstracci\u00f3n de la base de datos</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#4-capa-de-persistencia-database","title":"4. Capa de Persistencia (Database)","text":"<ul> <li>Almacenamiento f\u00edsico de datos</li> <li>Integridad referencial</li> <li>\u00cdndices y optimizaciones</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#que-es-un-servicio","title":"\ud83d\udd27 \u00bfQu\u00e9 es un Servicio?","text":"<p>Un Servicio es una clase que contiene la l\u00f3gica de negocio de la aplicaci\u00f3n. Los servicios:</p>"},{"location":"api/06-servicios-logica-negocio/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Coordinan operaciones: Entre m\u00faltiples repositorios</li> <li>Implementan reglas de negocio: Validaciones espec\u00edficas del dominio</li> <li>Manejan transacciones: Operaciones at\u00f3micas</li> <li>Proporcionan API limpia: Para los controladores</li> <li>Encapsulan complejidad: Ocultan detalles de implementaci\u00f3n</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#patron-de-servicio","title":"Patr\u00f3n de Servicio","text":"<pre><code>@Service  // Marca la clase como un componente de servicio\n@Transactional  // Habilita manejo autom\u00e1tico de transacciones\npublic class UserService {\n\n    @Autowired  // Inyecci\u00f3n de dependencias\n    private UserRepository userRepository;\n\n    // M\u00e9todos que encapsulan l\u00f3gica de negocio\n    public List&lt;User&gt; findAll() {\n        return userRepository.findAll();\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#estructura-de-servicios","title":"\ud83d\udcc1 Estructura de Servicios","text":""},{"location":"api/06-servicios-logica-negocio/#crear-el-paquete","title":"Crear el Paquete","text":"<p>Primero, crea la estructura de carpetas:</p> <pre><code>src/main/java/com/example/pib2/\n\u2514\u2500\u2500 services/\n    \u251c\u2500\u2500 UserService.java\n    \u251c\u2500\u2500 ItemService.java\n    \u251c\u2500\u2500 LoanService.java\n    \u2514\u2500\u2500 LoanHistoryService.java\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#userservice-servicio-de-usuarios","title":"\ud83d\udc64 UserService (Servicio de Usuarios)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/services/UserService.java</code>:</p> <pre><code>package com.example.pib2.services;\n\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.repositories.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    // ========================================\n    // OPERACIONES B\u00c1SICAS\n    // ========================================\n\n    public List&lt;User&gt; findAll() {\n        // L\u00f3gica: Solo usuarios activos\n        return userRepository.findAll().stream()\n            .filter(user -&gt; !user.isDeleted())\n            .collect(Collectors.toList());\n    }\n\n    public Optional&lt;User&gt; findById(Long id) {\n        // L\u00f3gica: Validar que el ID no sea nulo\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"ID must be positive\");\n        }\n        return userRepository.findById(id);\n    }\n\n    public User save(User user) {\n        // L\u00f3gica de negocio: Validaciones y encriptaci\u00f3n\n        validateUser(user);\n\n        if (user.getId() == null) {\n            // Nuevo usuario: encriptar password y verificar unicidad\n            validateUniqueFields(user);\n            user.setPassword(passwordEncoder.encode(user.getPassword()));\n            user.setCreatedAt(LocalDateTime.now());\n            user.setDeleted(false);\n        } else {\n            // Actualizaci\u00f3n: mantener password si no se cambi\u00f3\n            User existing = userRepository.findById(user.getId())\n                .orElseThrow(() -&gt; new EntityNotFoundException(\"User not found\"));\n\n            if (user.getPassword() == null || user.getPassword().isEmpty()) {\n                user.setPassword(existing.getPassword());\n            } else {\n                user.setPassword(passwordEncoder.encode(user.getPassword()));\n            }\n\n            user.setCreatedAt(existing.getCreatedAt());\n            user.setUpdatedAt(LocalDateTime.now());\n        }\n\n        return userRepository.save(user);\n    }\n\n    public void deleteById(Long id) {\n        // L\u00f3gica: Verificar que no tenga pr\u00e9stamos activos\n        User user = userRepository.findById(id)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"User not found\"));\n\n        if (hasActiveLoans(user)) {\n            throw new BusinessException(\"Cannot delete user with active loans\");\n        }\n\n        // Soft delete\n        user.setDeleted(true);\n        user.setDeletedAt(LocalDateTime.now());\n        userRepository.save(user);\n    }\n\n    // ========================================\n    // L\u00d3GICA DE NEGOCIO ESPEC\u00cdFICA\n    // ========================================\n\n    public Optional&lt;User&gt; findByUsername(String username) {\n        if (username == null || username.trim().isEmpty()) {\n            return Optional.empty();\n        }\n        return userRepository.findByUsername(username.trim());\n    }\n\n    public Optional&lt;User&gt; findByEmail(String email) {\n        if (email == null || email.trim().isEmpty()) {\n            return Optional.empty();\n        }\n        return userRepository.findByEmail(email.trim().toLowerCase());\n    }\n\n    public boolean canBorrow(Long userId) {\n        User user = findById(userId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"User not found\"));\n\n        // Regla de negocio: M\u00e1ximo 3 pr\u00e9stamos activos\n        long activeLoanCount = user.getLoans().stream()\n            .filter(loan -&gt; !loan.isReturned())\n            .count();\n\n        return activeLoanCount &lt; 3;\n    }\n\n    public List&lt;User&gt; findUsersByRole(String role) {\n        if (role == null || role.trim().isEmpty()) {\n            return List.of();\n        }\n        return userRepository.findByRole(role.toUpperCase());\n    }\n\n    public long countActiveUsers() {\n        return userRepository.findAll().stream()\n            .filter(user -&gt; !user.isDeleted())\n            .count();\n    }\n\n    // ========================================\n    // M\u00c9TODOS DE VALIDACI\u00d3N PRIVADOS\n    // ========================================\n\n    private void validateUser(User user) {\n        if (user == null) {\n            throw new IllegalArgumentException(\"User cannot be null\");\n        }\n\n        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Username is required\");\n        }\n\n        if (user.getUsername().length() &lt; 3) {\n            throw new IllegalArgumentException(\"Username must be at least 3 characters\");\n        }\n\n        if (user.getEmail() == null || !isValidEmail(user.getEmail())) {\n            throw new IllegalArgumentException(\"Valid email is required\");\n        }\n\n        if (user.getPassword() == null || user.getPassword().length() &lt; 6) {\n            throw new IllegalArgumentException(\"Password must be at least 6 characters\");\n        }\n\n        if (user.getRole() == null || user.getRole().trim().isEmpty()) {\n            user.setRole(\"USER\"); // Rol por defecto\n        }\n    }\n\n    private void validateUniqueFields(User user) {\n        // Verificar username \u00fanico\n        if (userRepository.existsByUsername(user.getUsername())) {\n            throw new BusinessException(\"Username already exists\");\n        }\n\n        // Verificar email \u00fanico\n        if (userRepository.existsByEmail(user.getEmail())) {\n            throw new BusinessException(\"Email already exists\");\n        }\n    }\n\n    private boolean hasActiveLoans(User user) {\n        return user.getLoans().stream()\n            .anyMatch(loan -&gt; !loan.isReturned());\n    }\n\n    private boolean isValidEmail(String email) {\n        return email != null &amp;&amp; email.contains(\"@\") &amp;&amp; email.contains(\".\");\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#analisis-del-userservice","title":"\ud83d\udd0d An\u00e1lisis del UserService","text":""},{"location":"api/06-servicios-logica-negocio/#anotaciones-importantes","title":"Anotaciones Importantes","text":"<pre><code>@Service\n// - Marca la clase como un componente de Spring\n// - Permite la inyecci\u00f3n de dependencias\n// - Habilita la gesti\u00f3n de transacciones\n// - Facilita el testing con mocks\n\n@Transactional\n// - Habilita manejo autom\u00e1tico de transacciones\n// - Rollback autom\u00e1tico en caso de excepci\u00f3n\n// - Puede aplicarse a nivel de clase o m\u00e9todo\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#inyeccion-de-dependencias","title":"Inyecci\u00f3n de Dependencias","text":"<pre><code>@Autowired\nprivate UserRepository userRepository;\n\n@Autowired\nprivate PasswordEncoder passwordEncoder;\n\n// Spring autom\u00e1ticamente inyecta las instancias\n// No necesitas crear los objetos manualmente\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#metodos-de-servicio","title":"M\u00e9todos de Servicio","text":"M\u00e9todo Prop\u00f3sito L\u00f3gica de Negocio <code>findAll()</code> Obtener usuarios activos Filtrar usuarios eliminados <code>findById(Long id)</code> Buscar usuario espec\u00edfico Validar ID positivo <code>save(User user)</code> Crear/actualizar usuario Validaciones, encriptaci\u00f3n, unicidad <code>deleteById(Long id)</code> Eliminar usuario Verificar pr\u00e9stamos activos, soft delete <code>canBorrow(Long userId)</code> Verificar capacidad de pr\u00e9stamo L\u00edmite de 3 pr\u00e9stamos activos"},{"location":"api/06-servicios-logica-negocio/#itemservice-servicio-de-articulos","title":"\ud83d\udce6 ItemService (Servicio de Art\u00edculos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/services/ItemService.java</code>:</p> <pre><code>package com.example.pib2.services;\n\nimport com.example.pib2.models.entities.Item;\nimport com.example.pib2.repositories.ItemRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional\npublic class ItemService {\n\n    @Autowired\n    private ItemRepository itemRepository;\n\n    // ========================================\n    // OPERACIONES B\u00c1SICAS\n    // ========================================\n\n    public List&lt;Item&gt; findAll() {\n        return itemRepository.findAll();\n    }\n\n    public Optional&lt;Item&gt; findById(Long id) {\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"ID must be positive\");\n        }\n        return itemRepository.findById(id);\n    }\n\n    public Item save(Item item) {\n        validateItem(item);\n\n        if (item.getId() == null) {\n            // Nuevo item\n            validateUniqueName(item.getName());\n            item.setCreatedAt(LocalDateTime.now());\n        } else {\n            // Actualizaci\u00f3n\n            Item existing = itemRepository.findById(item.getId())\n                .orElseThrow(() -&gt; new EntityNotFoundException(\"Item not found\"));\n            item.setCreatedAt(existing.getCreatedAt());\n            item.setUpdatedAt(LocalDateTime.now());\n        }\n\n        return itemRepository.save(item);\n    }\n\n    public void deleteById(Long id) {\n        Item item = itemRepository.findById(id)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Item not found\"));\n\n        // Verificar que no est\u00e9 prestado\n        if (isCurrentlyLoaned(item)) {\n            throw new BusinessException(\"Cannot delete item that is currently loaned\");\n        }\n\n        itemRepository.deleteById(id);\n    }\n\n    // ========================================\n    // L\u00d3GICA DE NEGOCIO ESPEC\u00cdFICA\n    // ========================================\n\n    public List&lt;Item&gt; findAvailableItems() {\n        return itemRepository.findByQuantityGreaterThan(0);\n    }\n\n    public List&lt;Item&gt; findLowStockItems(int threshold) {\n        return itemRepository.findByQuantityLessThan(threshold);\n    }\n\n    public boolean isAvailable(Long itemId, int requestedQuantity) {\n        Optional&lt;Item&gt; item = itemRepository.findById(itemId);\n        return item.isPresent() &amp;&amp; item.get().getQuantity() &gt;= requestedQuantity;\n    }\n\n    public void reserveQuantity(Long itemId, int quantity) {\n        Item item = itemRepository.findById(itemId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Item not found\"));\n\n        if (item.getQuantity() &lt; quantity) {\n            throw new BusinessException(\"Insufficient quantity available. Available: \" \n                + item.getQuantity() + \", Requested: \" + quantity);\n        }\n\n        item.setQuantity(item.getQuantity() - quantity);\n        itemRepository.save(item);\n    }\n\n    public void releaseQuantity(Long itemId, int quantity) {\n        Item item = itemRepository.findById(itemId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Item not found\"));\n\n        item.setQuantity(item.getQuantity() + quantity);\n        itemRepository.save(item);\n    }\n\n    public List&lt;Item&gt; searchItems(String searchTerm) {\n        if (searchTerm == null || searchTerm.trim().isEmpty()) {\n            return findAll();\n        }\n\n        String term = searchTerm.trim().toLowerCase();\n        return itemRepository.findAll().stream()\n            .filter(item -&gt; \n                item.getName().toLowerCase().contains(term) ||\n                item.getDescription().toLowerCase().contains(term)\n            )\n            .collect(Collectors.toList());\n    }\n\n    public long getTotalInventoryValue() {\n        return itemRepository.findAll().stream()\n            .mapToLong(item -&gt; item.getQuantity())\n            .sum();\n    }\n\n    // ========================================\n    // M\u00c9TODOS DE VALIDACI\u00d3N PRIVADOS\n    // ========================================\n\n    private void validateItem(Item item) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Item cannot be null\");\n        }\n\n        if (item.getName() == null || item.getName().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Item name is required\");\n        }\n\n        if (item.getName().length() &lt; 2) {\n            throw new IllegalArgumentException(\"Item name must be at least 2 characters\");\n        }\n\n        if (item.getDescription() == null || item.getDescription().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Item description is required\");\n        }\n\n        if (item.getQuantity() &lt; 0) {\n            throw new IllegalArgumentException(\"Quantity cannot be negative\");\n        }\n    }\n\n    private void validateUniqueName(String name) {\n        if (itemRepository.existsByName(name)) {\n            throw new BusinessException(\"Item with this name already exists\");\n        }\n    }\n\n    private boolean isCurrentlyLoaned(Item item) {\n        // Verificar si el item tiene pr\u00e9stamos activos\n        return item.getLoans().stream()\n            .anyMatch(loan -&gt; !loan.isReturned());\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#loanservice-servicio-de-prestamos","title":"\ud83d\udccb LoanService (Servicio de Pr\u00e9stamos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/services/LoanService.java</code>:</p> <pre><code>package com.example.pib2.services;\n\nimport com.example.pib2.models.entities.Loan;\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.models.entities.Item;\nimport com.example.pib2.repositories.LoanRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional\npublic class LoanService {\n\n    @Autowired\n    private LoanRepository loanRepository;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private ItemService itemService;\n\n    @Autowired\n    private LoanHistoryService loanHistoryService;\n\n    // ========================================\n    // OPERACIONES B\u00c1SICAS\n    // ========================================\n\n    public List&lt;Loan&gt; findAll() {\n        return loanRepository.findAll();\n    }\n\n    public Optional&lt;Loan&gt; findById(Long id) {\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"ID must be positive\");\n        }\n        return loanRepository.findById(id);\n    }\n\n    public void deleteById(Long id) {\n        Loan loan = loanRepository.findById(id)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Loan not found\"));\n\n        if (!loan.isReturned()) {\n            throw new BusinessException(\"Cannot delete active loan\");\n        }\n\n        loanRepository.deleteById(id);\n    }\n\n    // ========================================\n    // L\u00d3GICA DE NEGOCIO COMPLEJA\n    // ========================================\n\n    public Loan createLoan(Long userId, Long itemId, LocalDateTime returnDate) {\n        // Validaciones de entrada\n        validateLoanRequest(userId, itemId, returnDate);\n\n        // Obtener entidades\n        User user = userService.findById(userId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"User not found\"));\n\n        Item item = itemService.findById(itemId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Item not found\"));\n\n        // Validaciones de negocio\n        validateLoanEligibility(user, item);\n\n        // Crear pr\u00e9stamo\n        Loan loan = new Loan();\n        loan.setUser(user);\n        loan.setItem(item);\n        loan.setLoanDate(LocalDateTime.now());\n        loan.setReturnDate(returnDate);\n        loan.setReturned(false);\n\n        // Reservar cantidad del item\n        itemService.reserveQuantity(itemId, 1);\n\n        // Guardar pr\u00e9stamo\n        Loan savedLoan = loanRepository.save(loan);\n\n        // Crear registro de historial\n        loanHistoryService.createHistory(savedLoan.getId(), \"CREATED\", \n            \"Loan created for user: \" + user.getUsername() + \", item: \" + item.getName());\n\n        return savedLoan;\n    }\n\n    public Loan returnLoan(Long loanId) {\n        Loan loan = loanRepository.findById(loanId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Loan not found\"));\n\n        if (loan.isReturned()) {\n            throw new BusinessException(\"Loan is already returned\");\n        }\n\n        // Marcar como devuelto\n        loan.setReturned(true);\n        loan.setActualReturnDate(LocalDateTime.now());\n\n        // Liberar cantidad del item\n        itemService.releaseQuantity(loan.getItem().getId(), 1);\n\n        // Guardar cambios\n        Loan savedLoan = loanRepository.save(loan);\n\n        // Crear registro de historial\n        loanHistoryService.createHistory(savedLoan.getId(), \"RETURNED\", \n            \"Loan returned by user: \" + loan.getUser().getUsername());\n\n        return savedLoan;\n    }\n\n    public List&lt;Loan&gt; findActiveLoans() {\n        return loanRepository.findByReturned(false);\n    }\n\n    public List&lt;Loan&gt; findLoansByUser(Long userId) {\n        return loanRepository.findByUserId(userId);\n    }\n\n    public List&lt;Loan&gt; findActiveLoansByUser(Long userId) {\n        return loanRepository.findByUserIdAndReturned(userId, false);\n    }\n\n    public List&lt;Loan&gt; findOverdueLoans() {\n        LocalDateTime now = LocalDateTime.now();\n        return loanRepository.findByReturnDateBeforeAndReturnedFalse(now);\n    }\n\n    public List&lt;Loan&gt; findLoansDueSoon(int days) {\n        LocalDateTime futureDate = LocalDateTime.now().plusDays(days);\n        return loanRepository.findByReturnDateBeforeAndReturnedFalse(futureDate)\n            .stream()\n            .filter(loan -&gt; loan.getReturnDate().isAfter(LocalDateTime.now()))\n            .collect(Collectors.toList());\n    }\n\n    public long countActiveLoans() {\n        return loanRepository.countByReturnedFalse();\n    }\n\n    public long countOverdueLoans() {\n        return findOverdueLoans().size();\n    }\n\n    // ========================================\n    // M\u00c9TODOS DE VALIDACI\u00d3N PRIVADOS\n    // ========================================\n\n    private void validateLoanRequest(Long userId, Long itemId, LocalDateTime returnDate) {\n        if (userId == null || userId &lt;= 0) {\n            throw new IllegalArgumentException(\"Valid user ID is required\");\n        }\n\n        if (itemId == null || itemId &lt;= 0) {\n            throw new IllegalArgumentException(\"Valid item ID is required\");\n        }\n\n        if (returnDate == null) {\n            throw new IllegalArgumentException(\"Return date is required\");\n        }\n\n        if (returnDate.isBefore(LocalDateTime.now())) {\n            throw new IllegalArgumentException(\"Return date cannot be in the past\");\n        }\n\n        // M\u00e1ximo 30 d\u00edas de pr\u00e9stamo\n        if (returnDate.isAfter(LocalDateTime.now().plusDays(30))) {\n            throw new IllegalArgumentException(\"Loan period cannot exceed 30 days\");\n        }\n    }\n\n    private void validateLoanEligibility(User user, Item item) {\n        // Verificar que el usuario puede pedir prestado\n        if (!userService.canBorrow(user.getId())) {\n            throw new BusinessException(\"User has reached maximum loan limit (3 active loans)\");\n        }\n\n        // Verificar disponibilidad del item\n        if (!itemService.isAvailable(item.getId(), 1)) {\n            throw new BusinessException(\"Item is not available for loan\");\n        }\n\n        // Verificar que el usuario no tenga pr\u00e9stamos vencidos\n        List&lt;Loan&gt; userOverdueLoans = loanRepository.findByUserId(user.getId())\n            .stream()\n            .filter(loan -&gt; !loan.isReturned() &amp;&amp; \n                loan.getReturnDate().isBefore(LocalDateTime.now()))\n            .collect(Collectors.toList());\n\n        if (!userOverdueLoans.isEmpty()) {\n            throw new BusinessException(\"User has overdue loans and cannot borrow new items\");\n        }\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#loanhistoryservice-servicio-de-historial","title":"\ud83d\udcca LoanHistoryService (Servicio de Historial)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/services/LoanHistoryService.java</code>:</p> <pre><code>package com.example.pib2.services;\n\nimport com.example.pib2.models.entities.LoanHistory;\nimport com.example.pib2.models.entities.Loan;\nimport com.example.pib2.repositories.LoanHistoryRepository;\nimport com.example.pib2.repositories.LoanRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional\npublic class LoanHistoryService {\n\n    @Autowired\n    private LoanHistoryRepository loanHistoryRepository;\n\n    @Autowired\n    private LoanRepository loanRepository;\n\n    // ========================================\n    // OPERACIONES B\u00c1SICAS\n    // ========================================\n\n    public List&lt;LoanHistory&gt; findAll() {\n        return loanHistoryRepository.findAll();\n    }\n\n    public Optional&lt;LoanHistory&gt; findById(Long id) {\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"ID must be positive\");\n        }\n        return loanHistoryRepository.findById(id);\n    }\n\n    // ========================================\n    // L\u00d3GICA DE NEGOCIO ESPEC\u00cdFICA\n    // ========================================\n\n    public LoanHistory createHistory(Long loanId, String action) {\n        return createHistory(loanId, action, null);\n    }\n\n    public LoanHistory createHistory(Long loanId, String action, String details) {\n        // Validaciones\n        if (loanId == null || loanId &lt;= 0) {\n            throw new IllegalArgumentException(\"Valid loan ID is required\");\n        }\n\n        if (action == null || action.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Action is required\");\n        }\n\n        // Verificar que el pr\u00e9stamo existe\n        Loan loan = loanRepository.findById(loanId)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"Loan not found\"));\n\n        // Crear registro de historial\n        LoanHistory history = new LoanHistory();\n        history.setLoan(loan);\n        history.setAction(action.toUpperCase());\n        history.setActionDate(LocalDateTime.now());\n        history.setDetails(details);\n\n        return loanHistoryRepository.save(history);\n    }\n\n    public List&lt;LoanHistory&gt; findHistoryByLoan(Long loanId) {\n        return loanHistoryRepository.findByLoanIdOrderByActionDateDesc(loanId);\n    }\n\n    public List&lt;LoanHistory&gt; findHistoryByAction(String action) {\n        if (action == null || action.trim().isEmpty()) {\n            return List.of();\n        }\n        return loanHistoryRepository.findByAction(action.toUpperCase());\n    }\n\n    public List&lt;LoanHistory&gt; findRecentHistory(int days) {\n        LocalDateTime fromDate = LocalDateTime.now().minusDays(days);\n        return loanHistoryRepository.findByActionDateAfterOrderByActionDateDesc(fromDate);\n    }\n\n    public List&lt;LoanHistory&gt; findHistoryByUser(Long userId) {\n        return loanHistoryRepository.findHistoryByUser(userId);\n    }\n\n    public long countActionsSince(String action, int days) {\n        LocalDateTime fromDate = LocalDateTime.now().minusDays(days);\n        return loanHistoryRepository.countActionsSince(action.toUpperCase(), fromDate);\n    }\n\n    public List&lt;LoanHistory&gt; getCompleteAuditTrail(Long loanId) {\n        return loanHistoryRepository.findCompleteAuditTrail(loanId);\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#manejo-de-transacciones","title":"\ud83d\udd04 Manejo de Transacciones","text":""},{"location":"api/06-servicios-logica-negocio/#que-son-las-transacciones","title":"\u00bfQu\u00e9 son las Transacciones?","text":"<p>Una transacci\u00f3n es una unidad de trabajo que debe ejecutarse completamente o no ejecutarse en absoluto.</p>"},{"location":"api/06-servicios-logica-negocio/#anotacion-transactional","title":"Anotaci\u00f3n @Transactional","text":"<pre><code>@Service\n@Transactional  // Nivel de clase: todas las operaciones son transaccionales\npublic class LoanService {\n\n    @Transactional(readOnly = true)  // Solo lectura: optimizaci\u00f3n\n    public List&lt;Loan&gt; findAll() {\n        return loanRepository.findAll();\n    }\n\n    @Transactional(rollbackFor = Exception.class)  // Rollback para cualquier excepci\u00f3n\n    public Loan createLoan(Long userId, Long itemId, LocalDateTime returnDate) {\n        // Si cualquier operaci\u00f3n falla, se hace rollback de todo\n        User user = userService.findById(userId).orElseThrow(...);\n        Item item = itemService.findById(itemId).orElseThrow(...);\n\n        itemService.reserveQuantity(itemId, 1);  // Operaci\u00f3n 1\n        Loan loan = loanRepository.save(newLoan);  // Operaci\u00f3n 2\n        loanHistoryService.createHistory(loan.getId(), \"CREATED\");  // Operaci\u00f3n 3\n\n        return loan;\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#propagacion-de-transacciones","title":"Propagaci\u00f3n de Transacciones","text":"<pre><code>@Transactional(propagation = Propagation.REQUIRED)  // Por defecto\npublic void method1() {\n    // Se une a transacci\u00f3n existente o crea una nueva\n}\n\n@Transactional(propagation = Propagation.REQUIRES_NEW)\npublic void method2() {\n    // Siempre crea una nueva transacci\u00f3n\n}\n\n@Transactional(propagation = Propagation.SUPPORTS)\npublic void method3() {\n    // Se ejecuta en transacci\u00f3n si existe, sino sin transacci\u00f3n\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#inyeccion-de-dependencias_1","title":"\ud83c\udfaf Inyecci\u00f3n de Dependencias","text":""},{"location":"api/06-servicios-logica-negocio/#tipos-de-inyeccion","title":"Tipos de Inyecci\u00f3n","text":""},{"location":"api/06-servicios-logica-negocio/#1-inyeccion-por-campo-field-injection","title":"1. Inyecci\u00f3n por Campo (Field Injection)","text":"<pre><code>@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;  // Inyecci\u00f3n directa\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#2-inyeccion-por-constructor-recomendada","title":"2. Inyecci\u00f3n por Constructor (Recomendada)","text":"<pre><code>@Service\npublic class UserService {\n    private final UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#3-inyeccion-por-setter","title":"3. Inyecci\u00f3n por Setter","text":"<pre><code>@Service\npublic class UserService {\n    private UserRepository userRepository;\n\n    @Autowired\n    public void setUserRepository(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#ventajas-de-la-inyeccion-por-constructor","title":"Ventajas de la Inyecci\u00f3n por Constructor","text":"<ul> <li>Inmutabilidad: Campos pueden ser <code>final</code></li> <li>Testing: F\u00e1cil inyecci\u00f3n de mocks</li> <li>Validaci\u00f3n: Falla r\u00e1pido si faltan dependencias</li> <li>Claridad: Dependencias expl\u00edcitas</li> </ul>"},{"location":"api/06-servicios-logica-negocio/#excepciones-personalizadas","title":"\ud83d\udea8 Excepciones Personalizadas","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/exceptions/BusinessException.java</code>:</p> <pre><code>package com.example.pib2.exceptions;\n\npublic class BusinessException extends RuntimeException {\n\n    public BusinessException(String message) {\n        super(message);\n    }\n\n    public BusinessException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#uso-de-excepciones-en-servicios","title":"Uso de Excepciones en Servicios","text":"<pre><code>@Service\npublic class UserService {\n\n    public User save(User user) {\n        try {\n            validateUser(user);\n            return userRepository.save(user);\n        } catch (DataIntegrityViolationException e) {\n            throw new BusinessException(\"User data violates business rules\", e);\n        } catch (Exception e) {\n            throw new BusinessException(\"Unexpected error saving user\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#verificacion-de-servicios","title":"\u2705 Verificaci\u00f3n de Servicios","text":""},{"location":"api/06-servicios-logica-negocio/#1-verificar-estructura-de-archivos","title":"1. Verificar Estructura de Archivos","text":"<pre><code># Verificar que los archivos existen\nls src/main/java/com/example/pib2/services/\n</code></pre> <p>Deber\u00edas ver: <pre><code>UserService.java\nItemService.java\nLoanService.java\nLoanHistoryService.java\n</code></pre></p>"},{"location":"api/06-servicios-logica-negocio/#2-compilar-el-proyecto","title":"2. Compilar el Proyecto","text":"<pre><code># Compilar para verificar sintaxis\n./mvnw compile\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#3-ejecutar-la-aplicacion","title":"3. Ejecutar la Aplicaci\u00f3n","text":"<pre><code># Ejecutar la aplicaci\u00f3n\n./mvnw spring-boot:run\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#4-verificar-en-logs","title":"4. Verificar en Logs","text":"<p>Busca en los logs mensajes como: <pre><code>Started Pib2Application in X.XXX seconds\nNo active profile set, falling back to default profiles: default\n</code></pre></p>"},{"location":"api/06-servicios-logica-negocio/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/06-servicios-logica-negocio/#error-circular-dependency","title":"Error: \"Circular dependency\"","text":"<p>Problema: Servicios se referencian mutuamente</p> <p>Soluci\u00f3n: <pre><code>// \u274c Problem\u00e1tico: Dependencia circular\n@Service\npublic class UserService {\n    @Autowired\n    private LoanService loanService;  // LoanService tambi\u00e9n usa UserService\n}\n\n// \u2705 Soluci\u00f3n: Usar @Lazy o reestructurar\n@Service\npublic class UserService {\n    @Autowired\n    @Lazy\n    private LoanService loanService;\n}\n</code></pre></p>"},{"location":"api/06-servicios-logica-negocio/#error-no-qualifying-bean-found","title":"Error: \"No qualifying bean found\"","text":"<p>Problema: Spring no encuentra el servicio</p> <p>Soluci\u00f3n: <pre><code>// Verificar que la clase est\u00e9 anotada\n@Service  // \u2190 Esta anotaci\u00f3n es necesaria\npublic class UserService {\n    // ...\n}\n\n// Verificar que est\u00e9 en el paquete correcto\n// com.example.pib2.services (debe estar bajo com.example.pib2)\n</code></pre></p>"},{"location":"api/06-servicios-logica-negocio/#error-transaction-rolled-back","title":"Error: \"Transaction rolled back\"","text":"<p>Problema: Excepci\u00f3n no controlada en transacci\u00f3n</p> <p>Soluci\u00f3n: <pre><code>@Transactional\npublic User save(User user) {\n    try {\n        validateUser(user);\n        return userRepository.save(user);\n    } catch (ValidationException e) {\n        // Manejar excepci\u00f3n espec\u00edfica\n        throw new BusinessException(\"Validation failed: \" + e.getMessage());\n    }\n}\n</code></pre></p>"},{"location":"api/06-servicios-logica-negocio/#mejores-practicas","title":"\ud83c\udfaf Mejores Pr\u00e1cticas","text":""},{"location":"api/06-servicios-logica-negocio/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<pre><code>// \u2705 Bueno: Cada servicio tiene una responsabilidad clara\n@Service\npublic class UserService {\n    // Solo l\u00f3gica relacionada con usuarios\n}\n\n@Service\npublic class LoanService {\n    // Solo l\u00f3gica relacionada con pr\u00e9stamos\n    @Autowired\n    private UserService userService;  // Delega validaciones de usuario\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#2-validaciones-en-capas","title":"2. Validaciones en Capas","text":"<pre><code>// Controlador: Validaciones de formato\n@PostMapping\npublic ResponseEntity&lt;User&gt; create(@Valid @RequestBody UserDTO userDTO) {\n    // @Valid valida anotaciones de Bean Validation\n}\n\n// Servicio: Validaciones de negocio\n@Service\npublic class UserService {\n    public User save(User user) {\n        validateBusinessRules(user);  // Reglas espec\u00edficas del dominio\n        return userRepository.save(user);\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#3-manejo-consistente-de-errores","title":"3. Manejo Consistente de Errores","text":"<pre><code>@Service\npublic class UserService {\n\n    public Optional&lt;User&gt; findById(Long id) {\n        if (id == null || id &lt;= 0) {\n            return Optional.empty();  // No lanzar excepci\u00f3n para casos esperados\n        }\n        return userRepository.findById(id);\n    }\n\n    public User getById(Long id) {\n        return findById(id)\n            .orElseThrow(() -&gt; new EntityNotFoundException(\"User not found with id: \" + id));\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#4-logging-apropiado","title":"4. Logging Apropiado","text":"<pre><code>@Service\n@Slf4j  // Lombok para logging\npublic class LoanService {\n\n    public Loan createLoan(Long userId, Long itemId, LocalDateTime returnDate) {\n        log.info(\"Creating loan for user {} and item {}\", userId, itemId);\n\n        try {\n            Loan loan = performLoanCreation(userId, itemId, returnDate);\n            log.info(\"Loan created successfully with id {}\", loan.getId());\n            return loan;\n        } catch (BusinessException e) {\n            log.warn(\"Business rule violation creating loan: {}\", e.getMessage());\n            throw e;\n        } catch (Exception e) {\n            log.error(\"Unexpected error creating loan\", e);\n            throw new BusinessException(\"Failed to create loan\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#5-testing-de-servicios","title":"5. Testing de Servicios","text":"<pre><code>@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private PasswordEncoder passwordEncoder;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldCreateUserSuccessfully() {\n        // Given\n        User user = new User(\"testuser\", \"test@example.com\", \"password\");\n        when(userRepository.existsByUsername(\"testuser\")).thenReturn(false);\n        when(passwordEncoder.encode(\"password\")).thenReturn(\"encoded\");\n        when(userRepository.save(any(User.class))).thenReturn(user);\n\n        // When\n        User result = userService.save(user);\n\n        // Then\n        assertThat(result).isNotNull();\n        verify(userRepository).save(user);\n    }\n}\n</code></pre>"},{"location":"api/06-servicios-logica-negocio/#conceptos-clave-aprendidos","title":"\ud83d\udd11 Conceptos Clave Aprendidos","text":"<ol> <li>Servicios: Capa que contiene la l\u00f3gica de negocio</li> <li>@Service: Anotaci\u00f3n para marcar componentes de servicio</li> <li>@Transactional: Manejo autom\u00e1tico de transacciones</li> <li>Inyecci\u00f3n de Dependencias: Inversi\u00f3n de control con Spring</li> <li>Separaci\u00f3n de Responsabilidades: Cada capa tiene un prop\u00f3sito espec\u00edfico</li> <li>Validaciones de Negocio: Reglas espec\u00edficas del dominio</li> <li>Coordinaci\u00f3n de Servicios: Orquestaci\u00f3n de operaciones complejas</li> <li>Manejo de Excepciones: Gesti\u00f3n consistente de errores</li> </ol>"},{"location":"api/06-servicios-logica-negocio/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":"<p>En el siguiente tutorial aprender\u00e1s sobre: - Controladores REST: Crear APIs para exponer servicios - DTOs en Controladores: Conversi\u00f3n entre DTOs y entidades - Validaci\u00f3n de Entrada: Bean Validation en endpoints - Manejo de Respuestas: ResponseEntity y c\u00f3digos de estado - Documentaci\u00f3n de APIs: Swagger/OpenAPI</p> <p>\ud83d\udcda Recursos Adicionales: - Spring Framework Reference - Spring Boot Features - Transaction Management</p> <p>\ud83d\udd17 Enlaces Relacionados: - \u2190 5. Repositorios y Acceso a Datos - \u2192 7. Controladores REST - \ud83d\udccb \u00cdndice Principal</p>"},{"location":"api/07-controladores-rest/","title":"7. Controladores REST","text":""},{"location":"api/07-controladores-rest/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Entender los fundamentos de REST y HTTP - Crear controladores REST con Spring Boot - Implementar endpoints CRUD completos - Manejar c\u00f3digos de estado HTTP apropiados - Usar anotaciones de Spring Web - Convertir entre DTOs y entidades en controladores - Manejar par\u00e1metros de ruta y cuerpo de peticiones - Implementar respuestas HTTP estructuradas</p>"},{"location":"api/07-controladores-rest/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Servicios implementados</li> <li>DTOs creados</li> <li>Conocimientos b\u00e1sicos de HTTP</li> <li>Comprensi\u00f3n de JSON</li> </ul>"},{"location":"api/07-controladores-rest/#fundamentos-de-rest","title":"\ud83c\udf10 Fundamentos de REST","text":""},{"location":"api/07-controladores-rest/#que-es-rest","title":"\u00bfQu\u00e9 es REST?","text":"<p>REST (Representational State Transfer) es un estilo arquitect\u00f3nico para servicios web que utiliza HTTP de manera est\u00e1ndar.</p>"},{"location":"api/07-controladores-rest/#principios-rest","title":"Principios REST","text":"<ol> <li>Stateless: Cada petici\u00f3n contiene toda la informaci\u00f3n necesaria</li> <li>Client-Server: Separaci\u00f3n clara entre cliente y servidor</li> <li>Cacheable: Las respuestas pueden ser cacheadas</li> <li>Uniform Interface: Interfaz uniforme para todas las operaciones</li> <li>Layered System: Arquitectura en capas</li> </ol>"},{"location":"api/07-controladores-rest/#metodos-http-y-operaciones-crud","title":"M\u00e9todos HTTP y Operaciones CRUD","text":"M\u00e9todo HTTP Operaci\u00f3n CRUD Prop\u00f3sito Ejemplo <code>GET</code> Read Obtener recursos <code>GET /api/users</code> <code>POST</code> Create Crear nuevo recurso <code>POST /api/users</code> <code>PUT</code> Update Actualizar recurso completo <code>PUT /api/users/1</code> <code>PATCH</code> Update Actualizar recurso parcial <code>PATCH /api/users/1</code> <code>DELETE</code> Delete Eliminar recurso <code>DELETE /api/users/1</code>"},{"location":"api/07-controladores-rest/#codigos-de-estado-http","title":"C\u00f3digos de Estado HTTP","text":""},{"location":"api/07-controladores-rest/#codigos-de-exito-2xx","title":"C\u00f3digos de \u00c9xito (2xx)","text":"C\u00f3digo Nombre Cu\u00e1ndo usar <code>200</code> OK Operaci\u00f3n exitosa con datos <code>201</code> Created Recurso creado exitosamente <code>204</code> No Content Operaci\u00f3n exitosa sin datos"},{"location":"api/07-controladores-rest/#codigos-de-error-del-cliente-4xx","title":"C\u00f3digos de Error del Cliente (4xx)","text":"C\u00f3digo Nombre Cu\u00e1ndo usar <code>400</code> Bad Request Datos inv\u00e1lidos <code>404</code> Not Found Recurso no encontrado <code>409</code> Conflict Conflicto de datos"},{"location":"api/07-controladores-rest/#codigos-de-error-del-servidor-5xx","title":"C\u00f3digos de Error del Servidor (5xx)","text":"C\u00f3digo Nombre Cu\u00e1ndo usar <code>500</code> Internal Server Error Error interno"},{"location":"api/07-controladores-rest/#arquitectura-de-controladores","title":"\ud83c\udfd7\ufe0f Arquitectura de Controladores","text":""},{"location":"api/07-controladores-rest/#flujo-de-una-peticion-rest","title":"Flujo de una Petici\u00f3n REST","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    PETICI\u00d3N HTTP                           \u2502\n\u2502  GET /api/users/1                                          \u2502\n\u2502  Content-Type: application/json                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 SPRING DISPATCHER                          \u2502\n\u2502  - Enrutamiento de peticiones                              \u2502\n\u2502  - Deserializaci\u00f3n JSON \u2192 DTO                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   CONTROLADOR                              \u2502\n\u2502  @GetMapping(\"/{id}\")                                      \u2502\n\u2502  public ResponseEntity&lt;UserDTO&gt; getById(@PathVariable...)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    SERVICIO                                \u2502\n\u2502  userService.findById(id)                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  REPOSITORIO                               \u2502\n\u2502  userRepository.findById(id)                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 BASE DE DATOS                              \u2502\n\u2502  SELECT * FROM users WHERE id = ?                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 RESPUESTA HTTP                             \u2502\n\u2502  HTTP/1.1 200 OK                                          \u2502\n\u2502  Content-Type: application/json                            \u2502\n\u2502  {\"id\":1,\"username\":\"john\",\"email\":\"john@example.com\"}    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api/07-controladores-rest/#responsabilidades-del-controlador","title":"Responsabilidades del Controlador","text":"<ol> <li>Recibir peticiones HTTP: Endpoints y par\u00e1metros</li> <li>Validar entrada: Datos de entrada v\u00e1lidos</li> <li>Convertir DTOs: Entre DTOs y entidades</li> <li>Llamar servicios: Delegar l\u00f3gica de negocio</li> <li>Manejar respuestas: C\u00f3digos de estado apropiados</li> <li>Serializar salida: Entidades a JSON</li> </ol>"},{"location":"api/07-controladores-rest/#anotaciones-de-spring-web","title":"\ud83d\udd27 Anotaciones de Spring Web","text":""},{"location":"api/07-controladores-rest/#anotaciones-de-clase","title":"Anotaciones de Clase","text":""},{"location":"api/07-controladores-rest/#restcontroller","title":"@RestController","text":"<pre><code>@RestController  // Combina @Controller + @ResponseBody\npublic class UserController {\n    // Todos los m\u00e9todos devuelven JSON autom\u00e1ticamente\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#requestmapping","title":"@RequestMapping","text":"<pre><code>@RestController\n@RequestMapping(\"/api/users\")  // Prefijo para todos los endpoints\npublic class UserController {\n    // Todos los endpoints empiezan con /api/users\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#anotaciones-de-metodo","title":"Anotaciones de M\u00e9todo","text":""},{"location":"api/07-controladores-rest/#metodos-http","title":"M\u00e9todos HTTP","text":"<pre><code>@GetMapping          // GET requests\n@PostMapping         // POST requests\n@PutMapping          // PUT requests\n@PatchMapping        // PATCH requests\n@DeleteMapping       // DELETE requests\n</code></pre>"},{"location":"api/07-controladores-rest/#parametros","title":"Par\u00e1metros","text":"<pre><code>@PathVariable        // Variables en la URL: /users/{id}\n@RequestBody         // Cuerpo de la petici\u00f3n (JSON)\n@RequestParam        // Par\u00e1metros de consulta: ?name=value\n@RequestHeader       // Headers HTTP\n</code></pre>"},{"location":"api/07-controladores-rest/#usercontroller-controlador-de-usuarios","title":"\ud83d\udc64 UserController (Controlador de Usuarios)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/controllers/UserController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.models.dtos.UserDTO;\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.servicios.UserService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    // M\u00e9todo para convertir Entity a DTO\n    private UserDTO toDTO(User user) {\n        UserDTO dto = new UserDTO();\n        dto.setId(user.getId());\n        dto.setUsername(user.getUsername());\n        dto.setEmail(user.getEmail());\n        // NO incluimos password por seguridad\n        return dto;\n    }\n\n    // M\u00e9todo para convertir DTO a Entity\n    private User toEntity(UserDTO dto) {\n        User user = new User();\n        user.setId(dto.getId());\n        user.setUsername(dto.getUsername());\n        user.setEmail(dto.getEmail());\n        // password y role se manejan por separado\n        return user;\n    }\n\n    // GET /api/users - Obtener todos los usuarios\n    @GetMapping\n    public List&lt;UserDTO&gt; getAll() {\n        return userService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n    }\n\n    // GET /api/users/{id} - Obtener usuario por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n        return userService.findById(id)\n                .map(user -&gt; ResponseEntity.ok(toDTO(user)))\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // POST /api/users - Crear nuevo usuario\n    @PostMapping\n    public UserDTO create(@RequestBody UserDTO userDTO) {\n        User user = toEntity(userDTO);\n        User saved = userService.save(user);\n        return toDTO(saved);\n    }\n\n    // PUT /api/users/{id} - Actualizar usuario\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; update(@PathVariable Long id, @RequestBody UserDTO userDTO) {\n        return userService.findById(id)\n                .map(existing -&gt; {\n                    userDTO.setId(id);  // Asegurar que el ID coincida\n                    User updated = toEntity(userDTO);\n                    User saved = userService.save(updated);\n                    return ResponseEntity.ok(toDTO(saved));\n                })\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // DELETE /api/users/{id} - Eliminar usuario\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        if (userService.findById(id).isPresent()) {\n            userService.deleteById(id);\n            return ResponseEntity.noContent().build();  // 204 No Content\n        }\n        return ResponseEntity.notFound().build();  // 404 Not Found\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#analisis-del-usercontroller","title":"\ud83d\udd0d An\u00e1lisis del UserController","text":""},{"location":"api/07-controladores-rest/#estructura-del-controlador","title":"Estructura del Controlador","text":"<pre><code>@RestController  // 1. Marca como controlador REST\n@RequestMapping(\"/api/users\")  // 2. Prefijo base para todos los endpoints\npublic class UserController {\n\n    @Autowired  // 3. Inyecci\u00f3n del servicio\n    private UserService userService;\n\n    // 4. M\u00e9todos de conversi\u00f3n\n    private UserDTO toDTO(User user) { ... }\n    private User toEntity(UserDTO dto) { ... }\n\n    // 5. Endpoints CRUD\n    @GetMapping\n    public List&lt;UserDTO&gt; getAll() { ... }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) { ... }\n\n    // ... m\u00e1s endpoints\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#endpoints-implementados","title":"Endpoints Implementados","text":"Endpoint M\u00e9todo Descripci\u00f3n Respuesta <code>GET /api/users</code> <code>getAll()</code> Lista todos los usuarios <code>200 OK</code> + Lista <code>GET /api/users/{id}</code> <code>getById()</code> Usuario espec\u00edfico <code>200 OK</code> o <code>404 Not Found</code> <code>POST /api/users</code> <code>create()</code> Crear usuario <code>200 OK</code> + Usuario creado <code>PUT /api/users/{id}</code> <code>update()</code> Actualizar usuario <code>200 OK</code> o <code>404 Not Found</code> <code>DELETE /api/users/{id}</code> <code>delete()</code> Eliminar usuario <code>204 No Content</code> o <code>404 Not Found</code>"},{"location":"api/07-controladores-rest/#uso-de-responseentity","title":"Uso de ResponseEntity","text":"<pre><code>// \u2705 Bueno: Control expl\u00edcito del c\u00f3digo de estado\n@GetMapping(\"/{id}\")\npublic ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n    return userService.findById(id)\n            .map(user -&gt; ResponseEntity.ok(toDTO(user)))        // 200 OK\n            .orElse(ResponseEntity.notFound().build());         // 404 Not Found\n}\n\n// \u2705 Tambi\u00e9n bueno: Retorno directo para casos simples\n@GetMapping\npublic List&lt;UserDTO&gt; getAll() {\n    return userService.findAll().stream()\n            .map(this::toDTO)\n            .collect(Collectors.toList());\n    // Spring autom\u00e1ticamente devuelve 200 OK\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#conversion-dto-entity","title":"Conversi\u00f3n DTO \u2194 Entity","text":"<pre><code>// Entity \u2192 DTO (para respuestas)\nprivate UserDTO toDTO(User user) {\n    UserDTO dto = new UserDTO();\n    dto.setId(user.getId());\n    dto.setUsername(user.getUsername());\n    dto.setEmail(user.getEmail());\n    // \u26a0\ufe0f NO incluir password por seguridad\n    return dto;\n}\n\n// DTO \u2192 Entity (para peticiones)\nprivate User toEntity(UserDTO dto) {\n    User user = new User();\n    user.setId(dto.getId());\n    user.setUsername(dto.getUsername());\n    user.setEmail(dto.getEmail());\n    // \u26a0\ufe0f password se maneja por separado\n    return user;\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#itemcontroller-controlador-de-articulos","title":"\ud83d\udce6 ItemController (Controlador de Art\u00edculos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/controllers/ItemController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.models.dtos.ItemDTO;\nimport com.example.pib2.models.entities.Item;\nimport com.example.pib2.servicios.ItemService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/items\")\npublic class ItemController {\n    @Autowired\n    private ItemService itemService;\n\n    // Conversi\u00f3n Entity \u2192 DTO\n    private ItemDTO toDTO(Item item) {\n        ItemDTO dto = new ItemDTO();\n        dto.setId(item.getId());\n        dto.setName(item.getName());\n        dto.setDescription(item.getDescription());\n        dto.setQuantity(item.getQuantity());\n        return dto;\n    }\n\n    // Conversi\u00f3n DTO \u2192 Entity\n    private Item toEntity(ItemDTO dto) {\n        Item item = new Item();\n        item.setId(dto.getId());\n        item.setName(dto.getName());\n        item.setDescription(dto.getDescription());\n        item.setQuantity(dto.getQuantity());\n        return item;\n    }\n\n    // GET /api/items - Obtener todos los art\u00edculos\n    @GetMapping\n    public List&lt;ItemDTO&gt; getAll() {\n        return itemService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n    }\n\n    // GET /api/items/{id} - Obtener art\u00edculo por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;ItemDTO&gt; getById(@PathVariable Long id) {\n        return itemService.findById(id)\n                .map(item -&gt; ResponseEntity.ok(toDTO(item)))\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // POST /api/items - Crear nuevo art\u00edculo\n    @PostMapping\n    public ItemDTO create(@RequestBody ItemDTO itemDTO) {\n        Item item = toEntity(itemDTO);\n        Item saved = itemService.save(item);\n        return toDTO(saved);\n    }\n\n    // PUT /api/items/{id} - Actualizar art\u00edculo\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;ItemDTO&gt; update(@PathVariable Long id, @RequestBody ItemDTO itemDTO) {\n        return itemService.findById(id)\n                .map(existing -&gt; {\n                    itemDTO.setId(id);\n                    Item updated = toEntity(itemDTO);\n                    Item saved = itemService.save(updated);\n                    return ResponseEntity.ok(toDTO(saved));\n                })\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // DELETE /api/items/{id} - Eliminar art\u00edculo\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        if (itemService.findById(id).isPresent()) {\n            itemService.deleteById(id);\n            return ResponseEntity.noContent().build();\n        }\n        return ResponseEntity.notFound().build();\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#caracteristicas-del-itemcontroller","title":"\ud83d\udd0d Caracter\u00edsticas del ItemController","text":""},{"location":"api/07-controladores-rest/#endpoints-de-inventario","title":"Endpoints de Inventario","text":"Endpoint Funcionalidad Ejemplo de Uso <code>GET /api/items</code> Listar inventario Ver todos los art\u00edculos disponibles <code>GET /api/items/1</code> Ver art\u00edculo espec\u00edfico Detalles de un producto <code>POST /api/items</code> Agregar al inventario Nuevo producto en stock <code>PUT /api/items/1</code> Actualizar inventario Cambiar cantidad o descripci\u00f3n <code>DELETE /api/items/1</code> Remover del inventario Descontinuar producto"},{"location":"api/07-controladores-rest/#ejemplo-de-peticiones","title":"Ejemplo de Peticiones","text":"<pre><code># Crear nuevo art\u00edculo\ncurl -X POST http://localhost:8080/api/items \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Laptop Dell\",\n    \"description\": \"Laptop para desarrollo\",\n    \"quantity\": 5\n  }'\n\n# Actualizar cantidad\ncurl -X PUT http://localhost:8080/api/items/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Laptop Dell\",\n    \"description\": \"Laptop para desarrollo\",\n    \"quantity\": 3\n  }'\n</code></pre>"},{"location":"api/07-controladores-rest/#loancontroller-controlador-de-prestamos","title":"\ud83d\udccb LoanController (Controlador de Pr\u00e9stamos)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/controllers/LoanController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.models.dtos.LoanDTO;\nimport com.example.pib2.models.entities.Loan;\nimport com.example.pib2.models.entities.Item;\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.servicios.LoanService;\nimport com.example.pib2.servicios.ItemService;\nimport com.example.pib2.servicios.UserService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/loans\")\npublic class LoanController {\n    @Autowired\n    private LoanService loanService;\n    @Autowired\n    private ItemService itemService;\n    @Autowired\n    private UserService userService;\n\n    // Conversi\u00f3n Entity \u2192 DTO (con relaciones)\n    private LoanDTO toDTO(Loan loan) {\n        LoanDTO dto = new LoanDTO();\n        dto.setId(loan.getId());\n        // Convertir objetos relacionados a IDs\n        dto.setItemId(loan.getItem() != null ? loan.getItem().getId() : null);\n        dto.setUserId(loan.getUser() != null ? loan.getUser().getId() : null);\n        dto.setLoanDate(loan.getLoanDate());\n        dto.setReturnDate(loan.getReturnDate());\n        dto.setReturned(loan.isReturned());\n        return dto;\n    }\n\n    // Conversi\u00f3n DTO \u2192 Entity (con validaci\u00f3n de relaciones)\n    private Loan toEntity(LoanDTO dto) {\n        Loan loan = new Loan();\n        loan.setId(dto.getId());\n\n        // Resolver relaciones por ID\n        if (dto.getItemId() != null) {\n            Optional&lt;Item&gt; item = itemService.findById(dto.getItemId());\n            item.ifPresent(loan::setItem);\n        }\n\n        if (dto.getUserId() != null) {\n            Optional&lt;User&gt; user = userService.findById(dto.getUserId());\n            user.ifPresent(loan::setUser);\n        }\n\n        loan.setLoanDate(dto.getLoanDate());\n        loan.setReturnDate(dto.getReturnDate());\n        loan.setReturned(dto.isReturned());\n        return loan;\n    }\n\n    // GET /api/loans - Obtener todos los pr\u00e9stamos\n    @GetMapping\n    public List&lt;LoanDTO&gt; getAll() {\n        return loanService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n    }\n\n    // GET /api/loans/{id} - Obtener pr\u00e9stamo por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;LoanDTO&gt; getById(@PathVariable Long id) {\n        return loanService.findById(id)\n                .map(loan -&gt; ResponseEntity.ok(toDTO(loan)))\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // POST /api/loans - Crear nuevo pr\u00e9stamo\n    @PostMapping\n    public LoanDTO create(@RequestBody LoanDTO loanDTO) {\n        Loan loan = toEntity(loanDTO);\n        Loan saved = loanService.save(loan);\n        return toDTO(saved);\n    }\n\n    // PUT /api/loans/{id} - Actualizar pr\u00e9stamo\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;LoanDTO&gt; update(@PathVariable Long id, @RequestBody LoanDTO loanDTO) {\n        return loanService.findById(id)\n                .map(existing -&gt; {\n                    loanDTO.setId(id);\n                    Loan updated = toEntity(loanDTO);\n                    Loan saved = loanService.save(updated);\n                    return ResponseEntity.ok(toDTO(saved));\n                })\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // DELETE /api/loans/{id} - Eliminar pr\u00e9stamo\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        if (loanService.findById(id).isPresent()) {\n            loanService.deleteById(id);\n            return ResponseEntity.noContent().build();\n        }\n        return ResponseEntity.notFound().build();\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#caracteristicas-del-loancontroller","title":"\ud83d\udd0d Caracter\u00edsticas del LoanController","text":""},{"location":"api/07-controladores-rest/#manejo-de-relaciones","title":"Manejo de Relaciones","text":"<p>El <code>LoanController</code> es m\u00e1s complejo porque maneja relaciones entre entidades:</p> <pre><code>// DTO usa IDs para las relaciones\npublic class LoanDTO {\n    private Long id;\n    private Long itemId;    // \u2190 ID del art\u00edculo\n    private Long userId;    // \u2190 ID del usuario\n    private LocalDate loanDate;\n    private LocalDate returnDate;\n    private boolean returned;\n}\n\n// Entity usa objetos completos\npublic class Loan {\n    private Long id;\n    private Item item;      // \u2190 Objeto completo\n    private User user;      // \u2190 Objeto completo\n    private LocalDate loanDate;\n    private LocalDate returnDate;\n    private boolean returned;\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#conversion-con-validacion","title":"Conversi\u00f3n con Validaci\u00f3n","text":"<pre><code>private Loan toEntity(LoanDTO dto) {\n    Loan loan = new Loan();\n    loan.setId(dto.getId());\n\n    // \u2705 Validar que el art\u00edculo existe\n    if (dto.getItemId() != null) {\n        Optional&lt;Item&gt; item = itemService.findById(dto.getItemId());\n        if (item.isPresent()) {\n            loan.setItem(item.get());\n        } else {\n            // Podr\u00edas lanzar una excepci\u00f3n aqu\u00ed\n            throw new EntityNotFoundException(\"Item not found: \" + dto.getItemId());\n        }\n    }\n\n    // \u2705 Validar que el usuario existe\n    if (dto.getUserId() != null) {\n        Optional&lt;User&gt; user = userService.findById(dto.getUserId());\n        if (user.isPresent()) {\n            loan.setUser(user.get());\n        } else {\n            throw new EntityNotFoundException(\"User not found: \" + dto.getUserId());\n        }\n    }\n\n    return loan;\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#ejemplo-de-peticiones_1","title":"Ejemplo de Peticiones","text":"<pre><code># Crear pr\u00e9stamo\ncurl -X POST http://localhost:8080/api/loans \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"itemId\": 1,\n    \"userId\": 1,\n    \"loanDate\": \"2024-01-15\",\n    \"returnDate\": \"2024-01-22\",\n    \"returned\": false\n  }'\n\n# Marcar como devuelto\ncurl -X PUT http://localhost:8080/api/loans/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"itemId\": 1,\n    \"userId\": 1,\n    \"loanDate\": \"2024-01-15\",\n    \"returnDate\": \"2024-01-20\",\n    \"returned\": true\n  }'\n</code></pre>"},{"location":"api/07-controladores-rest/#loanhistorycontroller-controlador-de-historial","title":"\ud83d\udcca LoanHistoryController (Controlador de Historial)","text":"<p>Crea el archivo <code>src/main/java/com/example/pib2/controllers/LoanHistoryController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.models.dtos.LoanHistoryDTO;\nimport com.example.pib2.models.entities.LoanHistory;\nimport com.example.pib2.models.entities.Loan;\nimport com.example.pib2.servicios.LoanHistoryService;\nimport com.example.pib2.servicios.LoanService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/loanhistories\")\npublic class LoanHistoryController {\n    @Autowired\n    private LoanHistoryService loanHistoryService;\n    @Autowired\n    private LoanService loanService;\n\n    // Conversi\u00f3n Entity \u2192 DTO\n    private LoanHistoryDTO toDTO(LoanHistory history) {\n        LoanHistoryDTO dto = new LoanHistoryDTO();\n        dto.setId(history.getId());\n        dto.setLoanId(history.getLoan() != null ? history.getLoan().getId() : null);\n        dto.setActionDate(history.getActionDate());\n        dto.setAction(history.getAction());\n        return dto;\n    }\n\n    // Conversi\u00f3n DTO \u2192 Entity\n    private LoanHistory toEntity(LoanHistoryDTO dto) {\n        LoanHistory history = new LoanHistory();\n        history.setId(dto.getId());\n\n        if (dto.getLoanId() != null) {\n            Optional&lt;Loan&gt; loan = loanService.findById(dto.getLoanId());\n            loan.ifPresent(history::setLoan);\n        }\n\n        history.setActionDate(dto.getActionDate());\n        history.setAction(dto.getAction());\n        return history;\n    }\n\n    // GET /api/loanhistories - Obtener todo el historial\n    @GetMapping\n    public List&lt;LoanHistoryDTO&gt; getAll() {\n        return loanHistoryService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n    }\n\n    // GET /api/loanhistories/{id} - Obtener historial por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;LoanHistoryDTO&gt; getById(@PathVariable Long id) {\n        return loanHistoryService.findById(id)\n                .map(history -&gt; ResponseEntity.ok(toDTO(history)))\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // POST /api/loanhistories - Crear registro de historial\n    @PostMapping\n    public LoanHistoryDTO create(@RequestBody LoanHistoryDTO loanHistoryDTO) {\n        LoanHistory history = toEntity(loanHistoryDTO);\n        LoanHistory saved = loanHistoryService.save(history);\n        return toDTO(saved);\n    }\n\n    // PUT /api/loanhistories/{id} - Actualizar historial\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;LoanHistoryDTO&gt; update(@PathVariable Long id, @RequestBody LoanHistoryDTO loanHistoryDTO) {\n        return loanHistoryService.findById(id)\n                .map(existing -&gt; {\n                    loanHistoryDTO.setId(id);\n                    LoanHistory updated = toEntity(loanHistoryDTO);\n                    LoanHistory saved = loanHistoryService.save(updated);\n                    return ResponseEntity.ok(toDTO(saved));\n                })\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    // DELETE /api/loanhistories/{id} - Eliminar registro de historial\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        if (loanHistoryService.findById(id).isPresent()) {\n            loanHistoryService.deleteById(id);\n            return ResponseEntity.noContent().build();\n        }\n        return ResponseEntity.notFound().build();\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#caracteristicas-del-loanhistorycontroller","title":"\ud83d\udd0d Caracter\u00edsticas del LoanHistoryController","text":""},{"location":"api/07-controladores-rest/#proposito-de-auditoria","title":"Prop\u00f3sito de Auditor\u00eda","text":"<p>El <code>LoanHistoryController</code> maneja el historial de acciones sobre pr\u00e9stamos:</p> <pre><code>// Ejemplo de registros de historial\n{\n  \"id\": 1,\n  \"loanId\": 5,\n  \"actionDate\": \"2024-01-15T10:30:00\",\n  \"action\": \"PRESTAMO_CREADO\"\n}\n\n{\n  \"id\": 2,\n  \"loanId\": 5,\n  \"actionDate\": \"2024-01-20T14:15:00\",\n  \"action\": \"PRESTAMO_DEVUELTO\"\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#tipos-de-acciones-comunes","title":"Tipos de Acciones Comunes","text":"Acci\u00f3n Descripci\u00f3n Cu\u00e1ndo se crea <code>PRESTAMO_CREADO</code> Pr\u00e9stamo inicial Al crear pr\u00e9stamo <code>PRESTAMO_MODIFICADO</code> Cambio en fechas Al actualizar pr\u00e9stamo <code>PRESTAMO_DEVUELTO</code> Devoluci\u00f3n Al marcar como devuelto <code>PRESTAMO_VENCIDO</code> Pr\u00e9stamo vencido Proceso autom\u00e1tico"},{"location":"api/07-controladores-rest/#estructura-de-directorios","title":"\ud83d\udcc1 Estructura de Directorios","text":"<p>Organiza tus controladores:</p> <pre><code>src/main/java/com/example/pib2/\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 UserController.java\n\u2502   \u251c\u2500\u2500 ItemController.java\n\u2502   \u251c\u2500\u2500 LoanController.java\n\u2502   \u2514\u2500\u2500 LoanHistoryController.java\n\u251c\u2500\u2500 servicios/\n\u251c\u2500\u2500 repositories/\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2514\u2500\u2500 dtos/\n\u2514\u2500\u2500 Pib2Application.java\n</code></pre>"},{"location":"api/07-controladores-rest/#configuracion-avanzada","title":"\ud83d\udd27 Configuraci\u00f3n Avanzada","text":""},{"location":"api/07-controladores-rest/#cors-cross-origin-resource-sharing","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>Para permitir peticiones desde el frontend:</p> <pre><code>@RestController\n@RequestMapping(\"/api/users\")\n@CrossOrigin(origins = \"http://localhost:3000\")  // React app\npublic class UserController {\n    // endpoints...\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#configuracion-global-de-cors","title":"Configuraci\u00f3n Global de CORS","text":"<pre><code>@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/api/**\")\n                .allowedOrigins(\"http://localhost:3000\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true);\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#content-negotiation","title":"Content Negotiation","text":"<pre><code>@GetMapping(value = \"/{id}\", produces = {\"application/json\", \"application/xml\"})\npublic ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n    // Spring autom\u00e1ticamente serializa seg\u00fan el Accept header\n    return userService.findById(id)\n            .map(user -&gt; ResponseEntity.ok(toDTO(user)))\n            .orElse(ResponseEntity.notFound().build());\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#verificacion-de-controladores","title":"\u2705 Verificaci\u00f3n de Controladores","text":""},{"location":"api/07-controladores-rest/#1-compilar-el-proyecto","title":"1. Compilar el Proyecto","text":"<pre><code>./mvnw clean compile\n</code></pre>"},{"location":"api/07-controladores-rest/#2-ejecutar-la-aplicacion","title":"2. Ejecutar la Aplicaci\u00f3n","text":"<pre><code>./mvnw spring-boot:run\n</code></pre>"},{"location":"api/07-controladores-rest/#3-verificar-endpoints","title":"3. Verificar Endpoints","text":"<p>Usa el script de pruebas incluido en el proyecto:</p> <pre><code># En Windows PowerShell\n.\\test-endpoints.ps1\n</code></pre>"},{"location":"api/07-controladores-rest/#4-pruebas-manuales-con-curl","title":"4. Pruebas Manuales con curl","text":"<pre><code># Listar usuarios\ncurl http://localhost:8080/api/users\n\n# Crear usuario\ncurl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"test\",\"email\":\"test@example.com\"}'\n\n# Obtener usuario por ID\ncurl http://localhost:8080/api/users/1\n\n# Actualizar usuario\ncurl -X PUT http://localhost:8080/api/users/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"updated\",\"email\":\"updated@example.com\"}'\n\n# Eliminar usuario\ncurl -X DELETE http://localhost:8080/api/users/1\n</code></pre>"},{"location":"api/07-controladores-rest/#5-verificar-respuestas","title":"5. Verificar Respuestas","text":""},{"location":"api/07-controladores-rest/#respuesta-exitosa-200-ok","title":"Respuesta Exitosa (200 OK)","text":"<pre><code>{\n  \"id\": 1,\n  \"username\": \"john\",\n  \"email\": \"john@example.com\"\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#recurso-no-encontrado-404-not-found","title":"Recurso No Encontrado (404 Not Found)","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00.000+00:00\",\n  \"status\": 404,\n  \"error\": \"Not Found\",\n  \"path\": \"/api/users/999\"\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/07-controladores-rest/#error-404-not-found-en-todos-los-endpoints","title":"Error: \"404 Not Found\" en todos los endpoints","text":"<p>Causa: Controlador no est\u00e1 siendo detectado por Spring</p> <p>Soluci\u00f3n: Verificar que el controlador est\u00e9 en el package correcto <pre><code>// \u2705 Correcto\npackage com.example.pib2.controllers;\n\n// \u274c Incorrecto\npackage com.other.package.controllers;\n</code></pre></p>"},{"location":"api/07-controladores-rest/#error-405-method-not-allowed","title":"Error: \"405 Method Not Allowed\"","text":"<p>Causa: M\u00e9todo HTTP incorrecto</p> <p>Soluci\u00f3n: Verificar anotaciones de mapeo <pre><code>// \u2705 Correcto\n@PostMapping  // Para crear\npublic UserDTO create(@RequestBody UserDTO userDTO) { }\n\n// \u274c Incorrecto\n@GetMapping   // GET no es para crear\npublic UserDTO create(@RequestBody UserDTO userDTO) { }\n</code></pre></p>"},{"location":"api/07-controladores-rest/#error-400-bad-request-con-json","title":"Error: \"400 Bad Request\" con JSON","text":"<p>Causa: JSON malformado o campos faltantes</p> <p>Soluci\u00f3n: Verificar estructura del JSON <pre><code>// \u2705 Correcto\n{\n  \"username\": \"john\",\n  \"email\": \"john@example.com\"\n}\n\n// \u274c Incorrecto (coma extra)\n{\n  \"username\": \"john\",\n  \"email\": \"john@example.com\",\n}\n</code></pre></p>"},{"location":"api/07-controladores-rest/#error-500-internal-server-error","title":"Error: \"500 Internal Server Error\"","text":"<p>Causa: Excepci\u00f3n no manejada en el c\u00f3digo</p> <p>Soluci\u00f3n: Revisar logs y agregar manejo de errores <pre><code>@GetMapping(\"/{id}\")\npublic ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n    try {\n        return userService.findById(id)\n                .map(user -&gt; ResponseEntity.ok(toDTO(user)))\n                .orElse(ResponseEntity.notFound().build());\n    } catch (Exception e) {\n        // Log del error\n        log.error(\"Error getting user by id: {}\", id, e);\n        return ResponseEntity.internalServerError().build();\n    }\n}\n</code></pre></p>"},{"location":"api/07-controladores-rest/#error-circular-reference-en-json","title":"Error: \"Circular Reference\" en JSON","text":"<p>Causa: Relaciones bidireccionales en entidades</p> <p>Soluci\u00f3n: Usar DTOs (ya implementado) o anotaciones Jackson <pre><code>// \u2705 Soluci\u00f3n con DTOs (recomendado)\nprivate UserDTO toDTO(User user) {\n    UserDTO dto = new UserDTO();\n    dto.setId(user.getId());\n    dto.setUsername(user.getUsername());\n    dto.setEmail(user.getEmail());\n    // NO incluir loans para evitar referencias circulares\n    return dto;\n}\n\n// \u2705 Alternativa con anotaciones Jackson\n@Entity\npublic class User {\n    @OneToMany(mappedBy = \"user\")\n    @JsonIgnore  // Ignorar en serializaci\u00f3n\n    private List&lt;Loan&gt; loans;\n}\n</code></pre></p>"},{"location":"api/07-controladores-rest/#mejores-practicas","title":"\ud83c\udfa8 Mejores Pr\u00e1cticas","text":""},{"location":"api/07-controladores-rest/#1-nomenclatura-de-endpoints","title":"1. Nomenclatura de Endpoints","text":"<p>\u2705 Bueno: <pre><code>GET    /api/users          # Listar usuarios\nGET    /api/users/1        # Usuario espec\u00edfico\nPOST   /api/users          # Crear usuario\nPUT    /api/users/1        # Actualizar usuario\nDELETE /api/users/1        # Eliminar usuario\n</code></pre></p> <p>\u274c Malo: <pre><code>GET    /api/getUsers       # No usar verbos en URLs\nPOST   /api/createUser     # No usar verbos en URLs\nGET    /api/user/1         # Usar plural\n</code></pre></p>"},{"location":"api/07-controladores-rest/#2-codigos-de-estado-apropiados","title":"2. C\u00f3digos de Estado Apropiados","text":"<pre><code>// \u2705 Bueno: C\u00f3digos espec\u00edficos\n@PostMapping\npublic ResponseEntity&lt;UserDTO&gt; create(@RequestBody UserDTO userDTO) {\n    User saved = userService.save(toEntity(userDTO));\n    return ResponseEntity.status(HttpStatus.CREATED)  // 201 Created\n            .body(toDTO(saved));\n}\n\n@DeleteMapping(\"/{id}\")\npublic ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n    userService.deleteById(id);\n    return ResponseEntity.noContent().build();  // 204 No Content\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#3-validacion-de-entrada","title":"3. Validaci\u00f3n de Entrada","text":"<pre><code>@PostMapping\npublic ResponseEntity&lt;UserDTO&gt; create(@Valid @RequestBody UserDTO userDTO) {\n    // @Valid activa validaciones autom\u00e1ticas\n    User saved = userService.save(toEntity(userDTO));\n    return ResponseEntity.status(HttpStatus.CREATED)\n            .body(toDTO(saved));\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#4-manejo-consistente-de-errores","title":"4. Manejo Consistente de Errores","text":"<pre><code>@GetMapping(\"/{id}\")\npublic ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n    if (id &lt;= 0) {\n        return ResponseEntity.badRequest().build();  // 400 Bad Request\n    }\n\n    return userService.findById(id)\n            .map(user -&gt; ResponseEntity.ok(toDTO(user)))  // 200 OK\n            .orElse(ResponseEntity.notFound().build());   // 404 Not Found\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#5-documentacion-con-comentarios","title":"5. Documentaci\u00f3n con Comentarios","text":"<pre><code>/**\n * Obtiene un usuario por su ID\n * \n * @param id ID del usuario a buscar\n * @return ResponseEntity con el usuario encontrado o 404 si no existe\n */\n@GetMapping(\"/{id}\")\npublic ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n    return userService.findById(id)\n            .map(user -&gt; ResponseEntity.ok(toDTO(user)))\n            .orElse(ResponseEntity.notFound().build());\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#6-logging","title":"6. Logging","text":"<pre><code>@RestController\n@RequestMapping(\"/api/users\")\n@Slf4j  // Lombok para logging\npublic class UserController {\n\n    @PostMapping\n    public ResponseEntity&lt;UserDTO&gt; create(@RequestBody UserDTO userDTO) {\n        log.info(\"Creating user: {}\", userDTO.getUsername());\n\n        try {\n            User saved = userService.save(toEntity(userDTO));\n            log.info(\"User created successfully with ID: {}\", saved.getId());\n            return ResponseEntity.status(HttpStatus.CREATED)\n                    .body(toDTO(saved));\n        } catch (Exception e) {\n            log.error(\"Error creating user: {}\", e.getMessage(), e);\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n</code></pre>"},{"location":"api/07-controladores-rest/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>REST: Arquitectura est\u00e1ndar para APIs web</li> <li>HTTP Methods: GET, POST, PUT, DELETE para operaciones CRUD</li> <li>Status Codes: C\u00f3digos apropiados para diferentes situaciones</li> <li>@RestController: Controladores que devuelven JSON autom\u00e1ticamente</li> <li>@RequestMapping: Mapeo de URLs a m\u00e9todos</li> <li>@PathVariable: Variables en la URL</li> <li>@RequestBody: Datos JSON en el cuerpo de la petici\u00f3n</li> <li>ResponseEntity: Control expl\u00edcito de respuestas HTTP</li> <li>DTO Conversion: Transformaci\u00f3n entre DTOs y entidades</li> <li>Error Handling: Manejo apropiado de errores y excepciones</li> </ul>"},{"location":"api/07-controladores-rest/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Implementar validaci\u00f3n de datos - Crear manejo global de errores - Configurar Spring Boot Actuator - Crear pruebas automatizadas - Documentar APIs con Swagger</p> <p>\u2190 Anterior: Servicios y L\u00f3gica de Negocio | Volver al \u00cdndice | Siguiente: Actuator y Monitoreo \u2192</p>"},{"location":"api/08-actuator-monitoreo/","title":"8. Spring Boot Actuator y Monitoreo","text":""},{"location":"api/08-actuator-monitoreo/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Configurar y usar Spring Boot Actuator - Implementar endpoints de monitoreo - Crear Health Indicators personalizados - Configurar m\u00e9tricas de aplicaci\u00f3n - Monitorear el estado de la aplicaci\u00f3n</p>"},{"location":"api/08-actuator-monitoreo/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Controladores REST implementados</li> <li>Servicios y repositorios creados</li> <li>Aplicaci\u00f3n Spring Boot funcionando</li> <li>Conocimientos b\u00e1sicos de monitoreo</li> </ul>"},{"location":"api/08-actuator-monitoreo/#spring-boot-actuator","title":"\ud83c\udfe5 Spring Boot Actuator","text":""},{"location":"api/08-actuator-monitoreo/#que-es-spring-boot-actuator","title":"\u00bfQu\u00e9 es Spring Boot Actuator?","text":"<p>Spring Boot Actuator proporciona funcionalidades listas para producci\u00f3n que ayudan a monitorear y gestionar tu aplicaci\u00f3n. Incluye endpoints para verificar el estado de la aplicaci\u00f3n, m\u00e9tricas, informaci\u00f3n del entorno y m\u00e1s.</p>"},{"location":"api/08-actuator-monitoreo/#configuracion-de-actuator","title":"Configuraci\u00f3n de Actuator","text":"<p>En <code>application.properties</code> ya tenemos:</p> <pre><code># Habilitar endpoints de Actuator\nmanagement.endpoints.web.exposure.include=health,info,metrics\nmanagement.endpoint.health.show-details=always\nmanagement.info.env.enabled=true\n\n# Informaci\u00f3n personalizada para /actuator/info\ninfo.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API built with Spring Boot\ninfo.app.author.name=John Doe\ninfo.app.author.email=john.doe@example.com\ninfo.app.author.organization=Example Corp\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#endpoints-principales-de-actuator","title":"Endpoints Principales de Actuator","text":"Endpoint Descripci\u00f3n Ejemplo de Uso <code>/actuator/health</code> Estado de la aplicaci\u00f3n Monitoreo de salud <code>/actuator/info</code> Informaci\u00f3n de la app Versi\u00f3n, autor, etc. <code>/actuator/metrics</code> M\u00e9tricas de rendimiento CPU, memoria, requests <code>/actuator/env</code> Variables de entorno Configuraci\u00f3n actual <code>/actuator/loggers</code> Configuraci\u00f3n de logs Cambiar niveles de log <code>/actuator/beans</code> Beans de Spring Debugging de contexto"},{"location":"api/08-actuator-monitoreo/#configuracion-avanzada-de-endpoints","title":"Configuraci\u00f3n Avanzada de Endpoints","text":"<pre><code># Exponer todos los endpoints (usar con cuidado en producci\u00f3n)\nmanagement.endpoints.web.exposure.include=*\n\n# Excluir endpoints espec\u00edficos\nmanagement.endpoints.web.exposure.exclude=env,beans\n\n# Cambiar el path base de actuator\nmanagement.endpoints.web.base-path=/management\n\n# Configurar puerto diferente para actuator\nmanagement.server.port=9090\n\n# Configurar seguridad para endpoints\nmanagement.endpoint.health.roles=ADMIN\nmanagement.endpoint.info.roles=USER,ADMIN\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#health-indicators","title":"\ud83d\udd0d Health Indicators","text":""},{"location":"api/08-actuator-monitoreo/#health-indicators-integrados","title":"Health Indicators Integrados","text":"<p>Spring Boot incluye varios health indicators autom\u00e1ticos:</p> <ul> <li>DataSourceHealthIndicator: Estado de la base de datos</li> <li>DiskSpaceHealthIndicator: Espacio en disco</li> <li>RedisHealthIndicator: Estado de Redis (si est\u00e1 configurado)</li> <li>MailHealthIndicator: Estado del servidor de correo</li> </ul>"},{"location":"api/08-actuator-monitoreo/#health-indicators-personalizados","title":"Health Indicators Personalizados","text":"<p>Crea <code>src/main/java/com/example/pib2/health/DatabaseHealthIndicator.java</code>:</p> <pre><code>package com.example.pib2.health;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuator.health.Health;\nimport org.springframework.boot.actuator.health.HealthIndicator;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n@Component\npublic class DatabaseHealthIndicator implements HealthIndicator {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Override\n    public Health health() {\n        try (Connection connection = dataSource.getConnection()) {\n            if (connection.isValid(1)) {\n                return Health.up()\n                        .withDetail(\"database\", \"PostgreSQL\")\n                        .withDetail(\"status\", \"Connection successful\")\n                        .build();\n            } else {\n                return Health.down()\n                        .withDetail(\"database\", \"PostgreSQL\")\n                        .withDetail(\"status\", \"Connection failed\")\n                        .build();\n            }\n        } catch (SQLException e) {\n            return Health.down()\n                    .withDetail(\"database\", \"PostgreSQL\")\n                    .withDetail(\"error\", e.getMessage())\n                    .build();\n        }\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#health-indicator-para-servicios-externos","title":"Health Indicator para Servicios Externos","text":"<p>Crea <code>src/main/java/com/example/pib2/health/ExternalServiceHealthIndicator.java</code>:</p> <pre><code>package com.example.pib2.health;\n\nimport org.springframework.boot.actuator.health.Health;\nimport org.springframework.boot.actuator.health.HealthIndicator;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\n@Component\npublic class ExternalServiceHealthIndicator implements HealthIndicator {\n\n    private final RestTemplate restTemplate = new RestTemplate();\n    private final String externalServiceUrl = \"https://api.external-service.com/health\";\n\n    @Override\n    public Health health() {\n        try {\n            // Intentar conectar al servicio externo\n            String response = restTemplate.getForObject(externalServiceUrl, String.class);\n\n            return Health.up()\n                    .withDetail(\"service\", \"External API\")\n                    .withDetail(\"url\", externalServiceUrl)\n                    .withDetail(\"response\", response)\n                    .build();\n        } catch (Exception e) {\n            return Health.down()\n                    .withDetail(\"service\", \"External API\")\n                    .withDetail(\"url\", externalServiceUrl)\n                    .withDetail(\"error\", e.getMessage())\n                    .build();\n        }\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#metricas-personalizadas","title":"\ud83d\udcca M\u00e9tricas Personalizadas","text":""},{"location":"api/08-actuator-monitoreo/#configuracion-de-metricas","title":"Configuraci\u00f3n de M\u00e9tricas","text":"<p>Crea <code>src/main/java/com/example/pib2/metrics/CustomMetrics.java</code>:</p> <pre><code>package com.example.pib2.metrics;\n\nimport io.micrometer.core.instrument.Counter;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Timer;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CustomMetrics {\n\n    private final Counter userCreationCounter;\n    private final Counter loanCreationCounter;\n    private final Timer requestTimer;\n\n    public CustomMetrics(MeterRegistry meterRegistry) {\n        this.userCreationCounter = Counter.builder(\"users.created\")\n                .description(\"Number of users created\")\n                .register(meterRegistry);\n\n        this.loanCreationCounter = Counter.builder(\"loans.created\")\n                .description(\"Number of loans created\")\n                .register(meterRegistry);\n\n        this.requestTimer = Timer.builder(\"api.requests\")\n                .description(\"API request duration\")\n                .register(meterRegistry);\n    }\n\n    public void incrementUserCreation() {\n        userCreationCounter.increment();\n    }\n\n    public void incrementLoanCreation() {\n        loanCreationCounter.increment();\n    }\n\n    public Timer.Sample startTimer() {\n        return Timer.start();\n    }\n\n    public void stopTimer(Timer.Sample sample) {\n        sample.stop(requestTimer);\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#uso-de-metricas-en-servicios","title":"Uso de M\u00e9tricas en Servicios","text":"<p>Modifica <code>src/main/java/com/example/pib2/service/UserService.java</code>:</p> <pre><code>@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private CustomMetrics customMetrics;\n\n    public User save(User user) {\n        User savedUser = userRepository.save(user);\n        customMetrics.incrementUserCreation(); // Incrementar m\u00e9trica\n        return savedUser;\n    }\n\n    // ... resto de m\u00e9todos\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#configuracion-de-info-endpoint","title":"\ud83d\udd27 Configuraci\u00f3n de Info Endpoint","text":""},{"location":"api/08-actuator-monitoreo/#informacion-estatica","title":"Informaci\u00f3n Est\u00e1tica","text":"<p>En <code>application.properties</code>:</p> <pre><code># Informaci\u00f3n b\u00e1sica de la aplicaci\u00f3n\ninfo.app.name=@project.name@\ninfo.app.version=@project.version@\ninfo.app.description=@project.description@\ninfo.app.encoding=@project.build.sourceEncoding@\ninfo.app.java.version=@java.version@\n\n# Informaci\u00f3n del equipo\ninfo.team.name=Development Team\ninfo.team.email=dev-team@example.com\ninfo.team.lead=John Doe\n\n# Informaci\u00f3n del entorno\ninfo.environment.name=development\ninfo.environment.database=PostgreSQL\ninfo.environment.profile=@spring.profiles.active@\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#informacion-dinamica","title":"Informaci\u00f3n Din\u00e1mica","text":"<p>Crea <code>src/main/java/com/example/pib2/info/CustomInfoContributor.java</code>:</p> <pre><code>package com.example.pib2.info;\n\nimport org.springframework.boot.actuator.info.Info;\nimport org.springframework.boot.actuator.info.InfoContributor;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\npublic class CustomInfoContributor implements InfoContributor {\n\n    @Override\n    public void contribute(Info.Builder builder) {\n        Map&lt;String, Object&gt; customInfo = new HashMap&lt;&gt;();\n\n        // Informaci\u00f3n de tiempo de ejecuci\u00f3n\n        customInfo.put(\"startup-time\", LocalDateTime.now());\n        customInfo.put(\"uptime\", getUptime());\n\n        // Informaci\u00f3n de la aplicaci\u00f3n\n        customInfo.put(\"active-profiles\", getActiveProfiles());\n        customInfo.put(\"total-memory\", Runtime.getRuntime().totalMemory());\n        customInfo.put(\"free-memory\", Runtime.getRuntime().freeMemory());\n\n        builder.withDetail(\"runtime\", customInfo);\n    }\n\n    private String getUptime() {\n        long uptime = System.currentTimeMillis() - \n                     java.lang.management.ManagementFactory.getRuntimeMXBean().getStartTime();\n        return String.format(\"%d minutes\", uptime / (1000 * 60));\n    }\n\n    private String[] getActiveProfiles() {\n        return org.springframework.core.env.Environment.class.isInstance(this) ? \n               new String[]{\"default\"} : new String[]{\"development\"};\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#verificacion-de-actuator","title":"\ud83d\ude80 Verificaci\u00f3n de Actuator","text":""},{"location":"api/08-actuator-monitoreo/#1-iniciar-la-aplicacion","title":"1. Iniciar la Aplicaci\u00f3n","text":"<pre><code>./mvnw spring-boot:run\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#2-verificar-endpoints","title":"2. Verificar Endpoints","text":"<pre><code># Health Check\ncurl http://localhost:8080/actuator/health\n\n# Informaci\u00f3n de la aplicaci\u00f3n\ncurl http://localhost:8080/actuator/info\n\n# M\u00e9tricas disponibles\ncurl http://localhost:8080/actuator/metrics\n\n# M\u00e9trica espec\u00edfica\ncurl http://localhost:8080/actuator/metrics/jvm.memory.used\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#3-respuestas-esperadas","title":"3. Respuestas Esperadas","text":"<p>Health Endpoint: <pre><code>{\n  \"status\": \"UP\",\n  \"components\": {\n    \"db\": {\n      \"status\": \"UP\",\n      \"details\": {\n        \"database\": \"PostgreSQL\",\n        \"validationQuery\": \"isValid()\"\n      }\n    },\n    \"diskSpace\": {\n      \"status\": \"UP\",\n      \"details\": {\n        \"total\": 499963174912,\n        \"free\": 91943821312,\n        \"threshold\": 10485760,\n        \"exists\": true\n      }\n    }\n  }\n}\n</code></pre></p> <p>Info Endpoint: <pre><code>{\n  \"app\": {\n    \"name\": \"My REST API\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A sample REST API built with Spring Boot\",\n    \"author\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"organization\": \"Example Corp\"\n    }\n  },\n  \"runtime\": {\n    \"startup-time\": \"2024-01-15T10:30:00\",\n    \"uptime\": \"15 minutes\",\n    \"total-memory\": 536870912,\n    \"free-memory\": 123456789\n  }\n}\n</code></pre></p>"},{"location":"api/08-actuator-monitoreo/#seguridad-en-actuator","title":"\ud83d\udd12 Seguridad en Actuator","text":""},{"location":"api/08-actuator-monitoreo/#configuracion-de-seguridad","title":"Configuraci\u00f3n de Seguridad","text":"<p>En <code>application.properties</code>:</p> <pre><code># Configurar seguridad para endpoints sensibles\nmanagement.endpoint.health.show-details=when-authorized\nmanagement.endpoint.info.enabled=true\nmanagement.endpoint.metrics.enabled=true\n\n# Configurar roles requeridos\nmanagement.endpoint.env.roles=ADMIN\nmanagement.endpoint.beans.roles=ADMIN\nmanagement.endpoint.configprops.roles=ADMIN\n\n# Deshabilitar endpoints sensibles en producci\u00f3n\nmanagement.endpoint.shutdown.enabled=false\nmanagement.endpoint.restart.enabled=false\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#configuracion-con-spring-security","title":"Configuraci\u00f3n con Spring Security","text":"<pre><code>@Configuration\n@EnableWebSecurity\npublic class ActuatorSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain actuatorSecurityFilterChain(HttpSecurity http) throws Exception {\n        http.requestMatcher(EndpointRequest.toAnyEndpoint())\n            .authorizeHttpRequests(requests -&gt; \n                requests.requestMatchers(EndpointRequest.to(\"health\", \"info\"))\n                       .permitAll()\n                       .anyRequest()\n                       .hasRole(\"ADMIN\")\n            );\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/08-actuator-monitoreo/#error-actuator-endpoints-not-accessible","title":"Error: \"Actuator endpoints not accessible\"","text":"<p>Causa: Endpoints no expuestos</p> <p>Soluci\u00f3n: Verificar configuraci\u00f3n <pre><code>management.endpoints.web.exposure.include=health,info,metrics\n</code></pre></p>"},{"location":"api/08-actuator-monitoreo/#error-health-shows-down-status","title":"Error: \"Health shows DOWN status\"","text":"<p>Causa: Problemas de conectividad</p> <p>Soluci\u00f3n: Verificar health indicators <pre><code>curl http://localhost:8080/actuator/health\n</code></pre></p>"},{"location":"api/08-actuator-monitoreo/#error-custom-metrics-not-appearing","title":"Error: \"Custom metrics not appearing\"","text":"<p>Causa: M\u00e9tricas no registradas correctamente</p> <p>Soluci\u00f3n: Verificar registro en MeterRegistry <pre><code>@Component\npublic class MetricsConfig {\n    public MetricsConfig(MeterRegistry registry) {\n        // Registrar m\u00e9tricas aqu\u00ed\n    }\n}\n</code></pre></p>"},{"location":"api/08-actuator-monitoreo/#mejores-practicas","title":"\ud83c\udfa8 Mejores Pr\u00e1cticas","text":""},{"location":"api/08-actuator-monitoreo/#1-seguridad-en-produccion","title":"1. Seguridad en Producci\u00f3n","text":"<pre><code># Solo exponer endpoints necesarios\nmanagement.endpoints.web.exposure.include=health,info,metrics\n\n# Usar puerto diferente para actuator\nmanagement.server.port=9090\n\n# Configurar autenticaci\u00f3n\nmanagement.endpoint.health.show-details=when-authorized\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#2-monitoreo-proactivo","title":"2. Monitoreo Proactivo","text":"<pre><code>@Component\npublic class HealthMonitor {\n\n    @EventListener\n    public void handleHealthChange(HealthChangedEvent event) {\n        if (event.getStatus() == Status.DOWN) {\n            // Enviar alerta\n            alertService.sendAlert(\"Application health is DOWN\");\n        }\n    }\n}\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#3-metricas-significativas","title":"3. M\u00e9tricas Significativas","text":"<pre><code>// M\u00e9tricas de negocio\nCounter.builder(\"business.loans.approved\")\n       .description(\"Number of approved loans\")\n       .tag(\"type\", \"business\")\n       .register(meterRegistry);\n\n// M\u00e9tricas de rendimiento\nTimer.builder(\"database.query.time\")\n     .description(\"Database query execution time\")\n     .register(meterRegistry);\n</code></pre>"},{"location":"api/08-actuator-monitoreo/#conceptos-clave-aprendidos","title":"\ud83d\udcda Conceptos Clave Aprendidos","text":"<ul> <li>Spring Boot Actuator: Framework de monitoreo y gesti\u00f3n</li> <li>Health Indicators: Verificadores de estado de componentes</li> <li>M\u00e9tricas: Mediciones de rendimiento y uso</li> <li>Info Endpoint: Informaci\u00f3n de la aplicaci\u00f3n</li> <li>Custom Metrics: M\u00e9tricas personalizadas de negocio</li> <li>Security: Protecci\u00f3n de endpoints sensibles</li> <li>Monitoring: Supervisi\u00f3n proactiva de aplicaciones</li> </ul>"},{"location":"api/08-actuator-monitoreo/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>En la siguiente secci\u00f3n aprender\u00e1s a: - Implementar validaci\u00f3n de datos con Bean Validation - Crear manejo centralizado de errores - Configurar excepciones personalizadas - Implementar validaciones de negocio - Manejar errores de forma consistente</p> <p>\u2190 Anterior: Controladores REST | Volver al \u00cdndice | Siguiente: Validaci\u00f3n y Manejo de Errores \u2192</p>"},{"location":"api/09-validacion-manejo-errores/","title":"9. Validaci\u00f3n y Manejo de Errores","text":""},{"location":"api/09-validacion-manejo-errores/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<p>En esta secci\u00f3n aprender\u00e1s a: - Implementar validaciones con Bean Validation (JSR-303) - Crear manejo centralizado de errores con @ControllerAdvice - Configurar validaciones personalizadas - Manejar diferentes tipos de excepciones - Crear respuestas de error consistentes - Implementar validaciones de negocio - Usar @Valid y @Validated - Crear excepciones personalizadas - Configurar mensajes de error internacionalizados</p>"},{"location":"api/09-validacion-manejo-errores/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":"<ul> <li>Controladores REST implementados</li> <li>DTOs y entidades creadas</li> <li>Servicios con l\u00f3gica de negocio</li> <li>Conocimientos b\u00e1sicos de excepciones en Java</li> </ul>"},{"location":"api/09-validacion-manejo-errores/#fundamentos-de-validacion","title":"\ud83d\udee1\ufe0f Fundamentos de Validaci\u00f3n","text":""},{"location":"api/09-validacion-manejo-errores/#por-que-validar","title":"\u00bfPor qu\u00e9 Validar?","text":"<ol> <li>Seguridad: Prevenir ataques de inyecci\u00f3n</li> <li>Integridad: Mantener datos consistentes</li> <li>Experiencia de usuario: Feedback claro y r\u00e1pido</li> <li>Robustez: Aplicaci\u00f3n m\u00e1s estable</li> <li>Mantenimiento: C\u00f3digo m\u00e1s limpio y predecible</li> </ol>"},{"location":"api/09-validacion-manejo-errores/#tipos-de-validacion","title":"Tipos de Validaci\u00f3n","text":"Tipo Descripci\u00f3n Cu\u00e1ndo Usar Ejemplo Sint\u00e1ctica Formato y estructura Entrada de datos Email v\u00e1lido, longitud Sem\u00e1ntica Reglas de negocio L\u00f3gica espec\u00edfica Usuario \u00fanico, stock disponible Referencial Integridad de datos Relaciones entre entidades Usuario existe, item disponible"},{"location":"api/09-validacion-manejo-errores/#capas-de-validacion","title":"Capas de Validaci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend      \u2502 \u2190 Validaci\u00f3n UX (opcional)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Controller    \u2502 \u2190 Validaci\u00f3n de entrada (@Valid)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Service       \u2502 \u2190 Validaci\u00f3n de negocio\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Repository    \u2502 \u2190 Validaci\u00f3n de integridad\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Database      \u2502 \u2190 Constraints de BD\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#dependencias-de-validacion","title":"\ud83d\udce6 Dependencias de Validaci\u00f3n","text":"<p>En nuestro <code>pom.xml</code> ya tenemos Spring Boot Starter Web que incluye:</p> <pre><code>&lt;!-- Spring Boot Starter Web incluye validaci\u00f3n --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Validaci\u00f3n expl\u00edcita (opcional, ya incluida) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Incluye autom\u00e1ticamente: - Hibernate Validator: Implementaci\u00f3n de Bean Validation - Jakarta Validation API: Especificaci\u00f3n JSR-303/JSR-380 - Expression Language: Para mensajes din\u00e1micos</p>"},{"location":"api/09-validacion-manejo-errores/#anotaciones-de-validacion","title":"\ud83c\udff7\ufe0f Anotaciones de Validaci\u00f3n","text":""},{"location":"api/09-validacion-manejo-errores/#validaciones-basicas","title":"Validaciones B\u00e1sicas","text":"Anotaci\u00f3n Descripci\u00f3n Ejemplo <code>@NotNull</code> No puede ser null <code>@NotNull String name</code> <code>@NotEmpty</code> No null y no vac\u00edo <code>@NotEmpty List&lt;String&gt; items</code> <code>@NotBlank</code> No null, no vac\u00edo, no solo espacios <code>@NotBlank String username</code> <code>@Size</code> Longitud espec\u00edfica <code>@Size(min=3, max=50) String name</code> <code>@Min</code> / <code>@Max</code> Valor m\u00ednimo/m\u00e1ximo <code>@Min(0) Integer quantity</code> <code>@Email</code> Formato de email v\u00e1lido <code>@Email String email</code> <code>@Pattern</code> Expresi\u00f3n regular <code>@Pattern(regexp=\"[A-Z]+\") String code</code>"},{"location":"api/09-validacion-manejo-errores/#validaciones-de-fecha-y-tiempo","title":"Validaciones de Fecha y Tiempo","text":"Anotaci\u00f3n Descripci\u00f3n Ejemplo <code>@Past</code> Fecha en el pasado <code>@Past LocalDate birthDate</code> <code>@Future</code> Fecha en el futuro <code>@Future LocalDate returnDate</code> <code>@PastOrPresent</code> Pasado o presente <code>@PastOrPresent LocalDate loanDate</code> <code>@FutureOrPresent</code> Futuro o presente <code>@FutureOrPresent LocalDate dueDate</code>"},{"location":"api/09-validacion-manejo-errores/#validaciones-numericas","title":"Validaciones Num\u00e9ricas","text":"Anotaci\u00f3n Descripci\u00f3n Ejemplo <code>@Positive</code> N\u00famero positivo <code>@Positive Integer quantity</code> <code>@PositiveOrZero</code> Positivo o cero <code>@PositiveOrZero BigDecimal price</code> <code>@Negative</code> N\u00famero negativo <code>@Negative Integer adjustment</code> <code>@DecimalMin</code> Valor decimal m\u00ednimo <code>@DecimalMin(\"0.0\") BigDecimal amount</code> <code>@DecimalMax</code> Valor decimal m\u00e1ximo <code>@DecimalMax(\"100.0\") BigDecimal percentage</code> <code>@Digits</code> D\u00edgitos espec\u00edficos <code>@Digits(integer=3, fraction=2) BigDecimal price</code>"},{"location":"api/09-validacion-manejo-errores/#implementacion-de-validaciones","title":"\ud83c\udfd7\ufe0f Implementaci\u00f3n de Validaciones","text":""},{"location":"api/09-validacion-manejo-errores/#1-validaciones-en-entidades","title":"1. Validaciones en Entidades","text":"<p>Actualiza <code>src/main/java/com/example/pib2/models/entities/User.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotBlank(message = \"Username is required\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    @Column(unique = true)\n    private String username;\n\n    @NotBlank(message = \"Email is required\")\n    @Email(message = \"Email should be valid\")\n    @Column(unique = true)\n    private String email;\n\n    @NotBlank(message = \"Password is required\")\n    @Size(min = 6, message = \"Password must be at least 6 characters\")\n    private String password;\n\n    @NotBlank(message = \"Role is required\")\n    @Pattern(regexp = \"USER|ADMIN\", message = \"Role must be USER or ADMIN\")\n    private String role;\n\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, orphanRemoval = true)\n    @JsonManagedReference\n    private List&lt;Loan&gt; loans;\n}\n</code></pre> <p>Actualiza <code>src/main/java/com/example/pib2/models/entities/Item.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\n@Table(name = \"items\")\npublic class Item {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotBlank(message = \"Item name is required\")\n    @Size(min = 2, max = 100, message = \"Item name must be between 2 and 100 characters\")\n    private String name;\n\n    @NotBlank(message = \"Description is required\")\n    @Size(max = 500, message = \"Description cannot exceed 500 characters\")\n    private String description;\n\n    @NotNull(message = \"Quantity is required\")\n    @PositiveOrZero(message = \"Quantity cannot be negative\")\n    private Integer quantity;\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true)\n    @JsonBackReference\n    private List&lt;Loan&gt; loans;\n}\n</code></pre> <p>Actualiza <code>src/main/java/com/example/pib2/models/entities/Loan.java</code>:</p> <pre><code>package com.example.pib2.models.entities;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Data\n@Table(name = \"loans\")\npublic class Loan {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    @JsonBackReference\n    @NotNull(message = \"User is required\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"item_id\")\n    @JsonBackReference\n    @NotNull(message = \"Item is required\")\n    private Item item;\n\n    @NotNull(message = \"Loan date is required\")\n    @PastOrPresent(message = \"Loan date cannot be in the future\")\n    private LocalDate loanDate;\n\n    @NotNull(message = \"Return date is required\")\n    @Future(message = \"Return date must be in the future\")\n    private LocalDate returnDate;\n\n    @NotNull(message = \"Returned status is required\")\n    private Boolean returned;\n\n    @OneToMany(mappedBy = \"loan\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List&lt;LoanHistory&gt; loanHistories;\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#2-validaciones-en-dtos","title":"2. Validaciones en DTOs","text":"<p>Actualiza <code>src/main/java/com/example/pib2/models/dtos/UserDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\n@Data\npublic class UserDTO {\n    private Long id;\n\n    @NotBlank(message = \"Username cannot be blank\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    private String username;\n\n    @NotBlank(message = \"Email cannot be blank\")\n    @Email(message = \"Email must be valid\")\n    private String email;\n\n    // Password solo para creaci\u00f3n, no para respuestas\n    @Size(min = 6, message = \"Password must be at least 6 characters\")\n    private String password;\n\n    @Pattern(regexp = \"USER|ADMIN\", message = \"Role must be USER or ADMIN\")\n    private String role;\n}\n</code></pre> <p>Crea <code>src/main/java/com/example/pib2/models/dtos/UserCreateDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\n@Data\npublic class UserCreateDTO {\n    @NotBlank(message = \"Username cannot be blank\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    private String username;\n\n    @NotBlank(message = \"Email cannot be blank\")\n    @Email(message = \"Email must be valid\")\n    private String email;\n\n    @NotBlank(message = \"Password cannot be blank\")\n    @Size(min = 6, message = \"Password must be at least 6 characters\")\n    private String password;\n\n    @NotBlank(message = \"Role cannot be blank\")\n    @Pattern(regexp = \"USER|ADMIN\", message = \"Role must be USER or ADMIN\")\n    private String role = \"USER\"; // Valor por defecto\n}\n</code></pre> <p>Actualiza <code>src/main/java/com/example/pib2/models/dtos/ItemDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\n@Data\npublic class ItemDTO {\n    private Long id;\n\n    @NotBlank(message = \"Item name cannot be blank\")\n    @Size(min = 2, max = 100, message = \"Item name must be between 2 and 100 characters\")\n    private String name;\n\n    @NotBlank(message = \"Description cannot be blank\")\n    @Size(max = 500, message = \"Description cannot exceed 500 characters\")\n    private String description;\n\n    @NotNull(message = \"Quantity is required\")\n    @PositiveOrZero(message = \"Quantity cannot be negative\")\n    private Integer quantity;\n}\n</code></pre> <p>Actualiza <code>src/main/java/com/example/pib2/models/dtos/LoanDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LoanDTO {\n    private Long id;\n\n    @NotNull(message = \"User ID is required\")\n    @Positive(message = \"User ID must be positive\")\n    private Long userId;\n\n    @NotNull(message = \"Item ID is required\")\n    @Positive(message = \"Item ID must be positive\")\n    private Long itemId;\n\n    @PastOrPresent(message = \"Loan date cannot be in the future\")\n    private LocalDate loanDate;\n\n    @NotNull(message = \"Return date is required\")\n    @Future(message = \"Return date must be in the future\")\n    private LocalDate returnDate;\n\n    private Boolean returned;\n\n    // Para respuestas, incluir informaci\u00f3n del usuario e item\n    private String username;\n    private String itemName;\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#excepciones-personalizadas","title":"\ud83d\udea8 Excepciones Personalizadas","text":""},{"location":"api/09-validacion-manejo-errores/#crear-excepciones-de-negocio","title":"Crear Excepciones de Negocio","text":"<p>Crea <code>src/main/java/com/example/pib2/exceptions/BusinessException.java</code>:</p> <pre><code>package com.example.pib2.exceptions;\n\npublic class BusinessException extends RuntimeException {\n    private final String errorCode;\n\n    public BusinessException(String message) {\n        super(message);\n        this.errorCode = \"BUSINESS_ERROR\";\n    }\n\n    public BusinessException(String message, String errorCode) {\n        super(message);\n        this.errorCode = errorCode;\n    }\n\n    public BusinessException(String message, Throwable cause) {\n        super(message, cause);\n        this.errorCode = \"BUSINESS_ERROR\";\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n}\n</code></pre> <p>Crea <code>src/main/java/com/example/pib2/exceptions/ResourceNotFoundException.java</code>:</p> <pre><code>package com.example.pib2.exceptions;\n\npublic class ResourceNotFoundException extends RuntimeException {\n    private final String resourceName;\n    private final String fieldName;\n    private final Object fieldValue;\n\n    public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) {\n        super(String.format(\"%s not found with %s: '%s'\", resourceName, fieldName, fieldValue));\n        this.resourceName = resourceName;\n        this.fieldName = fieldName;\n        this.fieldValue = fieldValue;\n    }\n\n    public String getResourceName() {\n        return resourceName;\n    }\n\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    public Object getFieldValue() {\n        return fieldValue;\n    }\n}\n</code></pre> <p>Crea <code>src/main/java/com/example/pib2/exceptions/ValidationException.java</code>:</p> <pre><code>package com.example.pib2.exceptions;\n\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class ValidationException extends RuntimeException {\n    private final Map&lt;String, String&gt; errors;\n\n    public ValidationException(String message) {\n        super(message);\n        this.errors = new HashMap&lt;&gt;();\n    }\n\n    public ValidationException(String message, Map&lt;String, String&gt; errors) {\n        super(message);\n        this.errors = errors;\n    }\n\n    public ValidationException(Map&lt;String, String&gt; errors) {\n        super(\"Validation failed\");\n        this.errors = errors;\n    }\n\n    public Map&lt;String, String&gt; getErrors() {\n        return errors;\n    }\n\n    public void addError(String field, String message) {\n        this.errors.put(field, message);\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#dtos-de-respuesta-de-error","title":"\ud83d\udccb DTOs de Respuesta de Error","text":"<p>Crea <code>src/main/java/com/example/pib2/models/dtos/ErrorResponseDTO.java</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport lombok.Data;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport java.time.LocalDateTime;\nimport java.util.Map;\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ErrorResponseDTO {\n    private LocalDateTime timestamp;\n    private int status;\n    private String error;\n    private String message;\n    private String path;\n    private String errorCode;\n    private Map&lt;String, String&gt; validationErrors;\n    private List&lt;String&gt; details;\n\n    // Constructor para errores simples\n    public ErrorResponseDTO(int status, String error, String message, String path) {\n        this.timestamp = LocalDateTime.now();\n        this.status = status;\n        this.error = error;\n        this.message = message;\n        this.path = path;\n    }\n\n    // Constructor para errores de validaci\u00f3n\n    public ErrorResponseDTO(int status, String error, String message, String path, Map&lt;String, String&gt; validationErrors) {\n        this.timestamp = LocalDateTime.now();\n        this.status = status;\n        this.error = error;\n        this.message = message;\n        this.path = path;\n        this.validationErrors = validationErrors;\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#manejo-centralizado-de-errores","title":"\ud83c\udfaf Manejo Centralizado de Errores","text":"<p>Crea <code>src/main/java/com/example/pib2/exceptions/GlobalExceptionHandler.java</code>:</p> <pre><code>package com.example.pib2.exceptions;\n\nimport com.example.pib2.models.dtos.ErrorResponseDTO;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.validation.ConstraintViolation;\nimport jakarta.validation.ConstraintViolationException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\nimport org.springframework.web.servlet.NoHandlerFoundException;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);\n\n    // Manejo de errores de validaci\u00f3n (@Valid)\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleValidationExceptions(\n            MethodArgumentNotValidException ex, HttpServletRequest request) {\n\n        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();\n        ex.getBindingResult().getAllErrors().forEach((error) -&gt; {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Validation Failed\",\n            \"Input validation failed\",\n            request.getRequestURI(),\n            errors\n        );\n\n        logger.warn(\"Validation error: {} for request: {}\", errors, request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de violaciones de constraints\n    @ExceptionHandler(ConstraintViolationException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleConstraintViolationException(\n            ConstraintViolationException ex, HttpServletRequest request) {\n\n        Map&lt;String, String&gt; errors = ex.getConstraintViolations()\n                .stream()\n                .collect(Collectors.toMap(\n                    violation -&gt; violation.getPropertyPath().toString(),\n                    ConstraintViolation::getMessage\n                ));\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Constraint Violation\",\n            \"Constraint validation failed\",\n            request.getRequestURI(),\n            errors\n        );\n\n        logger.warn(\"Constraint violation: {} for request: {}\", errors, request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de recursos no encontrados\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleResourceNotFoundException(\n            ResourceNotFoundException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.NOT_FOUND.value(),\n            \"Resource Not Found\",\n            ex.getMessage(),\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"RESOURCE_NOT_FOUND\");\n\n        logger.warn(\"Resource not found: {} for request: {}\", ex.getMessage(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.NOT_FOUND);\n    }\n\n    // Manejo de excepciones de negocio\n    @ExceptionHandler(BusinessException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleBusinessException(\n            BusinessException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Business Rule Violation\",\n            ex.getMessage(),\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(ex.getErrorCode());\n\n        logger.warn(\"Business exception: {} for request: {}\", ex.getMessage(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de excepciones de validaci\u00f3n personalizadas\n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleValidationException(\n            ValidationException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Validation Error\",\n            ex.getMessage(),\n            request.getRequestURI(),\n            ex.getErrors()\n        );\n\n        logger.warn(\"Custom validation error: {} for request: {}\", ex.getErrors(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de violaciones de integridad de datos\n    @ExceptionHandler(DataIntegrityViolationException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleDataIntegrityViolationException(\n            DataIntegrityViolationException ex, HttpServletRequest request) {\n\n        String message = \"Data integrity violation\";\n        String errorCode = \"DATA_INTEGRITY_VIOLATION\";\n\n        // Detectar tipos espec\u00edficos de violaci\u00f3n\n        if (ex.getMessage().contains(\"unique\") || ex.getMessage().contains(\"duplicate\")) {\n            message = \"Duplicate entry. This record already exists.\";\n            errorCode = \"DUPLICATE_ENTRY\";\n        } else if (ex.getMessage().contains(\"foreign key\")) {\n            message = \"Referenced record does not exist.\";\n            errorCode = \"FOREIGN_KEY_VIOLATION\";\n        }\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.CONFLICT.value(),\n            \"Data Integrity Error\",\n            message,\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(errorCode);\n\n        logger.error(\"Data integrity violation: {} for request: {}\", ex.getMessage(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.CONFLICT);\n    }\n\n    // Manejo de argumentos de tipo incorrecto\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleMethodArgumentTypeMismatchException(\n            MethodArgumentTypeMismatchException ex, HttpServletRequest request) {\n\n        String message = String.format(\"Invalid value '%s' for parameter '%s'. Expected type: %s\",\n                ex.getValue(), ex.getName(), ex.getRequiredType().getSimpleName());\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Invalid Parameter Type\",\n            message,\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"INVALID_PARAMETER_TYPE\");\n\n        logger.warn(\"Type mismatch: {} for request: {}\", message, request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de JSON malformado\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleHttpMessageNotReadableException(\n            HttpMessageNotReadableException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Malformed JSON\",\n            \"Invalid JSON format in request body\",\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"MALFORMED_JSON\");\n\n        logger.warn(\"Malformed JSON: {} for request: {}\", ex.getMessage(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de endpoints no encontrados\n    @ExceptionHandler(NoHandlerFoundException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleNoHandlerFoundException(\n            NoHandlerFoundException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.NOT_FOUND.value(),\n            \"Endpoint Not Found\",\n            String.format(\"No handler found for %s %s\", ex.getHttpMethod(), ex.getRequestURL()),\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"ENDPOINT_NOT_FOUND\");\n\n        logger.warn(\"Endpoint not found: {} {} for request: {}\", \n                ex.getHttpMethod(), ex.getRequestURL(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.NOT_FOUND);\n    }\n\n    // Manejo de IllegalArgumentException\n    @ExceptionHandler(IllegalArgumentException.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleIllegalArgumentException(\n            IllegalArgumentException ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Invalid Argument\",\n            ex.getMessage(),\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"INVALID_ARGUMENT\");\n\n        logger.warn(\"Illegal argument: {} for request: {}\", ex.getMessage(), request.getRequestURI());\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    // Manejo de excepciones generales\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity&lt;ErrorResponseDTO&gt; handleGenericException(\n            Exception ex, HttpServletRequest request) {\n\n        ErrorResponseDTO errorResponse = new ErrorResponseDTO(\n            HttpStatus.INTERNAL_SERVER_ERROR.value(),\n            \"Internal Server Error\",\n            \"An unexpected error occurred\",\n            request.getRequestURI()\n        );\n        errorResponse.setErrorCode(\"INTERNAL_ERROR\");\n\n        logger.error(\"Unexpected error: {} for request: {}\", ex.getMessage(), request.getRequestURI(), ex);\n\n        return new ResponseEntity&lt;&gt;(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#actualizacion-de-controladores","title":"\ud83d\udd27 Actualizaci\u00f3n de Controladores","text":""},{"location":"api/09-validacion-manejo-errores/#usercontroller-con-validaciones","title":"UserController con Validaciones","text":"<p>Actualiza <code>src/main/java/com/example/pib2/controllers/UserController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.exceptions.ResourceNotFoundException;\nimport com.example.pib2.models.dtos.UserDTO;\nimport com.example.pib2.models.dtos.UserCreateDTO;\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.servicios.UserService;\nimport jakarta.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/users\")\n@Validated\npublic class UserController {\n\n    private static final Logger logger = LoggerFactory.getLogger(UserController.class);\n\n    @Autowired\n    private UserService userService;\n\n    private UserDTO toDTO(User user) {\n        UserDTO dto = new UserDTO();\n        dto.setId(user.getId());\n        dto.setUsername(user.getUsername());\n        dto.setEmail(user.getEmail());\n        dto.setRole(user.getRole());\n        return dto;\n    }\n\n    private User toEntity(UserCreateDTO dto) {\n        User user = new User();\n        user.setUsername(dto.getUsername());\n        user.setEmail(dto.getEmail());\n        user.setPassword(dto.getPassword());\n        user.setRole(dto.getRole());\n        return user;\n    }\n\n    private User toEntity(UserDTO dto) {\n        User user = new User();\n        user.setId(dto.getId());\n        user.setUsername(dto.getUsername());\n        user.setEmail(dto.getEmail());\n        user.setRole(dto.getRole());\n        return user;\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;UserDTO&gt;&gt; getAll() {\n        logger.info(\"Fetching all users\");\n        List&lt;UserDTO&gt; users = userService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n        return ResponseEntity.ok(users);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; getById(@PathVariable Long id) {\n        logger.info(\"Fetching user with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        User user = userService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"User\", \"id\", id));\n\n        return ResponseEntity.ok(toDTO(user));\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;UserDTO&gt; create(@Valid @RequestBody UserCreateDTO userCreateDTO) {\n        logger.info(\"Creating new user: {}\", userCreateDTO.getUsername());\n\n        User user = toEntity(userCreateDTO);\n        User savedUser = userService.save(user);\n\n        logger.info(\"User created successfully with id: {}\", savedUser.getId());\n        return ResponseEntity.status(HttpStatus.CREATED).body(toDTO(savedUser));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; update(@PathVariable Long id, @Valid @RequestBody UserDTO userDTO) {\n        logger.info(\"Updating user with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        User existingUser = userService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"User\", \"id\", id));\n\n        // Mantener campos que no se deben actualizar\n        userDTO.setId(id);\n        User userToUpdate = toEntity(userDTO);\n        userToUpdate.setPassword(existingUser.getPassword()); // Mantener password existente\n\n        User updatedUser = userService.save(userToUpdate);\n\n        logger.info(\"User updated successfully: {}\", id);\n        return ResponseEntity.ok(toDTO(updatedUser));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        logger.info(\"Deleting user with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        User user = userService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"User\", \"id\", id));\n\n        userService.deleteById(id);\n\n        logger.info(\"User deleted successfully: {}\", id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#itemcontroller-con-validaciones","title":"ItemController con Validaciones","text":"<p>Actualiza <code>src/main/java/com/example/pib2/controllers/ItemController.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.exceptions.ResourceNotFoundException;\nimport com.example.pib2.models.dtos.ItemDTO;\nimport com.example.pib2.models.entities.Item;\nimport com.example.pib2.servicios.ItemService;\nimport jakarta.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/items\")\n@Validated\npublic class ItemController {\n\n    private static final Logger logger = LoggerFactory.getLogger(ItemController.class);\n\n    @Autowired\n    private ItemService itemService;\n\n    private ItemDTO toDTO(Item item) {\n        ItemDTO dto = new ItemDTO();\n        dto.setId(item.getId());\n        dto.setName(item.getName());\n        dto.setDescription(item.getDescription());\n        dto.setQuantity(item.getQuantity());\n        return dto;\n    }\n\n    private Item toEntity(ItemDTO dto) {\n        Item item = new Item();\n        item.setId(dto.getId());\n        item.setName(dto.getName());\n        item.setDescription(dto.getDescription());\n        item.setQuantity(dto.getQuantity());\n        return item;\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; getAll() {\n        logger.info(\"Fetching all items\");\n        List&lt;ItemDTO&gt; items = itemService.findAll().stream()\n                .map(this::toDTO)\n                .collect(Collectors.toList());\n        return ResponseEntity.ok(items);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;ItemDTO&gt; getById(@PathVariable Long id) {\n        logger.info(\"Fetching item with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"Item ID must be positive\");\n        }\n\n        Item item = itemService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"Item\", \"id\", id));\n\n        return ResponseEntity.ok(toDTO(item));\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;ItemDTO&gt; create(@Valid @RequestBody ItemDTO itemDTO) {\n        logger.info(\"Creating new item: {}\", itemDTO.getName());\n\n        Item item = toEntity(itemDTO);\n        Item savedItem = itemService.save(item);\n\n        logger.info(\"Item created successfully with id: {}\", savedItem.getId());\n        return ResponseEntity.status(HttpStatus.CREATED).body(toDTO(savedItem));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;ItemDTO&gt; update(@PathVariable Long id, @Valid @RequestBody ItemDTO itemDTO) {\n        logger.info(\"Updating item with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"Item ID must be positive\");\n        }\n\n        Item existingItem = itemService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"Item\", \"id\", id));\n\n        itemDTO.setId(id);\n        Item updatedItem = itemService.save(toEntity(itemDTO));\n\n        logger.info(\"Item updated successfully: {}\", id);\n        return ResponseEntity.ok(toDTO(updatedItem));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        logger.info(\"Deleting item with id: {}\", id);\n\n        if (id &lt;= 0) {\n            throw new IllegalArgumentException(\"Item ID must be positive\");\n        }\n\n        Item item = itemService.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"Item\", \"id\", id));\n\n        itemService.deleteById(id);\n\n        logger.info(\"Item deleted successfully: {}\", id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#validaciones-personalizadas","title":"\ud83d\udd0d Validaciones Personalizadas","text":""},{"location":"api/09-validacion-manejo-errores/#crear-validador-personalizado","title":"Crear Validador Personalizado","text":"<p>Crea <code>src/main/java/com/example/pib2/validation/UniqueUsername.java</code>:</p> <pre><code>package com.example.pib2.validation;\n\nimport jakarta.validation.Constraint;\nimport jakarta.validation.Payload;\nimport java.lang.annotation.*;\n\n@Documented\n@Constraint(validatedBy = UniqueUsernameValidator.class)\n@Target({ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface UniqueUsername {\n    String message() default \"Username already exists\";\n    Class&lt;?&gt;[] groups() default {};\n    Class&lt;? extends Payload&gt;[] payload() default {};\n}\n</code></pre> <p>Crea <code>src/main/java/com/example/pib2/validation/UniqueUsernameValidator.java</code>:</p> <pre><code>package com.example.pib2.validation;\n\nimport com.example.pib2.repositories.UserRepository;\nimport jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class UniqueUsernameValidator implements ConstraintValidator&lt;UniqueUsername, String&gt; {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public void initialize(UniqueUsername constraintAnnotation) {\n        // Inicializaci\u00f3n si es necesaria\n    }\n\n    @Override\n    public boolean isValid(String username, ConstraintValidatorContext context) {\n        if (username == null) {\n            return true; // Dejar que @NotNull maneje esto\n        }\n\n        return !userRepository.existsByUsername(username);\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#agregar-metodo-al-repositorio","title":"Agregar M\u00e9todo al Repositorio","text":"<p>Actualiza <code>src/main/java/com/example/pib2/repositories/UserRepository.java</code>:</p> <pre><code>package com.example.pib2.repositories;\n\nimport com.example.pib2.models.entities.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    boolean existsByUsername(String username);\n    boolean existsByEmail(String email);\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#usar-validacion-personalizada","title":"Usar Validaci\u00f3n Personalizada","text":"<p>Actualiza <code>UserCreateDTO</code>:</p> <pre><code>package com.example.pib2.models.dtos;\n\nimport com.example.pib2.validation.UniqueUsername;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\n@Data\npublic class UserCreateDTO {\n    @NotBlank(message = \"Username cannot be blank\")\n    @Size(min = 3, max = 50, message = \"Username must be between 3 and 50 characters\")\n    @UniqueUsername\n    private String username;\n\n    @NotBlank(message = \"Email cannot be blank\")\n    @Email(message = \"Email must be valid\")\n    private String email;\n\n    @NotBlank(message = \"Password cannot be blank\")\n    @Size(min = 6, message = \"Password must be at least 6 characters\")\n    private String password;\n\n    @NotBlank(message = \"Role cannot be blank\")\n    @Pattern(regexp = \"USER|ADMIN\", message = \"Role must be USER or ADMIN\")\n    private String role = \"USER\";\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#validaciones-en-servicios","title":"\ud83d\udd27 Validaciones en Servicios","text":""},{"location":"api/09-validacion-manejo-errores/#actualizar-userservice","title":"Actualizar UserService","text":"<p>Actualiza <code>src/main/java/com/example/pib2/servicios/UserService.java</code>:</p> <pre><code>package com.example.pib2.servicios;\n\nimport com.example.pib2.exceptions.BusinessException;\nimport com.example.pib2.exceptions.ResourceNotFoundException;\nimport com.example.pib2.models.entities.User;\nimport com.example.pib2.repositories.UserRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional\npublic class UserService {\n\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Transactional(readOnly = true)\n    public List&lt;User&gt; findAll() {\n        logger.debug(\"Finding all users\");\n        return userRepository.findAll();\n    }\n\n    @Transactional(readOnly = true)\n    public Optional&lt;User&gt; findById(Long id) {\n        logger.debug(\"Finding user by id: {}\", id);\n\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        return userRepository.findById(id);\n    }\n\n    public User save(User user) {\n        logger.debug(\"Saving user: {}\", user.getUsername());\n\n        validateUser(user);\n\n        // Validaciones de negocio adicionales\n        if (user.getId() == null) {\n            // Nuevo usuario - verificar unicidad\n            if (userRepository.existsByUsername(user.getUsername())) {\n                throw new BusinessException(\"Username already exists: \" + user.getUsername(), \"DUPLICATE_USERNAME\");\n            }\n            if (userRepository.existsByEmail(user.getEmail())) {\n                throw new BusinessException(\"Email already exists: \" + user.getEmail(), \"DUPLICATE_EMAIL\");\n            }\n        } else {\n            // Usuario existente - verificar que existe\n            User existingUser = userRepository.findById(user.getId())\n                    .orElseThrow(() -&gt; new ResourceNotFoundException(\"User\", \"id\", user.getId()));\n\n            // Verificar unicidad solo si cambi\u00f3\n            if (!existingUser.getUsername().equals(user.getUsername()) &amp;&amp; \n                userRepository.existsByUsername(user.getUsername())) {\n                throw new BusinessException(\"Username already exists: \" + user.getUsername(), \"DUPLICATE_USERNAME\");\n            }\n            if (!existingUser.getEmail().equals(user.getEmail()) &amp;&amp; \n                userRepository.existsByEmail(user.getEmail())) {\n                throw new BusinessException(\"Email already exists: \" + user.getEmail(), \"DUPLICATE_EMAIL\");\n            }\n        }\n\n        try {\n            User savedUser = userRepository.save(user);\n            logger.info(\"User saved successfully: {}\", savedUser.getId());\n            return savedUser;\n        } catch (Exception e) {\n            logger.error(\"Error saving user: {}\", e.getMessage(), e);\n            throw new BusinessException(\"Failed to save user: \" + e.getMessage());\n        }\n    }\n\n    public void deleteById(Long id) {\n        logger.debug(\"Deleting user by id: {}\", id);\n\n        if (id == null || id &lt;= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        User user = userRepository.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"User\", \"id\", id));\n\n        // Validaciones de negocio antes de eliminar\n        if (user.getLoans() != null &amp;&amp; !user.getLoans().isEmpty()) {\n            long activeLoans = user.getLoans().stream()\n                    .filter(loan -&gt; !loan.getReturned())\n                    .count();\n            if (activeLoans &gt; 0) {\n                throw new BusinessException(\"Cannot delete user with active loans\", \"USER_HAS_ACTIVE_LOANS\");\n            }\n        }\n\n        try {\n            userRepository.deleteById(id);\n            logger.info(\"User deleted successfully: {}\", id);\n        } catch (Exception e) {\n            logger.error(\"Error deleting user: {}\", e.getMessage(), e);\n            throw new BusinessException(\"Failed to delete user: \" + e.getMessage());\n        }\n    }\n\n    private void validateUser(User user) {\n        if (user == null) {\n            throw new IllegalArgumentException(\"User cannot be null\");\n        }\n\n        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Username is required\");\n        }\n\n        if (user.getUsername().length() &lt; 3 || user.getUsername().length() &gt; 50) {\n            throw new IllegalArgumentException(\"Username must be between 3 and 50 characters\");\n        }\n\n        if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Email is required\");\n        }\n\n        if (!isValidEmail(user.getEmail())) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n\n        if (user.getPassword() == null || user.getPassword().length() &lt; 6) {\n            throw new IllegalArgumentException(\"Password must be at least 6 characters\");\n        }\n\n        if (user.getRole() == null || (!\"USER\".equals(user.getRole()) &amp;&amp; !\"ADMIN\".equals(user.getRole()))) {\n            throw new IllegalArgumentException(\"Role must be USER or ADMIN\");\n        }\n    }\n\n    private boolean isValidEmail(String email) {\n        return email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#configuracion-de-mensajes","title":"\ud83d\udcdd Configuraci\u00f3n de Mensajes","text":""},{"location":"api/09-validacion-manejo-errores/#mensajes-internacionalizados","title":"Mensajes Internacionalizados","text":"<p>Crea <code>src/main/resources/messages.properties</code>:</p> <pre><code># Mensajes de validaci\u00f3n en espa\u00f1ol\nvalidation.user.username.required=El nombre de usuario es obligatorio\nvalidation.user.username.size=El nombre de usuario debe tener entre {min} y {max} caracteres\nvalidation.user.username.unique=El nombre de usuario ya existe\nvalidation.user.email.required=El email es obligatorio\nvalidation.user.email.format=El formato del email no es v\u00e1lido\nvalidation.user.email.unique=El email ya est\u00e1 registrado\nvalidation.user.password.required=La contrase\u00f1a es obligatoria\nvalidation.user.password.size=La contrase\u00f1a debe tener al menos {min} caracteres\nvalidation.user.role.required=El rol es obligatorio\nvalidation.user.role.pattern=El rol debe ser USER o ADMIN\n\nvalidation.item.name.required=El nombre del art\u00edculo es obligatorio\nvalidation.item.name.size=El nombre debe tener entre {min} y {max} caracteres\nvalidation.item.description.required=La descripci\u00f3n es obligatoria\nvalidation.item.description.size=La descripci\u00f3n no puede exceder {max} caracteres\nvalidation.item.quantity.required=La cantidad es obligatoria\nvalidation.item.quantity.positive=La cantidad no puede ser negativa\n\nvalidation.loan.user.required=El usuario es obligatorio\nvalidation.loan.item.required=El art\u00edculo es obligatorio\nvalidation.loan.returnDate.required=La fecha de devoluci\u00f3n es obligatoria\nvalidation.loan.returnDate.future=La fecha de devoluci\u00f3n debe ser futura\n\n# Mensajes de error de negocio\nbusiness.user.duplicate.username=El nombre de usuario ya existe\nbusiness.user.duplicate.email=El email ya est\u00e1 registrado\nbusiness.user.active.loans=No se puede eliminar un usuario con pr\u00e9stamos activos\nbusiness.item.insufficient.stock=Stock insuficiente para el art\u00edculo\nbusiness.loan.limit.exceeded=El usuario ha alcanzado el l\u00edmite de pr\u00e9stamos\nbusiness.loan.item.unavailable=El art\u00edculo no est\u00e1 disponible\n\n# Mensajes de error del sistema\nerror.resource.not.found={0} no encontrado con {1}: {2}\nerror.validation.failed=Error de validaci\u00f3n\nerror.business.rule.violation=Violaci\u00f3n de regla de negocio\nerror.data.integrity.violation=Violaci\u00f3n de integridad de datos\nerror.internal.server=Error interno del servidor\n</code></pre> <p>Crea <code>src/main/resources/messages_en.properties</code>:</p> <pre><code># Validation messages in English\nvalidation.user.username.required=Username is required\nvalidation.user.username.size=Username must be between {min} and {max} characters\nvalidation.user.username.unique=Username already exists\nvalidation.user.email.required=Email is required\nvalidation.user.email.format=Email format is invalid\nvalidation.user.email.unique=Email is already registered\nvalidation.user.password.required=Password is required\nvalidation.user.password.size=Password must be at least {min} characters\nvalidation.user.role.required=Role is required\nvalidation.user.role.pattern=Role must be USER or ADMIN\n\nvalidation.item.name.required=Item name is required\nvalidation.item.name.size=Name must be between {min} and {max} characters\nvalidation.item.description.required=Description is required\nvalidation.item.description.size=Description cannot exceed {max} characters\nvalidation.item.quantity.required=Quantity is required\nvalidation.item.quantity.positive=Quantity cannot be negative\n\nvalidation.loan.user.required=User is required\nvalidation.loan.item.required=Item is required\nvalidation.loan.returnDate.required=Return date is required\nvalidation.loan.returnDate.future=Return date must be in the future\n\n# Business error messages\nbusiness.user.duplicate.username=Username already exists\nbusiness.user.duplicate.email=Email already exists\nbusiness.user.active.loans=Cannot delete user with active loans\nbusiness.item.insufficient.stock=Insufficient stock for item\nbusiness.loan.limit.exceeded=User has reached loan limit\nbusiness.loan.item.unavailable=Item is not available\n\n# System error messages\nerror.resource.not.found={0} not found with {1}: {2}\nerror.validation.failed=Validation failed\nerror.business.rule.violation=Business rule violation\nerror.data.integrity.violation=Data integrity violation\nerror.internal.server=Internal server error\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#configuracion-de-internacionalizacion","title":"Configuraci\u00f3n de Internacionalizaci\u00f3n","text":"<p>Crea <code>src/main/java/com/example/pib2/config/InternationalizationConfig.java</code>:</p> <pre><code>package com.example.pib2.config;\n\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ReloadableResourceBundleMessageSource;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\nimport java.util.Locale;\n\n@Configuration\npublic class InternationalizationConfig implements WebMvcConfigurer {\n\n    @Bean\n    public MessageSource messageSource() {\n        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();\n        messageSource.setBasename(\"classpath:messages\");\n        messageSource.setDefaultEncoding(\"UTF-8\");\n        messageSource.setDefaultLocale(Locale.ENGLISH);\n        return messageSource;\n    }\n\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver localeResolver = new SessionLocaleResolver();\n        localeResolver.setDefaultLocale(Locale.ENGLISH);\n        return localeResolver;\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n        interceptor.setParamName(\"lang\");\n        return interceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#verificacion-de-validaciones","title":"\u2705 Verificaci\u00f3n de Validaciones","text":""},{"location":"api/09-validacion-manejo-errores/#1-iniciar-la-aplicacion","title":"1. Iniciar la Aplicaci\u00f3n","text":"<pre><code>./mvnw spring-boot:run\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#2-probar-validaciones-con-curl","title":"2. Probar Validaciones con curl","text":""},{"location":"api/09-validacion-manejo-errores/#crear-usuario-valido","title":"Crear Usuario V\u00e1lido","text":"<pre><code>curl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"USER\"\n  }'\n</code></pre> <p>Respuesta esperada (409 Conflict): <pre><code>{\n  \"timestamp\": \"2024-01-15T10:35:00\",\n  \"status\": 409,\n  \"error\": \"Data Integrity Error\",\n  \"message\": \"Duplicate entry. This record already exists.\",\n  \"path\": \"/api/users\",\n  \"errorCode\": \"DUPLICATE_ENTRY\"\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#buscar-usuario-inexistente","title":"Buscar Usuario Inexistente","text":"<pre><code>curl -X GET http://localhost:8080/api/users/999\n</code></pre> <p>Respuesta esperada (404 Not Found): <pre><code>{\n  \"timestamp\": \"2024-01-15T10:40:00\",\n  \"status\": 404,\n  \"error\": \"Resource Not Found\",\n  \"message\": \"User not found with id: '999'\",\n  \"path\": \"/api/users/999\",\n  \"errorCode\": \"RESOURCE_NOT_FOUND\"\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#parametro-invalido","title":"Par\u00e1metro Inv\u00e1lido","text":"<pre><code>curl -X GET http://localhost:8080/api/users/abc\n</code></pre> <p>Respuesta esperada (400 Bad Request): <pre><code>{\n  \"timestamp\": \"2024-01-15T10:45:00\",\n  \"status\": 400,\n  \"error\": \"Invalid Parameter Type\",\n  \"message\": \"Invalid value 'abc' for parameter 'id'. Expected type: Long\",\n  \"path\": \"/api/users/abc\",\n  \"errorCode\": \"INVALID_PARAMETER_TYPE\"\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#3-probar-con-postman","title":"3. Probar con Postman","text":""},{"location":"api/09-validacion-manejo-errores/#coleccion-de-pruebas","title":"Colecci\u00f3n de Pruebas","text":"<p>Crea una colecci\u00f3n en Postman con estas pruebas:</p> <ol> <li>Validaci\u00f3n de Entrada</li> <li>POST <code>/api/users</code> con datos inv\u00e1lidos</li> <li> <p>Verificar respuesta 400 con errores de validaci\u00f3n</p> </li> <li> <p>Reglas de Negocio</p> </li> <li>POST <code>/api/users</code> con username duplicado</li> <li> <p>Verificar respuesta 409 con error de duplicado</p> </li> <li> <p>Recursos No Encontrados</p> </li> <li>GET <code>/api/users/999</code></li> <li> <p>Verificar respuesta 404</p> </li> <li> <p>Tipos de Par\u00e1metros</p> </li> <li>GET <code>/api/users/abc</code></li> <li>Verificar respuesta 400</li> </ol>"},{"location":"api/09-validacion-manejo-errores/#testing-de-validaciones","title":"\ud83e\uddea Testing de Validaciones","text":""},{"location":"api/09-validacion-manejo-errores/#tests-unitarios-para-validaciones","title":"Tests Unitarios para Validaciones","text":"<p>Crea <code>src/test/java/com/example/pib2/validation/ValidationTest.java</code>:</p> <pre><code>package com.example.pib2.validation;\n\nimport com.example.pib2.models.dtos.UserCreateDTO;\nimport com.example.pib2.models.dtos.ItemDTO;\nimport jakarta.validation.ConstraintViolation;\nimport jakarta.validation.Validator;\nimport jakarta.validation.ValidatorFactory;\nimport jakarta.validation.Validation;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.DisplayName;\n\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ValidationTest {\n\n    private Validator validator;\n\n    @BeforeEach\n    void setUp() {\n        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n        validator = factory.getValidator();\n    }\n\n    @Test\n    @DisplayName(\"Valid UserCreateDTO should pass validation\")\n    void testValidUserCreateDTO() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"testuser\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"password123\");\n        user.setRole(\"USER\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertTrue(violations.isEmpty(), \"Valid user should not have validation errors\");\n    }\n\n    @Test\n    @DisplayName(\"UserCreateDTO with blank username should fail validation\")\n    void testUserCreateDTOWithBlankUsername() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"password123\");\n        user.setRole(\"USER\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"username\")));\n    }\n\n    @Test\n    @DisplayName(\"UserCreateDTO with short username should fail validation\")\n    void testUserCreateDTOWithShortUsername() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"ab\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"password123\");\n        user.setRole(\"USER\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"username\") &amp;&amp;\n                              v.getMessage().contains(\"between 3 and 50\")));\n    }\n\n    @Test\n    @DisplayName(\"UserCreateDTO with invalid email should fail validation\")\n    void testUserCreateDTOWithInvalidEmail() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"testuser\");\n        user.setEmail(\"invalid-email\");\n        user.setPassword(\"password123\");\n        user.setRole(\"USER\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"email\")));\n    }\n\n    @Test\n    @DisplayName(\"UserCreateDTO with short password should fail validation\")\n    void testUserCreateDTOWithShortPassword() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"testuser\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"123\");\n        user.setRole(\"USER\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"password\")));\n    }\n\n    @Test\n    @DisplayName(\"UserCreateDTO with invalid role should fail validation\")\n    void testUserCreateDTOWithInvalidRole() {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"testuser\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"password123\");\n        user.setRole(\"INVALID\");\n\n        Set&lt;ConstraintViolation&lt;UserCreateDTO&gt;&gt; violations = validator.validate(user);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"role\")));\n    }\n\n    @Test\n    @DisplayName(\"Valid ItemDTO should pass validation\")\n    void testValidItemDTO() {\n        ItemDTO item = new ItemDTO();\n        item.setName(\"Test Item\");\n        item.setDescription(\"Test description\");\n        item.setQuantity(10);\n\n        Set&lt;ConstraintViolation&lt;ItemDTO&gt;&gt; violations = validator.validate(item);\n\n        assertTrue(violations.isEmpty(), \"Valid item should not have validation errors\");\n    }\n\n    @Test\n    @DisplayName(\"ItemDTO with negative quantity should fail validation\")\n    void testItemDTOWithNegativeQuantity() {\n        ItemDTO item = new ItemDTO();\n        item.setName(\"Test Item\");\n        item.setDescription(\"Test description\");\n        item.setQuantity(-1);\n\n        Set&lt;ConstraintViolation&lt;ItemDTO&gt;&gt; violations = validator.validate(item);\n\n        assertFalse(violations.isEmpty());\n        assertTrue(violations.stream()\n                .anyMatch(v -&gt; v.getPropertyPath().toString().equals(\"quantity\")));\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#tests-de-integracion-para-manejo-de-errores","title":"Tests de Integraci\u00f3n para Manejo de Errores","text":"<p>Crea <code>src/test/java/com/example/pib2/controllers/UserControllerValidationTest.java</code>:</p> <pre><code>package com.example.pib2.controllers;\n\nimport com.example.pib2.models.dtos.UserCreateDTO;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.DisplayName;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\nimport static org.hamcrest.Matchers.*;\n\n@SpringBootTest\n@AutoConfigureTestMvc\n@ActiveProfiles(\"test\")\n@Transactional\nclass UserControllerValidationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Test\n    @DisplayName(\"POST /api/users with valid data should return 201\")\n    void testCreateUserWithValidData() throws Exception {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"testuser\");\n        user.setEmail(\"test@example.com\");\n        user.setPassword(\"password123\");\n        user.setRole(\"USER\");\n\n        mockMvc.perform(post(\"/api/users\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(objectMapper.writeValueAsString(user)))\n                .andExpect(status().isCreated())\n                .andExpect(jsonPath(\"$.username\", is(\"testuser\")))\n                .andExpect(jsonPath(\"$.email\", is(\"test@example.com\")))\n                .andExpect(jsonPath(\"$.role\", is(\"USER\")));\n    }\n\n    @Test\n    @DisplayName(\"POST /api/users with invalid data should return 400 with validation errors\")\n    void testCreateUserWithInvalidData() throws Exception {\n        UserCreateDTO user = new UserCreateDTO();\n        user.setUsername(\"ab\"); // Too short\n        user.setEmail(\"invalid-email\"); // Invalid format\n        user.setPassword(\"123\"); // Too short\n        user.setRole(\"INVALID\"); // Invalid role\n\n        mockMvc.perform(post(\"/api/users\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(objectMapper.writeValueAsString(user)))\n                .andExpect(status().isBadRequest())\n                .andExpect(jsonPath(\"$.status\", is(400)))\n                .andExpect(jsonPath(\"$.error\", is(\"Validation Failed\")))\n                .andExpect(jsonPath(\"$.validationErrors\", hasKey(\"username\")))\n                .andExpect(jsonPath(\"$.validationErrors\", hasKey(\"email\")))\n                .andExpect(jsonPath(\"$.validationErrors\", hasKey(\"password\")))\n                .andExpect(jsonPath(\"$.validationErrors\", hasKey(\"role\")));\n    }\n\n    @Test\n    @DisplayName(\"GET /api/users/999 should return 404\")\n    void testGetNonExistentUser() throws Exception {\n        mockMvc.perform(get(\"/api/users/999\"))\n                .andExpect(status().isNotFound())\n                .andExpect(jsonPath(\"$.status\", is(404)))\n                .andExpect(jsonPath(\"$.error\", is(\"Resource Not Found\")))\n                .andExpect(jsonPath(\"$.message\", containsString(\"User not found\")));\n    }\n\n    @Test\n    @DisplayName(\"GET /api/users/abc should return 400 for invalid parameter type\")\n    void testGetUserWithInvalidIdType() throws Exception {\n        mockMvc.perform(get(\"/api/users/abc\"))\n                .andExpect(status().isBadRequest())\n                .andExpect(jsonPath(\"$.status\", is(400)))\n                .andExpect(jsonPath(\"$.error\", is(\"Invalid Parameter Type\")));\n    }\n\n    @Test\n    @DisplayName(\"POST /api/users with malformed JSON should return 400\")\n    void testCreateUserWithMalformedJson() throws Exception {\n        String malformedJson = \"{\\\"username\\\": \\\"test\\\", \\\"email\\\": }\";\n\n        mockMvc.perform(post(\"/api/users\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(malformedJson))\n                .andExpect(status().isBadRequest())\n                .andExpect(jsonPath(\"$.status\", is(400)))\n                .andExpect(jsonPath(\"$.error\", is(\"Malformed JSON\")));\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#problemas-comunes-y-soluciones","title":"\ud83d\udea8 Problemas Comunes y Soluciones","text":""},{"location":"api/09-validacion-manejo-errores/#1-validaciones-no-funcionan","title":"1. Validaciones No Funcionan","text":"<p>Problema: Las validaciones no se ejecutan</p> <p>Soluciones: - Verificar que <code>@Valid</code> est\u00e9 presente en el controlador - Asegurar que <code>spring-boot-starter-validation</code> est\u00e9 en el classpath - Confirmar que <code>@Validated</code> est\u00e9 en la clase del controlador</p> <pre><code>// \u274c Incorrecto\n@PostMapping\npublic ResponseEntity&lt;UserDTO&gt; create(@RequestBody UserCreateDTO user) {\n    // ...\n}\n\n// \u2705 Correcto\n@PostMapping\npublic ResponseEntity&lt;UserDTO&gt; create(@Valid @RequestBody UserCreateDTO user) {\n    // ...\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#2-mensajes-de-error-no-personalizados","title":"2. Mensajes de Error No Personalizados","text":"<p>Problema: Mensajes gen\u00e9ricos en lugar de personalizados</p> <p>Soluci\u00f3n: Configurar <code>messages.properties</code> y usar <code>message</code> en anotaciones</p> <pre><code>// \u274c Mensaje gen\u00e9rico\n@NotBlank\nprivate String username;\n\n// \u2705 Mensaje personalizado\n@NotBlank(message = \"Username cannot be blank\")\nprivate String username;\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#3-excepciones-no-capturadas","title":"3. Excepciones No Capturadas","text":"<p>Problema: Excepciones no manejadas por <code>@ControllerAdvice</code></p> <p>Soluciones: - Verificar que <code>@ControllerAdvice</code> est\u00e9 en el package correcto - Asegurar que la excepci\u00f3n tenga el <code>@ExceptionHandler</code> correspondiente - Revisar el orden de los manejadores de excepciones</p>"},{"location":"api/09-validacion-manejo-errores/#4-validaciones-personalizadas-no-funcionan","title":"4. Validaciones Personalizadas No Funcionan","text":"<p>Problema: Validadores personalizados no se ejecutan</p> <p>Soluciones: - Verificar que el validador est\u00e9 anotado con <code>@Component</code> - Asegurar que las dependencias est\u00e9n inyectadas correctamente - Confirmar que la anotaci\u00f3n est\u00e9 aplicada correctamente</p>"},{"location":"api/09-validacion-manejo-errores/#5-errores-de-serializacion-json","title":"5. Errores de Serializaci\u00f3n JSON","text":"<p>Problema: Errores al serializar respuestas de error</p> <p>Soluci\u00f3n: Configurar Jackson correctamente</p> <pre><code>// En application.properties\nspring.jackson.serialization.write-dates-as-timestamps=false\nspring.jackson.serialization.fail-on-empty-beans=false\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#mejores-practicas","title":"\ud83d\udccb Mejores Pr\u00e1cticas","text":""},{"location":"api/09-validacion-manejo-errores/#1-estrategia-de-validacion","title":"1. Estrategia de Validaci\u00f3n","text":"<pre><code>// \u2705 Validaci\u00f3n en capas\n@RestController\npublic class UserController {\n\n    @PostMapping\n    public ResponseEntity&lt;UserDTO&gt; create(@Valid @RequestBody UserCreateDTO user) {\n        // Validaci\u00f3n autom\u00e1tica por @Valid\n        User entity = userService.create(user); // Validaci\u00f3n de negocio en servicio\n        return ResponseEntity.ok(toDTO(entity));\n    }\n}\n\n@Service\npublic class UserService {\n\n    public User create(UserCreateDTO dto) {\n        // Validaciones de negocio espec\u00edficas\n        validateBusinessRules(dto);\n        return userRepository.save(toEntity(dto));\n    }\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#2-mensajes-de-error-consistentes","title":"2. Mensajes de Error Consistentes","text":"<pre><code>// \u2705 Estructura consistente de errores\npublic class ErrorResponseDTO {\n    private LocalDateTime timestamp;\n    private int status;\n    private String error;\n    private String message;\n    private String path;\n    private String errorCode; // Para identificaci\u00f3n program\u00e1tica\n    private Map&lt;String, String&gt; validationErrors; // Para errores de validaci\u00f3n\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#3-logging-apropiado","title":"3. Logging Apropiado","text":"<pre><code>// \u2705 Logging por niveles\n@ExceptionHandler(ValidationException.class)\npublic ResponseEntity&lt;ErrorResponseDTO&gt; handleValidation(ValidationException ex) {\n    logger.warn(\"Validation error: {}\", ex.getErrors()); // WARN para errores de usuario\n    return ResponseEntity.badRequest().body(createErrorResponse(ex));\n}\n\n@ExceptionHandler(Exception.class)\npublic ResponseEntity&lt;ErrorResponseDTO&gt; handleGeneral(Exception ex) {\n    logger.error(\"Unexpected error\", ex); // ERROR para errores del sistema\n    return ResponseEntity.status(500).body(createErrorResponse(ex));\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#4-validaciones-especificas-por-contexto","title":"4. Validaciones Espec\u00edficas por Contexto","text":"<pre><code>// \u2705 DTOs espec\u00edficos para diferentes operaciones\npublic class UserCreateDTO {\n    @NotBlank\n    @UniqueUsername\n    private String username;\n\n    @NotBlank\n    @Size(min = 6)\n    private String password; // Requerido para creaci\u00f3n\n}\n\npublic class UserUpdateDTO {\n    @NotBlank\n    private String username;\n\n    // Password opcional para actualizaci\u00f3n\n    @Size(min = 6)\n    private String password;\n}\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#5-testing-comprehensivo","title":"5. Testing Comprehensivo","text":"<pre><code>// \u2705 Tests para diferentes escenarios\n@Test\nvoid testValidationSuccess() { /* ... */ }\n\n@Test\nvoid testValidationFailure() { /* ... */ }\n\n@Test\nvoid testBusinessRuleViolation() { /* ... */ }\n\n@Test\nvoid testResourceNotFound() { /* ... */ }\n\n@Test\nvoid testUnexpectedError() { /* ... */ }\n</code></pre>"},{"location":"api/09-validacion-manejo-errores/#conceptos-clave-aprendidos","title":"\ud83c\udfaf Conceptos Clave Aprendidos","text":""},{"location":"api/09-validacion-manejo-errores/#validaciones","title":"\u2705 Validaciones","text":"<ul> <li>Bean Validation (JSR-303): Est\u00e1ndar para validaci\u00f3n declarativa</li> <li>Anotaciones de Validaci\u00f3n: <code>@NotNull</code>, <code>@NotBlank</code>, <code>@Size</code>, <code>@Email</code>, etc.</li> <li>Validaciones Personalizadas: Crear validadores espec\u00edficos del dominio</li> <li>Grupos de Validaci\u00f3n: Aplicar diferentes validaciones seg\u00fan el contexto</li> <li>Validaci\u00f3n en Capas: Controller, Service, Repository</li> </ul>"},{"location":"api/09-validacion-manejo-errores/#manejo-de-errores","title":"\u2705 Manejo de Errores","text":"<ul> <li>@ControllerAdvice: Manejo centralizado de excepciones</li> <li>@ExceptionHandler: Manejadores espec\u00edficos por tipo de excepci\u00f3n</li> <li>ResponseEntity: Control completo sobre respuestas HTTP</li> <li>C\u00f3digos de Estado: Uso apropiado de c\u00f3digos HTTP</li> <li>Estructura de Errores: Respuestas consistentes y \u00fatiles</li> </ul>"},{"location":"api/09-validacion-manejo-errores/#excepciones-personalizadas_1","title":"\u2705 Excepciones Personalizadas","text":"<ul> <li>BusinessException: Para reglas de negocio</li> <li>ResourceNotFoundException: Para recursos no encontrados</li> <li>ValidationException: Para validaciones complejas</li> <li>Jerarqu\u00eda de Excepciones: Organizaci\u00f3n l\u00f3gica</li> </ul>"},{"location":"api/09-validacion-manejo-errores/#internacionalizacion","title":"\u2705 Internacionalizaci\u00f3n","text":"<ul> <li>MessageSource: Configuraci\u00f3n de mensajes</li> <li>LocaleResolver: Resoluci\u00f3n de idioma</li> <li>Archivos de Propiedades: Mensajes por idioma</li> <li>Interpolaci\u00f3n: Par\u00e1metros din\u00e1micos en mensajes</li> </ul>"},{"location":"api/09-validacion-manejo-errores/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":"<p>En el siguiente tutorial aprender\u00e1s sobre:</p> <ol> <li>Seguridad y Autenticaci\u00f3n</li> <li>Spring Security</li> <li>JWT Tokens</li> <li>Autorizaci\u00f3n por roles</li> <li> <p>Protecci\u00f3n de endpoints</p> </li> <li> <p>Testing Avanzado</p> </li> <li>Tests de seguridad</li> <li>Tests de performance</li> <li>Tests de integraci\u00f3n completos</li> <li> <p>Mocking avanzado</p> </li> <li> <p>Documentaci\u00f3n de API</p> </li> <li>OpenAPI/Swagger</li> <li>Documentaci\u00f3n autom\u00e1tica</li> <li>Ejemplos de uso</li> <li> <p>Testing desde documentaci\u00f3n</p> </li> <li> <p>Monitoreo y Observabilidad</p> </li> <li>M\u00e9tricas personalizadas</li> <li>Distributed tracing</li> <li>Health checks avanzados</li> <li>Alertas y notificaciones</li> </ol> <p>\u00a1Felicitaciones! \ud83c\udf89 Has implementado un sistema robusto de validaci\u00f3n y manejo de errores que hace tu aplicaci\u00f3n m\u00e1s segura, confiable y f\u00e1cil de usar. <pre><code>**Respuesta esperada (201 Created):**\n```json\n{\n  \"id\": 1,\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"role\": \"USER\"\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#crear-usuario-invalido-validacion","title":"Crear Usuario Inv\u00e1lido (Validaci\u00f3n)","text":"<pre><code>curl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"ab\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\"\n  }'\n</code></pre> <p>Respuesta esperada (400 Bad Request): <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00\",\n  \"status\": 400,\n  \"error\": \"Validation Failed\",\n  \"message\": \"Input validation failed\",\n  \"path\": \"/api/users\",\n  \"validationErrors\": {\n    \"username\": \"Username must be between 3 and 50 characters\",\n    \"email\": \"Email must be valid\",\n    \"password\": \"Password must be at least 6 characters\",\n    \"role\": \"Role cannot be blank\"\n  }\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#crear-usuario-duplicado-regla-de-negocio","title":"Crear Usuario Duplicado (Regla de Negocio)","text":"<pre><code># Crear el mismo usuario otra vez\ncurl -X POST http://localhost:8080/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"USER\"\n  }'\n</code></pre> <p>Respuesta esperada (409 Conflict): <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00\",\n  \"status\": 409,\n  \"error\": \"Conflict\",\n  \"message\": \"El nombre de usuario ya existe\",\n  \"path\": \"/api/users\"\n}\n</code></pre></p>"},{"location":"api/09-validacion-manejo-errores/#resumen","title":"\ud83c\udfaf Resumen","text":"<p>En este tutorial has aprendido:</p> <p>\u2705 Bean Validation - Validaciones autom\u00e1ticas con anotaciones \u2705 Manejo Centralizado de Errores - @ControllerAdvice para respuestas consistentes \u2705 Excepciones Personalizadas - Crear excepciones espec\u00edficas del dominio \u2705 Validaciones de Negocio - Implementar reglas complejas en servicios \u2705 Internacionalizaci\u00f3n - Mensajes de error en m\u00faltiples idiomas \u2705 Testing de Validaciones - Verificar que las validaciones funcionan correctamente</p>"},{"location":"api/09-validacion-manejo-errores/#proximos-pasos_1","title":"\ud83d\udd17 Pr\u00f3ximos Pasos","text":"<ul> <li>Seguridad: Autenticaci\u00f3n y autorizaci\u00f3n con Spring Security</li> <li>Testing Avanzado: Pruebas de integraci\u00f3n y unitarias</li> <li>Documentaci\u00f3n: Swagger/OpenAPI para documentar la API</li> <li>Monitoreo: M\u00e9tricas y logging avanzado</li> </ul> <p>\u2190 Anterior: Actuator y Monitoreo | Volver al \u00cdndice</p>"},{"location":"api/10-Repositorio/","title":"10. Repositorio","text":"<pre><code>https://github.com/jfinfocesde/act_pi_e1.git\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/post1/","title":"Happy new years eve!","text":"<p>We hope you are all having fun and wish you all the best for the new year!</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p>"},{"location":"content/p10/","title":"Semana 10 - Servicios Avanzados en Spring Boot","text":"<p>Resumen ejecutivo</p> <p>En esta semana aprenderemos t\u00e9cnicas avanzadas para servicios en Spring Boot: manejo de excepciones personalizadas, integraci\u00f3n completa con controladores REST, y patrones avanzados para aplicaciones robustas.</p>"},{"location":"content/p10/#1-manejo-de-excepciones-personalizadas","title":"1. Manejo de excepciones personalizadas","text":""},{"location":"content/p10/#11-crear-excepciones-de-negocio","title":"1.1 Crear excepciones de negocio","text":"<pre><code>// Excepci\u00f3n base\npublic class BusinessException extends RuntimeException {\n    public BusinessException(String message) {\n        super(message);\n    }\n}\n\n// Excepciones espec\u00edficas\npublic class ProductoNotFoundException extends BusinessException {\n    public ProductoNotFoundException(String message) {\n        super(message);\n    }\n}\n\npublic class StockInsuficienteException extends BusinessException {\n    public StockInsuficienteException(String message) {\n        super(message);\n    }\n}\n</code></pre>"},{"location":"content/p10/#12-manejador-global-de-excepciones","title":"1.2 Manejador global de excepciones","text":"<pre><code>@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ProductoNotFoundException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleProductoNotFound(ProductoNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"PRODUCTO_NO_ENCONTRADO\",\n            ex.getMessage(),\n            LocalDateTime.now()\n        );\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n    }\n\n    @ExceptionHandler(StockInsuficienteException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleStockInsuficiente(StockInsuficienteException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"STOCK_INSUFICIENTE\",\n            ex.getMessage(),\n            LocalDateTime.now()\n        );\n        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleIllegalArgument(IllegalArgumentException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"DATOS_INVALIDOS\",\n            ex.getMessage(),\n            LocalDateTime.now()\n        );\n        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);\n    }\n}\n\n@Data\n@AllArgsConstructor\npublic class ErrorResponse {\n    private String codigo;\n    private String mensaje;\n    private LocalDateTime timestamp;\n}\n</code></pre>"},{"location":"content/p10/#2-servicio-avanzado-con-excepciones","title":"2. Servicio avanzado con excepciones","text":"<pre><code>@Service\n@Transactional\npublic class ProductoServiceAvanzado {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Actualizar producto con validaciones completas\n    public ProductoDTO actualizarProducto(Long id, CrearProductoDTO dto) {\n        // 1. Verificar que existe\n        Producto producto = productoRepository.findById(id)\n            .orElseThrow(() -&gt; new ProductoNotFoundException(\n                \"Producto no encontrado con ID: \" + id));\n\n        // 2. Validaciones de negocio\n        validarDatosProducto(dto);\n\n        // 3. Actualizar campos\n        producto.setNombre(dto.getNombre());\n        producto.setDescripcion(dto.getDescripcion());\n        producto.setPrecio(dto.getPrecio());\n        producto.setStock(dto.getStock());\n\n        // 4. Guardar y retornar\n        Producto actualizado = productoRepository.save(producto);\n        return convertirADTO(actualizado);\n    }\n\n    // Actualizar stock con validaci\u00f3n\n    public ProductoDTO actualizarStock(Long id, Integer cantidadVendida) {\n        Producto producto = productoRepository.findById(id)\n            .orElseThrow(() -&gt; new ProductoNotFoundException(\n                \"Producto no encontrado con ID: \" + id));\n\n        // Validar stock suficiente\n        if (producto.getStock() &lt; cantidadVendida) {\n            throw new StockInsuficienteException(\n                String.format(\"Stock insuficiente. Disponible: %d, Solicitado: %d\", \n                             producto.getStock(), cantidadVendida));\n        }\n\n        // Actualizar stock\n        producto.setStock(producto.getStock() - cantidadVendida);\n\n        // Si stock llega a 0, marcar como inactivo\n        if (producto.getStock() == 0) {\n            producto.setActivo(false);\n        }\n\n        Producto actualizado = productoRepository.save(producto);\n        return convertirADTO(actualizado);\n    }\n\n    // Eliminar producto (eliminaci\u00f3n l\u00f3gica)\n    public void eliminarProducto(Long id) {\n        Producto producto = productoRepository.findById(id)\n            .orElseThrow(() -&gt; new ProductoNotFoundException(\n                \"Producto no encontrado con ID: \" + id));\n\n        producto.setActivo(false);\n        productoRepository.save(producto);\n    }\n\n    // Validaciones privadas\n    private void validarDatosProducto(CrearProductoDTO dto) {\n        if (dto.getNombre() == null || dto.getNombre().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"El nombre es obligatorio\");\n        }\n\n        if (dto.getPrecio() == null || dto.getPrecio().compareTo(BigDecimal.ZERO) &lt;= 0) {\n            throw new IllegalArgumentException(\"El precio debe ser mayor a 0\");\n        }\n\n        if (dto.getStock() == null || dto.getStock() &lt; 0) {\n            throw new IllegalArgumentException(\"El stock no puede ser negativo\");\n        }\n    }\n\n    private ProductoDTO convertirADTO(Producto producto) {\n        ProductoDTO dto = new ProductoDTO();\n        dto.setId(producto.getId());\n        dto.setNombre(producto.getNombre());\n        dto.setDescripcion(producto.getDescripcion());\n        dto.setPrecio(producto.getPrecio());\n        dto.setStock(producto.getStock());\n        dto.setActivo(producto.getActivo());\n        return dto;\n    }\n}\n</code></pre>"},{"location":"content/p10/#3-controlador-rest-completo","title":"3. Controlador REST completo","text":"<pre><code>@RestController\n@RequestMapping(\"/api/productos\")\n@Validated\npublic class ProductoController {\n\n    @Autowired\n    private ProductoServiceAvanzado productoService;\n\n    // Crear producto\n    @PostMapping\n    public ResponseEntity&lt;ProductoDTO&gt; crearProducto(\n            @Valid @RequestBody CrearProductoDTO dto) {\n        ProductoDTO producto = productoService.crearProducto(dto);\n        return ResponseEntity.status(HttpStatus.CREATED).body(producto);\n    }\n\n    // Obtener por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;ProductoDTO&gt; obtenerProducto(@PathVariable Long id) {\n        ProductoDTO producto = productoService.obtenerPorId(id);\n        return ResponseEntity.ok(producto);\n    }\n\n    // Listar productos activos\n    @GetMapping(\"/activos\")\n    public ResponseEntity&lt;List&lt;ProductoDTO&gt;&gt; obtenerActivos() {\n        List&lt;ProductoDTO&gt; productos = productoService.obtenerActivos();\n        return ResponseEntity.ok(productos);\n    }\n\n    // Buscar por nombre\n    @GetMapping(\"/buscar\")\n    public ResponseEntity&lt;List&lt;ProductoDTO&gt;&gt; buscarPorNombre(\n            @RequestParam String nombre) {\n        List&lt;ProductoDTO&gt; productos = productoService.buscarPorNombre(nombre);\n        return ResponseEntity.ok(productos);\n    }\n\n    // Actualizar producto\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;ProductoDTO&gt; actualizarProducto(\n            @PathVariable Long id,\n            @Valid @RequestBody CrearProductoDTO dto) {\n        ProductoDTO producto = productoService.actualizarProducto(id, dto);\n        return ResponseEntity.ok(producto);\n    }\n\n    // Actualizar stock\n    @PatchMapping(\"/{id}/stock\")\n    public ResponseEntity&lt;ProductoDTO&gt; actualizarStock(\n            @PathVariable Long id,\n            @RequestParam @Min(1) Integer cantidad) {\n        ProductoDTO producto = productoService.actualizarStock(id, cantidad);\n        return ResponseEntity.ok(producto);\n    }\n\n    // Eliminar producto\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; eliminarProducto(@PathVariable Long id) {\n        productoService.eliminarProducto(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"content/p10/#4-patrones-avanzados","title":"4. Patrones avanzados","text":""},{"location":"content/p10/#41-composicion-de-servicios","title":"4.1 Composici\u00f3n de servicios","text":"<pre><code>@Service\n@Transactional\npublic class VentaService {\n\n    @Autowired\n    private ProductoServiceAvanzado productoService;\n\n    @Autowired\n    private VentaRepository ventaRepository;\n\n    // Procesar venta (usa m\u00faltiples servicios)\n    public VentaDTO procesarVenta(CrearVentaDTO ventaDTO) {\n        // 1. Validar productos y stock\n        for (ItemVentaDTO item : ventaDTO.getItems()) {\n            ProductoDTO producto = productoService.obtenerPorId(item.getProductoId());\n\n            if (producto.getStock() &lt; item.getCantidad()) {\n                throw new StockInsuficienteException(\n                    \"Stock insuficiente para producto: \" + producto.getNombre());\n            }\n        }\n\n        // 2. Crear venta\n        Venta venta = new Venta();\n        venta.setFecha(LocalDateTime.now());\n        venta.setTotal(calcularTotal(ventaDTO.getItems()));\n\n        // 3. Actualizar stock de productos\n        for (ItemVentaDTO item : ventaDTO.getItems()) {\n            productoService.actualizarStock(item.getProductoId(), item.getCantidad());\n        }\n\n        // 4. Guardar venta\n        Venta ventaGuardada = ventaRepository.save(venta);\n\n        return convertirVentaADTO(ventaGuardada);\n    }\n\n    private BigDecimal calcularTotal(List&lt;ItemVentaDTO&gt; items) {\n        return items.stream()\n            .map(item -&gt; {\n                ProductoDTO producto = productoService.obtenerPorId(item.getProductoId());\n                return producto.getPrecio().multiply(BigDecimal.valueOf(item.getCantidad()));\n            })\n            .reduce(BigDecimal.ZERO, BigDecimal::add);\n    }\n\n    private VentaDTO convertirVentaADTO(Venta venta) {\n        // Conversi\u00f3n de entidad a DTO\n        VentaDTO dto = new VentaDTO();\n        dto.setId(venta.getId());\n        dto.setFecha(venta.getFecha());\n        dto.setTotal(venta.getTotal());\n        return dto;\n    }\n}\n</code></pre>"},{"location":"content/p10/#42-cache-simple","title":"4.2 Cache simple","text":"<pre><code>@Service\n@Transactional\npublic class ProductoServiceConCache {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Cache simple en memoria\n    private Map&lt;Long, ProductoDTO&gt; cache = new ConcurrentHashMap&lt;&gt;();\n\n    @Transactional(readOnly = true)\n    public ProductoDTO obtenerPorIdConCache(Long id) {\n        // 1. Verificar cache\n        if (cache.containsKey(id)) {\n            return cache.get(id);\n        }\n\n        // 2. Buscar en base de datos\n        Producto producto = productoRepository.findById(id)\n            .orElseThrow(() -&gt; new ProductoNotFoundException(\n                \"Producto no encontrado con ID: \" + id));\n\n        // 3. Convertir y guardar en cache\n        ProductoDTO dto = convertirADTO(producto);\n        cache.put(id, dto);\n\n        return dto;\n    }\n\n    // Limpiar cache al actualizar\n    public ProductoDTO actualizarProducto(Long id, CrearProductoDTO dto) {\n        // Actualizar producto\n        ProductoDTO actualizado = actualizarProductoEnBD(id, dto);\n\n        // Limpiar cache\n        cache.remove(id);\n\n        return actualizado;\n    }\n\n    private ProductoDTO actualizarProductoEnBD(Long id, CrearProductoDTO dto) {\n        // L\u00f3gica de actualizaci\u00f3n...\n        return new ProductoDTO(); // Simplificado\n    }\n\n    private ProductoDTO convertirADTO(Producto producto) {\n        // Conversi\u00f3n...\n        return new ProductoDTO(); // Simplificado\n    }\n}\n</code></pre>"},{"location":"content/p10/#5-testing-de-servicios","title":"5. Testing de servicios","text":""},{"location":"content/p10/#51-test-unitario","title":"5.1 Test unitario","text":"<pre><code>@ExtendWith(MockitoExtension.class)\nclass ProductoServiceTest {\n\n    @Mock\n    private ProductoRepository productoRepository;\n\n    @InjectMocks\n    private ProductoServiceAvanzado productoService;\n\n    @Test\n    void deberiaCrearProductoCorrectamente() {\n        // Given\n        CrearProductoDTO dto = new CrearProductoDTO();\n        dto.setNombre(\"Producto Test\");\n        dto.setPrecio(BigDecimal.valueOf(100));\n        dto.setStock(50);\n\n        Producto producto = new Producto();\n        producto.setId(1L);\n        producto.setNombre(\"Producto Test\");\n\n        when(productoRepository.save(any(Producto.class))).thenReturn(producto);\n\n        // When\n        ProductoDTO resultado = productoService.crearProducto(dto);\n\n        // Then\n        assertThat(resultado.getNombre()).isEqualTo(\"Producto Test\");\n        verify(productoRepository).save(any(Producto.class));\n    }\n\n    @Test\n    void deberiaLanzarExcepcionCuandoProductoNoExiste() {\n        // Given\n        Long id = 999L;\n        when(productoRepository.findById(id)).thenReturn(Optional.empty());\n\n        // When &amp; Then\n        assertThrows(ProductoNotFoundException.class, \n                    () -&gt; productoService.obtenerPorId(id));\n    }\n}\n</code></pre>"},{"location":"content/p10/#6-ejercicios-practicos","title":"6. Ejercicios pr\u00e1cticos","text":""},{"location":"content/p10/#ejercicio-1-excepciones-personalizadas","title":"Ejercicio 1: Excepciones personalizadas","text":"<p>Crea excepciones para: - <code>EmailDuplicadoException</code> - <code>UsuarioInactivoException</code> - <code>PermisoInsuficienteException</code></p>"},{"location":"content/p10/#ejercicio-2-servicio-de-pedidos","title":"Ejercicio 2: Servicio de pedidos","text":"<p>Implementa un <code>PedidoService</code> que: - Valide stock antes de crear pedido - Calcule total con descuentos - Actualice inventario autom\u00e1ticamente</p>"},{"location":"content/p10/#ejercicio-3-cache-avanzado","title":"Ejercicio 3: Cache avanzado","text":"<p>Mejora el cache para: - Expirar entradas despu\u00e9s de 5 minutos - Limitar tama\u00f1o m\u00e1ximo a 100 elementos - Limpiar cache autom\u00e1ticamente</p>"},{"location":"content/p10/#7-mejores-practicas","title":"7. Mejores pr\u00e1cticas","text":"<p>Consejos importantes</p> <ul> <li>Excepciones espec\u00edficas: Crea excepciones para cada caso de negocio</li> <li>Validaciones tempranas: Valida datos al inicio del m\u00e9todo</li> <li>Transacciones: Usa <code>@Transactional</code> para operaciones que modifican datos</li> <li>Testing: Siempre escribe tests para la l\u00f3gica de negocio</li> <li>Separaci\u00f3n de responsabilidades: Un servicio, una responsabilidad</li> <li>Logging: Registra operaciones importantes para debugging</li> </ul>"},{"location":"content/p11/","title":"Semana 11 - Controladores Spring Boot API REST","text":""},{"location":"content/p11/#introduccion-a-los-controladores-rest","title":"Introducci\u00f3n a los Controladores REST","text":"<p>Los controladores REST en Spring Boot son componentes fundamentales que manejan las peticiones HTTP y definen los endpoints de nuestra API. Utilizan anotaciones espec\u00edficas para mapear URLs a m\u00e9todos Java y gestionar las operaciones CRUD.</p>"},{"location":"content/p11/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":""},{"location":"content/p11/#que-es-un-controlador-rest","title":"\u00bfQu\u00e9 es un Controlador REST?","text":"<p>Un controlador REST es una clase Java que: - Maneja peticiones HTTP (GET, POST, PUT, DELETE) - Procesa datos de entrada y salida - Coordina la l\u00f3gica de negocio - Retorna respuestas en formato JSON/XML</p>"},{"location":"content/p11/#anotaciones-principales","title":"Anotaciones Principales","text":""},{"location":"content/p11/#restcontroller","title":"@RestController","text":"<p>Combina <code>@Controller</code> y <code>@ResponseBody</code>, indicando que la clase maneja peticiones REST y retorna datos directamente (no vistas).</p> <pre><code>@RestController\n@RequestMapping(\"/api/v1\")\npublic class ProductoController {\n    // m\u00e9todos del controlador\n}\n</code></pre>"},{"location":"content/p11/#requestmapping","title":"@RequestMapping","text":"<p>Define la ruta base para todos los endpoints del controlador.</p>"},{"location":"content/p11/#anotaciones-de-metodos-http","title":"Anotaciones de M\u00e9todos HTTP","text":"<ul> <li><code>@GetMapping</code> - Para operaciones de lectura</li> <li><code>@PostMapping</code> - Para crear recursos</li> <li><code>@PutMapping</code> - Para actualizar recursos completos</li> <li><code>@PatchMapping</code> - Para actualizaciones parciales</li> <li><code>@DeleteMapping</code> - Para eliminar recursos</li> </ul>"},{"location":"content/p11/#ejemplo-practico-api-de-productos","title":"Ejemplo Pr\u00e1ctico: API de Productos","text":""},{"location":"content/p11/#1-modelo-de-datos","title":"1. Modelo de Datos","text":"<pre><code>@Entity\n@Table(name = \"productos\")\npublic class Producto {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String nombre;\n\n    @Column(nullable = false)\n    private String descripcion;\n\n    @Column(nullable = false)\n    private BigDecimal precio;\n\n    @Column(nullable = false)\n    private Integer stock;\n\n    @CreationTimestamp\n    private LocalDateTime fechaCreacion;\n\n    // Constructores, getters y setters\n    public Producto() {}\n\n    public Producto(String nombre, String descripcion, BigDecimal precio, Integer stock) {\n        this.nombre = nombre;\n        this.descripcion = descripcion;\n        this.precio = precio;\n        this.stock = stock;\n    }\n\n    // Getters y Setters...\n}\n</code></pre>"},{"location":"content/p11/#2-dto-data-transfer-object","title":"2. DTO (Data Transfer Object)","text":"<pre><code>public class ProductoDTO {\n    private Long id;\n\n    @NotBlank(message = \"El nombre es obligatorio\")\n    @Size(min = 2, max = 100, message = \"El nombre debe tener entre 2 y 100 caracteres\")\n    private String nombre;\n\n    @NotBlank(message = \"La descripci\u00f3n es obligatoria\")\n    @Size(max = 500, message = \"La descripci\u00f3n no puede exceder 500 caracteres\")\n    private String descripcion;\n\n    @NotNull(message = \"El precio es obligatorio\")\n    @DecimalMin(value = \"0.0\", inclusive = false, message = \"El precio debe ser mayor a 0\")\n    private BigDecimal precio;\n\n    @NotNull(message = \"El stock es obligatorio\")\n    @Min(value = 0, message = \"El stock no puede ser negativo\")\n    private Integer stock;\n\n    private LocalDateTime fechaCreacion;\n\n    // Constructores, getters y setters...\n}\n</code></pre>"},{"location":"content/p11/#3-servicio","title":"3. Servicio","text":"<pre><code>@Service\n@Transactional\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    @Autowired\n    private ModelMapper modelMapper;\n\n    public List&lt;ProductoDTO&gt; obtenerTodos() {\n        List&lt;Producto&gt; productos = productoRepository.findAll();\n        return productos.stream()\n                .map(producto -&gt; modelMapper.map(producto, ProductoDTO.class))\n                .collect(Collectors.toList());\n    }\n\n    public ProductoDTO obtenerPorId(Long id) {\n        Producto producto = productoRepository.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"Producto no encontrado con ID: \" + id));\n        return modelMapper.map(producto, ProductoDTO.class);\n    }\n\n    public ProductoDTO crear(ProductoDTO productoDTO) {\n        Producto producto = modelMapper.map(productoDTO, Producto.class);\n        Producto productoGuardado = productoRepository.save(producto);\n        return modelMapper.map(productoGuardado, ProductoDTO.class);\n    }\n\n    public ProductoDTO actualizar(Long id, ProductoDTO productoDTO) {\n        Producto producto = productoRepository.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"Producto no encontrado con ID: \" + id));\n\n        producto.setNombre(productoDTO.getNombre());\n        producto.setDescripcion(productoDTO.getDescripcion());\n        producto.setPrecio(productoDTO.getPrecio());\n        producto.setStock(productoDTO.getStock());\n\n        Producto productoActualizado = productoRepository.save(producto);\n        return modelMapper.map(productoActualizado, ProductoDTO.class);\n    }\n\n    public void eliminar(Long id) {\n        if (!productoRepository.existsById(id)) {\n            throw new ResourceNotFoundException(\"Producto no encontrado con ID: \" + id);\n        }\n        productoRepository.deleteById(id);\n    }\n}\n</code></pre>"},{"location":"content/p11/#4-controlador-rest-completo","title":"4. Controlador REST Completo","text":"<pre><code>@RestController\n@RequestMapping(\"/api/v1/productos\")\n@Validated\n@CrossOrigin(origins = \"*\")\npublic class ProductoController {\n\n    @Autowired\n    private ProductoService productoService;\n\n    /**\n     * Obtener todos los productos\n     * GET /api/v1/productos\n     */\n    @GetMapping\n    public ResponseEntity&lt;List&lt;ProductoDTO&gt;&gt; obtenerTodos() {\n        List&lt;ProductoDTO&gt; productos = productoService.obtenerTodos();\n        return ResponseEntity.ok(productos);\n    }\n\n    /**\n     * Obtener producto por ID\n     * GET /api/v1/productos/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;ProductoDTO&gt; obtenerPorId(@PathVariable Long id) {\n        ProductoDTO producto = productoService.obtenerPorId(id);\n        return ResponseEntity.ok(producto);\n    }\n\n    /**\n     * Crear nuevo producto\n     * POST /api/v1/productos\n     */\n    @PostMapping\n    public ResponseEntity&lt;ProductoDTO&gt; crear(@Valid @RequestBody ProductoDTO productoDTO) {\n        ProductoDTO nuevoProducto = productoService.crear(productoDTO);\n        return ResponseEntity.status(HttpStatus.CREATED).body(nuevoProducto);\n    }\n\n    /**\n     * Actualizar producto existente\n     * PUT /api/v1/productos/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;ProductoDTO&gt; actualizar(\n            @PathVariable Long id, \n            @Valid @RequestBody ProductoDTO productoDTO) {\n        ProductoDTO productoActualizado = productoService.actualizar(id, productoDTO);\n        return ResponseEntity.ok(productoActualizado);\n    }\n\n    /**\n     * Eliminar producto\n     * DELETE /api/v1/productos/{id}\n     */\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; eliminar(@PathVariable Long id) {\n        productoService.eliminar(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    /**\n     * Buscar productos por nombre\n     * GET /api/v1/productos/buscar?nombre=valor\n     */\n    @GetMapping(\"/buscar\")\n    public ResponseEntity&lt;List&lt;ProductoDTO&gt;&gt; buscarPorNombre(\n            @RequestParam String nombre) {\n        List&lt;ProductoDTO&gt; productos = productoService.buscarPorNombre(nombre);\n        return ResponseEntity.ok(productos);\n    }\n\n    /**\n     * Obtener productos con paginaci\u00f3n\n     * GET /api/v1/productos/paginado?page=0&amp;size=10&amp;sort=nombre,asc\n     */\n    @GetMapping(\"/paginado\")\n    public ResponseEntity&lt;Page&lt;ProductoDTO&gt;&gt; obtenerPaginado(\n            @PageableDefault(size = 10, sort = \"nombre\") Pageable pageable) {\n        Page&lt;ProductoDTO&gt; productos = productoService.obtenerPaginado(pageable);\n        return ResponseEntity.ok(productos);\n    }\n}\n</code></pre>"},{"location":"content/p11/#manejo-de-errores-y-validaciones","title":"Manejo de Errores y Validaciones","text":""},{"location":"content/p11/#1-excepciones-personalizadas","title":"1. Excepciones Personalizadas","text":"<pre><code>@ResponseStatus(HttpStatus.NOT_FOUND)\npublic class ResourceNotFoundException extends RuntimeException {\n    public ResourceNotFoundException(String message) {\n        super(message);\n    }\n}\n\n@ResponseStatus(HttpStatus.BAD_REQUEST)\npublic class BadRequestException extends RuntimeException {\n    public BadRequestException(String message) {\n        super(message);\n    }\n}\n</code></pre>"},{"location":"content/p11/#2-manejador-global-de-excepciones","title":"2. Manejador Global de Excepciones","text":"<pre><code>@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleResourceNotFound(ResourceNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.NOT_FOUND.value(),\n            ex.getMessage(),\n            LocalDateTime.now()\n        );\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleValidationErrors(MethodArgumentNotValidException ex) {\n        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();\n        ex.getBindingResult().getFieldErrors().forEach(error -&gt; \n            errors.put(error.getField(), error.getDefaultMessage())\n        );\n\n        ErrorResponse errorResponse = new ErrorResponse(\n            HttpStatus.BAD_REQUEST.value(),\n            \"Errores de validaci\u00f3n\",\n            LocalDateTime.now(),\n            errors\n        );\n\n        return ResponseEntity.badRequest().body(errorResponse);\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleGenericException(Exception ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.INTERNAL_SERVER_ERROR.value(),\n            \"Error interno del servidor\",\n            LocalDateTime.now()\n        );\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);\n    }\n}\n</code></pre>"},{"location":"content/p11/#3-clase-de-respuesta-de-error","title":"3. Clase de Respuesta de Error","text":"<pre><code>public class ErrorResponse {\n    private int status;\n    private String message;\n    private LocalDateTime timestamp;\n    private Map&lt;String, String&gt; errors;\n\n    // Constructores\n    public ErrorResponse(int status, String message, LocalDateTime timestamp) {\n        this.status = status;\n        this.message = message;\n        this.timestamp = timestamp;\n    }\n\n    public ErrorResponse(int status, String message, LocalDateTime timestamp, Map&lt;String, String&gt; errors) {\n        this.status = status;\n        this.message = message;\n        this.timestamp = timestamp;\n        this.errors = errors;\n    }\n\n    // Getters y Setters...\n}\n</code></pre>"},{"location":"content/p11/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"content/p11/#1-versionado-de-api","title":"1. Versionado de API","text":"<pre><code>@RequestMapping(\"/api/v1/productos\")\n</code></pre>"},{"location":"content/p11/#2-codigos-de-estado-http-apropiados","title":"2. C\u00f3digos de Estado HTTP Apropiados","text":"<ul> <li><code>200 OK</code> - Operaci\u00f3n exitosa</li> <li><code>201 Created</code> - Recurso creado</li> <li><code>204 No Content</code> - Eliminaci\u00f3n exitosa</li> <li><code>400 Bad Request</code> - Error de validaci\u00f3n</li> <li><code>404 Not Found</code> - Recurso no encontrado</li> <li><code>500 Internal Server Error</code> - Error del servidor</li> </ul>"},{"location":"content/p11/#3-documentacion-con-openapiswagger","title":"3. Documentaci\u00f3n con OpenAPI/Swagger","text":"<pre><code>@RestController\n@RequestMapping(\"/api/v1/productos\")\n@Tag(name = \"Productos\", description = \"API para gesti\u00f3n de productos\")\npublic class ProductoController {\n\n    @Operation(summary = \"Obtener todos los productos\")\n    @ApiResponses(value = {\n        @ApiResponse(responseCode = \"200\", description = \"Lista de productos obtenida exitosamente\"),\n        @ApiResponse(responseCode = \"500\", description = \"Error interno del servidor\")\n    })\n    @GetMapping\n    public ResponseEntity&lt;List&lt;ProductoDTO&gt;&gt; obtenerTodos() {\n        // implementaci\u00f3n\n    }\n}\n</code></pre>"},{"location":"content/p11/#4-validacion-de-entrada","title":"4. Validaci\u00f3n de Entrada","text":"<ul> <li>Usar <code>@Valid</code> para validar DTOs</li> <li>Implementar validaciones personalizadas cuando sea necesario</li> <li>Manejar errores de validaci\u00f3n apropiadamente</li> </ul>"},{"location":"content/p11/#5-seguridad","title":"5. Seguridad","text":"<pre><code>@PreAuthorize(\"hasRole('ADMIN')\")\n@PostMapping\npublic ResponseEntity&lt;ProductoDTO&gt; crear(@Valid @RequestBody ProductoDTO productoDTO) {\n    // implementaci\u00f3n\n}\n</code></pre>"},{"location":"content/p11/#pruebas-con-postmancurl","title":"Pruebas con Postman/cURL","text":""},{"location":"content/p11/#crear-producto","title":"Crear Producto","text":"<pre><code>curl -X POST http://localhost:8080/api/v1/productos \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"nombre\": \"Laptop Gaming\",\n    \"descripcion\": \"Laptop para gaming de alta gama\",\n    \"precio\": 1500.00,\n    \"stock\": 10\n  }'\n</code></pre>"},{"location":"content/p11/#obtener-todos-los-productos","title":"Obtener Todos los Productos","text":"<pre><code>curl -X GET http://localhost:8080/api/v1/productos\n</code></pre>"},{"location":"content/p11/#actualizar-producto","title":"Actualizar Producto","text":"<pre><code>curl -X PUT http://localhost:8080/api/v1/productos/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"nombre\": \"Laptop Gaming Pro\",\n    \"descripcion\": \"Laptop para gaming profesional\",\n    \"precio\": 1800.00,\n    \"stock\": 5\n  }'\n</code></pre>"},{"location":"content/p11/#eliminar-producto","title":"Eliminar Producto","text":"<pre><code>curl -X DELETE http://localhost:8080/api/v1/productos/1\n</code></pre>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p12/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p12/#codigo-mcktuwf2","title":"C\u00f3digo: MCKTUWF2","text":""},{"location":"content/p13/","title":"Documentaci\u00f3n de API con Spring Boot y OpenAPI","text":"<p>Este tutorial explica c\u00f3mo documentar APIs en una aplicaci\u00f3n Spring Boot usando springdoc-openapi, c\u00f3mo personalizar la documentaci\u00f3n, c\u00f3mo generar el JSON (OpenAPI) y c\u00f3mo importarlo en Postman.</p>"},{"location":"content/p13/#contrato-breve","title":"Contrato breve","text":"<ul> <li>Entrada: proyecto Spring Boot con controladores REST.</li> <li>Salida: documentaci\u00f3n OpenAPI disponible en /v3/api-docs (JSON) y pasos para importar en Postman.</li> <li>Modos de error: endpoints privados o protegidos requieren autenticaci\u00f3n para obtener el JSON.</li> </ul>"},{"location":"content/p13/#1-dependencias","title":"1) Dependencias","text":"<p>Maven (pom.xml):</p> <pre><code>&lt;!-- springdoc-openapi --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n  &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;\n  &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Nota: Ajusta la versi\u00f3n a la m\u00e1s reciente estable en el momento de uso.</p>"},{"location":"content/p13/#2-comportamiento-por-defecto","title":"2) Comportamiento por defecto","text":"<p>Al a\u00f1adir la dependencia, springdoc expone autom\u00e1ticamente:</p> <ul> <li>JSON OpenAPI: http://localhost:8080/v3/api-docs</li> <li>YAML OpenAPI: http://localhost:8080/v3/api-docs.yaml</li> <li>Swagger UI: http://localhost:8080/swagger-ui/index.html</li> </ul>"},{"location":"content/p13/#3-configuracion-y-personalizacion","title":"3) Configuraci\u00f3n y personalizaci\u00f3n","text":"<p>Ejemplo de bean <code>OpenAPI</code> (Java) para personalizar la metadata:</p> <pre><code>import io.swagger.v3.oas.models.info.Info;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class OpenApiConfig {\n    @Bean\n    public OpenAPI customOpenAPI() {\n        return new OpenAPI()\n            .info(new Info()\n                .title(\"Mi API\")\n                .version(\"v1.0.0\")\n                .description(\"Documentaci\u00f3n de ejemplo para Mi API\"));\n    }\n}\n</code></pre> <p>Tambi\u00e9n puedes usar <code>@OpenAPIDefinition</code> con <code>@Info</code>, <code>@Servers</code>, <code>@Contact</code> para anotar la clase principal.</p>"},{"location":"content/p13/#4-documentar-controladores-y-operaciones","title":"4) Documentar controladores y operaciones","text":"<p>Usa las anotaciones de <code>io.swagger.v3.oas.annotations</code>:</p> <pre><code>import io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/pets\")\npublic class PetController {\n\n    @Operation(summary = \"Listar mascotas\", description = \"Devuelve todas las mascotas\")\n    @ApiResponse(responseCode = \"200\", description = \"OK\")\n    @GetMapping\n    public List&lt;Pet&gt; list() {\n        return List.of();\n    }\n}\n</code></pre> <p>Las anotaciones permiten documentar par\u00e1metros, request bodies, respuestas y ejemplos.</p>"},{"location":"content/p13/#5-obtener-y-guardar-el-json-openapi","title":"5) Obtener y guardar el JSON OpenAPI","text":"<p>Arranca la aplicaci\u00f3n y visita <code>/v3/api-docs</code>.</p> <p>Para descargar con PowerShell (Windows / pwsh):</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost:8080/v3/api-docs\" -OutFile openapi.json\n\n# o\ncurl.exe \"http://localhost:8080/v3/api-docs\" -o openapi.json\n</code></pre>"},{"location":"content/p14/","title":"Semana 14 - Conceptos y t\u00e9rminos t\u00e9cnicos","text":""},{"location":"content/p14/#i-arquitectura-y-patrones-de-diseno","title":"I. Arquitectura y Patrones de Dise\u00f1o","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes API (Application Programming Interface) Un conjunto de reglas y especificaciones que permiten que dos piezas de software se comuniquen. Es el contrato que define qu\u00e9 puede pedir un cliente y qu\u00e9 responder\u00e1 el servidor. REST (Representational State Transfer) Un estilo arquitect\u00f3nico que prescribe c\u00f3mo debe dise\u00f1arse una API para que sea escalable, simple y uniforme. Produce un servicio web sin estado que expone recursos a trav\u00e9s de URLs, utiliza m\u00e9todos HTTP y devuelve datos normalmente en formato JSON. Patr\u00f3n de dise\u00f1o Una soluci\u00f3n reutilizable a un problema com\u00fan en el dise\u00f1o de software. Mejora la mantenibilidad, escalabilidad y claridad del sistema. MVC (Modelo-Vista-Controlador) Patr\u00f3n de dise\u00f1o que separa responsabilidades en tres capas: Modelo (datos y l\u00f3gica de negocio), Vista (representaci\u00f3n al usuario, como JSON) y Controlador (orquesta peticiones y respuestas). Modelo (Capa) La capa del patr\u00f3n MVC que incluye las Entidades JPA, repositorios, servicios, reglas de negocio y validaciones de la aplicaci\u00f3n. Vista (Capa en API REST) La representaci\u00f3n del recurso que se entrega, que en el contexto de una API REST es el JSON serializado (o DTOs). Controlador (Capa) La capa que recibe peticiones HTTP, coordina la l\u00f3gica de negocio llamando al servicio y devuelve la respuesta, implementado como <code>@RestController</code> en Spring Boot. Sin estado (Stateless) Restricci\u00f3n REST que obliga a que cada petici\u00f3n contenga toda la informaci\u00f3n necesaria, beneficiando la escalabilidad horizontal. Recurso (REST) Cualquier cosa que pueda ser nombrada (un usuario, un pedido) y que se identifica mediante una URI \u00fanica. Endpoint La combinaci\u00f3n de un verbo HTTP y una ruta que apunta a un recurso o colecci\u00f3n (ej. <code>GET /usuarios/5</code>). Cliente REST Cualquier programa que consume la API siguiendo el contrato REST (ej. navegador, aplicaci\u00f3n m\u00f3vil, scripts CLI). DTO (Data Transfer Object) Objeto de transferencia de datos. Son objetos que representan la Vista en una API REST y se usan para evitar exponer directamente las entidades JPA. Servicio en la Nube Un entorno de ejecuci\u00f3n remoto (IaaS, PaaS o SaaS) donde se despliega la API REST, ofreciendo escalabilidad autom\u00e1tica, alta disponibilidad y balanceo de carga. JSON (JavaScript Object Notation) Formato ligero, nativo en JavaScript, f\u00e1cil de leer y escribir, y universalmente soportado, que se utiliza generalmente como formato de mensaje en APIs REST."},{"location":"content/p14/#ii-componentes-y-anotaciones-de-spring-boot-y-rest","title":"II. Componentes y Anotaciones de Spring Boot y REST","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Spring Boot Un framework basado en Java que simplifica el desarrollo de aplicaciones empresariales, permitiendo crear proyectos standalone con m\u00ednima configuraci\u00f3n. Spring Initializr Herramienta web que se utiliza para generar y descargar un proyecto base de Spring Boot, seleccionando las dependencias (starters) necesarias. Starters (Spring Boot) Plantillas preconfiguradas que Spring Boot proporciona para incluir dependencias comunes, autoconfiguraci\u00f3n y un servidor embebido (ej. Spring Web, Spring Data JPA). <code>@RestController</code> Anotaci\u00f3n que combina <code>@Controller</code> y <code>@ResponseBody</code>, indicando que la clase maneja peticiones REST y retorna datos directamente (JSON). <code>@RequestMapping</code> Anotaci\u00f3n que define la ruta base para todos los endpoints del controlador o de una clase. <code>@GetMapping</code> Anotaci\u00f3n de m\u00e9todo HTTP para operaciones de lectura (Read). <code>@PostMapping</code> Anotaci\u00f3n de m\u00e9todo HTTP para crear recursos (Create). <code>@PutMapping</code> Anotaci\u00f3n de m\u00e9todo HTTP para reemplazar completamente un recurso (Update/Replace). Es idempotente. <code>@PatchMapping</code> Anotaci\u00f3n de m\u00e9todo HTTP para realizar actualizaciones parciales de un recurso (Update/Partial). <code>@DeleteMapping</code> Anotaci\u00f3n de m\u00e9todo HTTP para eliminar un recurso (Delete). <code>ResponseEntity</code> Clase utilizada para construir respuestas HTTP completas, permitiendo configurar el cuerpo y el c\u00f3digo de estado (ej. 201 Created, 204 No Content). <code>@Service</code> Anotaci\u00f3n que marca una clase como un componente de servicio, donde reside la l\u00f3gica de negocio. Es una especializaci\u00f3n de <code>@Component</code>. <code>@Transactional</code> Anotaci\u00f3n que habilita el manejo autom\u00e1tico de transacciones de base de datos, asegurando que las operaciones se realicen de forma at\u00f3mica y que se haga rollback en caso de error. Se puede usar a nivel de clase o m\u00e9todo. <code>@Autowired</code> Anotaci\u00f3n utilizada para la inyecci\u00f3n de dependencias (ej. inyectar un Repositorio en un Servicio). <code>@PathVariable</code> Anotaci\u00f3n para extraer un valor de una variable de la ruta URI (ej. el ID en <code>/productos/{id}</code>). <code>@RequestParam</code> Anotaci\u00f3n para obtener par\u00e1metros de consulta de la URL (ej. <code>/buscar?nombre=valor</code>). <code>@RequestBody</code> Anotaci\u00f3n para mapear el cuerpo de la petici\u00f3n HTTP (normalmente JSON) a un objeto Java (DTO). <code>@Valid</code> Anotaci\u00f3n usada en par\u00e1metros de m\u00e9todos de controlador para invocar la validaci\u00f3n de un DTO (basada en anotaciones como <code>@NotBlank</code>, <code>@Min</code>). <code>@Validated</code> Anotaci\u00f3n utilizada para habilitar la validaci\u00f3n de par\u00e1metros de m\u00e9todo en la clase Controladora. <code>@CrossOrigin</code> Anotaci\u00f3n que gestiona las pol\u00edticas de CORS (Cross-Origin Resource Sharing). Composici\u00f3n de servicios Patr\u00f3n donde un servicio orquesta operaciones utilizando m\u00faltiples otros servicios para completar una transacci\u00f3n compleja. Cache simple (en memoria) Patr\u00f3n avanzado de servicio que utiliza estructuras de datos como <code>ConcurrentHashMap</code> para almacenar resultados de consultas frecuentes y evitar llamadas repetidas a la base de datos."},{"location":"content/p14/#iii-jpa-entidades-y-bases-de-datos","title":"III. JPA, Entidades y Bases de Datos","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes JPA (Java Persistence API) API de persistencia utilizada en Spring Data JPA para definir entidades y manejar el mapeo objeto-relacional (ORM). ORM (Object-Relational Mapping) Mapeo de objetos Java (entidades) a registros de bases de datos relacionales. Entidad (JPA) Una clase Java anotada con <code>@Entity</code> que representa una tabla en la base de datos relacional. Cada instancia es una fila. <code>@Entity</code> Indica que la clase debe ser mapeada a una tabla en la base de datos. <code>@Table</code> Especifica el nombre de la tabla en la base de datos a la que se mapea la entidad. <code>@Id</code> Marca un campo como la clave primaria de la entidad. <code>@GeneratedValue</code> Define la estrategia (ej. <code>IDENTITY</code>, <code>SEQUENCE</code>) para generar autom\u00e1ticamente los valores de la clave primaria. <code>@Column</code> Especifica detalles sobre c\u00f3mo un atributo se mapea a una columna (nombre, si es nullable, longitud, si es \u00fanico). <code>@Transient</code> Indica que un campo de la clase no debe ser persistido en la base de datos. <code>@Enumerated</code> Mapea un campo de tipo <code>enum</code> a una columna en la base de datos, especificando si se almacena como <code>STRING</code> o <code>ORDINAL</code>. <code>@CreationTimestamp</code> Anotaci\u00f3n utilizada para establecer autom\u00e1ticamente la marca de tiempo cuando se crea la entidad. Lombok Herramienta que reduce el c\u00f3digo repetitivo al generar autom\u00e1ticamente getters, setters y constructores. <code>@Data</code> es una anotaci\u00f3n de Lombok que combina varios m\u00e9todos de generaci\u00f3n de c\u00f3digo."},{"location":"content/p14/#iv-repositorios-y-acceso-a-datos","title":"IV. Repositorios y Acceso a Datos","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Repositorio (Spring Data JPA) Una interfaz que act\u00faa como una capa de abstracci\u00f3n entre la l\u00f3gica de negocio y la base de datos, proporcionando m\u00e9todos CRUD. Spring Data JPA genera su implementaci\u00f3n autom\u00e1ticamente. CRUD Acr\u00f3nimo de las operaciones b\u00e1sicas: Create, Read, Update, Delete. <code>JpaRepository&lt;T, ID&gt;</code> La interfaz de repositorio m\u00e1s completa en Spring Data JPA, que extiende <code>PagingAndSortingRepository</code> y ofrece funcionalidades completas de JPA. <code>CrudRepository&lt;T, ID&gt;</code> Interfaz que proporciona las operaciones CRUD b\u00e1sicas (<code>save</code>, <code>findById</code>, <code>findAll</code>, <code>deleteById</code>). <code>PagingAndSortingRepository</code> Interfaz que a\u00f1ade funcionalidad de paginaci\u00f3n y ordenamiento a los repositorios. Query Methods (M\u00e9todos derivados) Consultas generadas autom\u00e1ticamente por Spring Data JPA bas\u00e1ndose en la convenci\u00f3n de nombres del m\u00e9todo de la interfaz (ej. <code>findByNombreAndActivo</code>). <code>@Query</code> Anotaci\u00f3n utilizada para escribir consultas personalizadas cuando los m\u00e9todos derivados no son suficientes. Permite usar JPQL o SQL nativo. JPQL (Java Persistence Query Language) Lenguaje de consulta orientado a entidades (objetos Java) que se usa con <code>@Query</code>. SQL nativo Consultas escritas directamente en el lenguaje de la base de datos, que deben ser marcadas con <code>nativeQuery = true</code> dentro de <code>@Query</code>. <code>@Modifying</code> Anotaci\u00f3n requerida en m\u00e9todos <code>@Query</code> que realizan operaciones de modificaci\u00f3n de datos (UPDATE o DELETE). <code>Pageable</code> Interfaz utilizada en los repositorios para manejar los par\u00e1metros de paginaci\u00f3n (n\u00famero de p\u00e1gina, tama\u00f1o) y ordenamiento. <code>Sort</code> Objeto utilizado para definir los criterios de ordenamiento en las consultas."},{"location":"content/p14/#v-relaciones-y-serializacion-jpa-y-jackson","title":"V. Relaciones y Serializaci\u00f3n (JPA y Jackson)","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Relaciones en JPA Mecanismo utilizado para modelar asociaciones entre entidades, correspondientes a las asociaciones entre tablas en bases de datos relacionales. <code>@OneToOne</code> Define una relaci\u00f3n uno a uno: una instancia de una entidad asociada a exactamente una instancia de otra. <code>@OneToMany</code> Define una relaci\u00f3n uno a muchos: una instancia de una entidad asociada a m\u00faltiples instancias de otra. <code>@ManyToOne</code> Define una relaci\u00f3n muchos a uno: m\u00faltiples instancias de una entidad asociadas a una sola instancia de otra. <code>@ManyToMany</code> Define una relaci\u00f3n muchos a muchos: requiere una tabla intermedia, ya que m\u00faltiples instancias de A se asocian a m\u00faltiples instancias de B. <code>@JoinColumn</code> Anotaci\u00f3n que especifica la columna de la clave for\u00e1nea en la base de datos, usada t\u00edpicamente en el lado propietario de la relaci\u00f3n. <code>@JoinTable</code> Anotaci\u00f3n que define la tabla intermedia (o pivote) necesaria para las relaciones muchos a muchos. <code>mappedBy</code> Se usa en el lado \"inverso\" o no propietario de una relaci\u00f3n bidireccional para especificar el campo en la otra entidad que gestiona la clave for\u00e1nea. Serializaci\u00f3n JSON El proceso de convertir objetos Java (entidades) a una cadena de texto en formato JSON para su transferencia. Bucles infinitos (en JSON) Problema de serializaci\u00f3n que ocurre cuando dos objetos se referencian mutuamente en una relaci\u00f3n bidireccional, causando recursi\u00f3n infinita. <code>@JsonManagedReference</code> Anotaci\u00f3n de Jackson que se usa en el lado \"padre\" de una relaci\u00f3n bidireccional, indicando que este campo debe incluirse en la serializaci\u00f3n JSON. <code>@JsonBackReference</code> Anotaci\u00f3n de Jackson que se usa en el lado \"hijo\" de una relaci\u00f3n bidireccional, indicando que este campo no debe incluirse en la serializaci\u00f3n JSON para prevenir bucles infinitos. <code>CascadeType.ALL</code> Propagaci\u00f3n de operaciones (guardar, actualizar, eliminar) del padre a las entidades asociadas. <code>FetchType.LAZY</code> Estrategia de carga de datos donde la colecci\u00f3n o entidad asociada se carga de la base de datos solo cuando se accede a ella, lo cual es mejor para el rendimiento. <code>FetchType.EAGER</code> Estrategia de carga de datos donde la colecci\u00f3n o entidad asociada se carga inmediatamente al cargar la entidad principal."},{"location":"content/p14/#vi-documentacion-de-api-con-openapi","title":"VI. Documentaci\u00f3n de API con OpenAPI","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes OpenAPI Est\u00e1ndar de especificaci\u00f3n que permite estandarizar la descripci\u00f3n de una API REST. springdoc-openapi Herramienta utilizada en Spring Boot para generar autom\u00e1ticamente la documentaci\u00f3n OpenAPI. JSON OpenAPI El archivo JSON que contiene la descripci\u00f3n completa de la API seg\u00fan el est\u00e1ndar OpenAPI. Por defecto, se expone en la ruta <code>/v3/api-docs</code>. Swagger UI Interfaz gr\u00e1fica de usuario que visualiza y permite interactuar con la documentaci\u00f3n OpenAPI generada. Se accede por defecto en <code>/swagger-ui/index.html</code>. <code>OpenAPI</code> bean Objeto de configuraci\u00f3n en Java utilizado para personalizar la metadata (t\u00edtulo, versi\u00f3n, descripci\u00f3n) del documento OpenAPI generado. <code>@Operation</code> Anotaci\u00f3n utilizada para documentar el prop\u00f3sito o resumen de un m\u00e9todo espec\u00edfico del controlador REST. <code>@ApiResponse</code> / <code>ApiResponses</code> Anotaciones utilizadas para documentar los posibles c\u00f3digos de respuesta HTTP y sus descripciones para una operaci\u00f3n (ej. c\u00f3digo \"200\" OK)."},{"location":"content/p14/#vii-servicios-capa-de-negocio","title":"VII. Servicios (Capa de Negocio)","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Servicio (Capa) Capa que encapsula la l\u00f3gica de negocio y coordina transacciones, validaciones de dominio y composici\u00f3n de repositorios. Expone m\u00e9todos coherentes para el controlador. <code>@Service</code> Anotaci\u00f3n que marca una clase como componente de servicio. Facilita la detecci\u00f3n autom\u00e1tica y la inyecci\u00f3n de dependencias. <code>@Transactional</code> (en Servicios) Define l\u00edmites transaccionales: asegura atomicidad de operaciones; soporta configuraci\u00f3n de propagaci\u00f3n e aislamiento a nivel de m\u00e9todo. Validaciones de negocio Reglas propias del dominio (no solo bean validation). Se aplican en m\u00e9todos de servicio para garantizar consistencia y evitar estados inv\u00e1lidos. Composici\u00f3n/Orquestaci\u00f3n Un servicio puede coordinar varios repositorios y otros servicios para cumplir un caso de uso complejo. Mapeo DTO/Entidad Conversi\u00f3n entre entidades y DTOs para aislar la capa de presentaci\u00f3n. Herramientas comunes: ModelMapper, MapStruct. Paginaci\u00f3n y Filtros Los servicios reciben <code>Pageable</code>/<code>Sort</code> y aplican filtros de negocio antes de devolver resultados a controladores. Idempotencia Propiedad deseable en operaciones de actualizaci\u00f3n para evitar efectos secundarios al reintentar. Se dise\u00f1a en la l\u00f3gica de servicio. Cach\u00e9 (Spring Cache) Mejora rendimiento con <code>@Cacheable</code>, <code>@CacheEvict</code>, <code>@CachePut</code>. Integraciones t\u00edpicas: Caffeine, Ehcache, Redis. Asincron\u00eda (<code>@Async</code>) Permite ejecutar tareas en segundo plano (env\u00edo de correos, c\u00e1lculos). Requiere habilitar <code>@EnableAsync</code> y planificar el pool de hilos. Eventos de dominio Comunicaci\u00f3n desacoplada con <code>ApplicationEventPublisher</code> y <code>@EventListener</code> para reaccionar a sucesos del negocio."},{"location":"content/p14/#xiii-controladores-capa-api-rest","title":"XIII. Controladores (Capa API REST)","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Controlador (Capa) Punto de entrada HTTP de la API. Orquesta la petici\u00f3n, valida entrada, delega a servicios y construye la respuesta. <code>@RestController</code> Define una clase de controlador REST (combina <code>@Controller</code> y <code>@ResponseBody</code>). Retorna JSON por defecto. <code>@RequestMapping</code> Configura la ruta base y/o verbos HTTP. \u00datil para versionado (<code>/api/v1</code>). <code>@GetMapping</code> / <code>@PostMapping</code> / <code>@PutMapping</code> / <code>@PatchMapping</code> / <code>@DeleteMapping</code> Mapean m\u00e9todos a verbos HTTP para operaciones CRUD. <code>@PathVariable</code> Extrae variables desde la ruta (ej. <code>/productos/{id}</code>). <code>@RequestParam</code> Obtiene par\u00e1metros de consulta (ej. <code>/buscar?nombre=valor</code>). <code>@RequestBody</code> Mapea el cuerpo JSON de la petici\u00f3n a un DTO. <code>ResponseEntity</code> Construye respuestas HTTP con cuerpo y c\u00f3digo de estado (200, 201, 204, 400, 404). <code>@Valid</code> / <code>@Validated</code> Activa validaciones de DTO y par\u00e1metros; integra con el manejador global de errores. Paginaci\u00f3n (<code>Pageable</code>, <code>Page</code>) Soporte para paginar y ordenar resultados en endpoints <code>GET</code>. Serializaci\u00f3n (Jackson) Convierte objetos Java a JSON; cuidado con relaciones y bucles infinitos. DTOs Separan la capa de presentaci\u00f3n de las entidades JPA; controlan qu\u00e9 datos se exponen. CORS (<code>@CrossOrigin</code>) Permite peticiones desde otros dominios. Configurable por anotaci\u00f3n o global. HATEOAS (avanzado) Agrega enlaces en respuestas para navegabilidad de recursos. Documentaci\u00f3n (<code>@Operation</code>, <code>@ApiResponses</code>) Anota endpoints para generar documentaci\u00f3n con OpenAPI/Swagger. Buenas pr\u00e1cticas Mantener controladores delgados, delegar la l\u00f3gica a servicios, usar c\u00f3digos HTTP adecuados y versionar rutas."},{"location":"content/p14/#ix-seguridad","title":"IX. Seguridad","text":"T\u00e9rmino T\u00e9cnico Significado / Descripci\u00f3n Fuentes Spring Security Framework de seguridad para autenticaci\u00f3n, autorizaci\u00f3n y protecci\u00f3n de endpoints. Se integra de forma declarativa y extensible. Autenticaci\u00f3n vs Autorizaci\u00f3n Autenticaci\u00f3n verifica identidad; autorizaci\u00f3n controla qu\u00e9 acciones puede realizar el usuario autenticado. Roles y Authorities Permisos granulares (<code>authority</code>) y roles (<code>ROLE_ADMIN</code>). Se usan en reglas de acceso y anotaciones. <code>SecurityFilterChain</code> Bean que define la cadena de filtros de seguridad (HTTP). Configura rutas p\u00fablicas/privadas, CORS, CSRF, sesiones y excepciones. <code>UserDetailsService</code> Componente que carga usuarios por nombre de usuario desde base de datos u origen externo. <code>PasswordEncoder</code> (BCrypt) Codificador de contrase\u00f1as seguro. <code>BCryptPasswordEncoder</code> es recomendado por su resistencia a ataques de fuerza bruta. <code>AuthenticationProvider</code> / <code>AuthenticationManager</code> Encargados de verificar credenciales y producir un <code>Authentication</code> v\u00e1lido. JWT (Bearer Token) Token firmado que representa al usuario. Se usa en APIs stateless junto con <code>SessionCreationPolicy.STATELESS</code>. OAuth2 Resource Server Configuraci\u00f3n para validar JWT emitidos por un proveedor externo (Keycloak, Auth0). Dependencia: <code>spring-boot-starter-oauth2-resource-server</code>. CSRF Protecci\u00f3n contra falsificaci\u00f3n de peticiones. En APIs REST stateless normalmente se deshabilita; en apps con sesi\u00f3n y formularios se habilita. CORS Permite peticiones desde otros or\u00edgenes. Se configura v\u00eda <code>CorsConfigurationSource</code> o anotaciones como <code>@CrossOrigin</code>. Seguridad a nivel de m\u00e9todo Control con <code>@PreAuthorize</code>, <code>@PostAuthorize</code>, <code>@Secured</code>. Se habilita con <code>@EnableMethodSecurity</code> (Spring Security 6). <code>SecurityContextHolder</code> Almacena el contexto de seguridad actual (usuario autenticado y authorities) accesible desde servicios/controladores. Manejo de excepciones <code>AuthenticationEntryPoint</code> (401) y <code>AccessDeniedHandler</code> (403) para respuestas consistentes ante credenciales inv\u00e1lidas o permisos insuficientes. Pol\u00edtica de sesi\u00f3n <code>SessionCreationPolicy.STATELESS</code> para APIs con JWT; <code>STATELESS</code> evita almacenar sesiones en el servidor."},{"location":"content/p15/","title":"Semana 15","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p16/","title":"Semana 16 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p16/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p16/#codigo-5m9hu3p1","title":"C\u00f3digo: 5M9HU3P1","text":""},{"location":"content/p17/","title":"Semana 17","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p18/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p2/","title":"Semana 2 - Gu\u00eda sobre API REST","text":"<p>Resumen</p> <p>Una API REST es la combinaci\u00f3n de dos ideas: 1. API (Application Programming Interface): el contrato que define qu\u00e9 puede pedir un cliente y qu\u00e9 responder\u00e1 el servidor. 2. REST (Representational State Transfer): un estilo arquitect\u00f3nico que prescribe c\u00f3mo debe dise\u00f1arse ese contrato para que sea escalable, simple y uniforme.  </p> <p>El resultado es un servicio web sin estado que expone recursos a trav\u00e9s de URLs, utiliza los m\u00e9todos HTTP como verbo y devuelve datos normalmente en formato JSON.</p>"},{"location":"content/p2/#1-concepto-de-api","title":"1. Concepto de API","text":"<p>Definici\u00f3n formal</p> <p>API (Application Programming Interface) es un conjunto de reglas y especificaciones que permiten que dos piezas de software se comuniquen.</p>"},{"location":"content/p2/#11-caracteristicas-esenciales","title":"1.1 Caracter\u00edsticas esenciales","text":"Caracter\u00edstica Descripci\u00f3n breve Abstracci\u00f3n Oculta la complejidad interna del sistema expuesto. Contrato Documenta entradas, salidas, errores y reglas de negocio. Reutilizaci\u00f3n Permite que cualquier cliente compatible utilice la funcionalidad sin reescribirla. Versionado Facilita evolucionar la funcionalidad sin romper a los clientes antiguos."},{"location":"content/p2/#12-analogia-cotidiana","title":"1.2 Analog\u00eda cotidiana","text":"<p>Imagina un restaurante:</p> <ul> <li>Cliente \u2194 Aplicaci\u00f3n que necesita datos o funciones.  </li> <li>Camarero \u2194 API.  </li> <li>Cocina \u2194 Sistema interno (base de datos, l\u00f3gica de negocio). El cliente pide al camarero (API) que lleve un pedido a la cocina y traiga la comida (datos). El cliente no entra en la cocina ni decide c\u00f3mo se cocina el plato.</li> </ul>"},{"location":"content/p2/#2-generalidades-de-las-api-web","title":"2. Generalidades de las API Web","text":"<p>\u00bfQu\u00e9 diferencia a una API Web de cualquier otra API?</p> <ul> <li>Protocolo de transporte: HTTP (o HTTPS).  </li> <li>Formato de mensaje: JSON, XML, form-url-encoded, etc.  </li> <li>Ubicaci\u00f3n: Se hospeda en un servidor accesible a trav\u00e9s de una URL p\u00fablica o privada.  </li> </ul>"},{"location":"content/p2/#21-arquitectura-cliente-servidor","title":"2.1 Arquitectura cliente-servidor","text":"<pre><code>sequenceDiagram\n    participant Cliente\n    participant API\n    participant Servidor\n\n    Cliente-&gt;&gt;API: GET /productos\n    API-&gt;&gt;Servidor: consulta interna\n    Servidor--&gt;&gt;API: datos\n    API--&gt;&gt;Cliente: 200 OK + JSON</code></pre>"},{"location":"content/p2/#22-tipos-comunes-de-api-web","title":"2.2 Tipos comunes de API Web","text":"Tipo Caracter\u00edsticas principales SOAP XML, operaciones definidas en WSDL, est\u00e1ndares pesados (WS-*). XML-RPC / JSON-RPC Llamadas a procedimiento remotas sobre HTTP con XML o JSON. REST Recursos, verbos HTTP, sin estado, cacheable, ligero (JSON). GraphQL Consultas declarativas, una sola URL, tipos fuertes. gRPC Protocolo binario HTTP/2, generaci\u00f3n de stubs, ideal microservicios."},{"location":"content/p2/#3-rest-representational-state-transfer","title":"3. REST (Representational State Transfer)","text":"<p>Roy Fielding, 2000</p> <p>REST es un estilo arquitect\u00f3nico, no un est\u00e1ndar. Describe seis restricciones que, si se cumplen, producen un sistema escalable y de alto rendimiento.</p>"},{"location":"content/p2/#31-las-6-restricciones-rest","title":"3.1 Las 6 restricciones REST","text":"Restricci\u00f3n Qu\u00e9 obliga a hacer Beneficio clave Cliente-servidor Separar UI de l\u00f3gica de datos. Independencia de evoluci\u00f3n. Sin estado Cada petici\u00f3n contiene toda la info necesaria. Escalabilidad horizontal. Cacheable Las respuestas deben indicar si se pueden cachear. Reduce latencia y carga. Interfaz uniforme URLs identifican recursos, verbos HTTP operan sobre ellos. Simplicidad y predictibilidad. Sistema por capas Puede haber proxies, gateways, CDN entre cliente y servidor. Seguridad, balanceo, cach\u00e9. C\u00f3digo bajo demanda (opt.) El servidor puede envocar scripts ejecutables (JS, applets). Extensibilidad del cliente."},{"location":"content/p2/#32-recursos-y-representaciones","title":"3.2 Recursos y Representaciones","text":"<ul> <li>Recurso: Cualquier cosa que pueda ser nombrada (un usuario, una foto, un pedido).  </li> <li>Identificador: URI \u00fanica (<code>/usuarios/42</code>).  </li> <li>Representaci\u00f3n: Formato en que se env\u00eda (JSON, XML, imagen binaria).     Ejemplo JSON:     <pre><code>{\n  \"id\": 42,\n  \"nombre\": \"Ana\",\n  \"email\": \"ana@mail.com\",\n  \"enlaces\": {\n    \"self\": \"/usuarios/42\",\n    \"pedidos\": \"/usuarios/42/pedidos\"\n  }\n}\n</code></pre></li> </ul>"},{"location":"content/p2/#4-metodos-http-en-rest","title":"4. M\u00e9todos HTTP en REST","text":"M\u00e9todo CRUD Idempotente Seguro Uso t\u00edpico Ejemplo de URL GET Read S\u00ed S\u00ed Obtener uno o varios recursos <code>GET /libros</code> POST Create No No Crear un nuevo recurso hijo <code>POST /libros</code> PUT Update/Replace S\u00ed No Reemplazar completamente un recurso <code>PUT /libros/123</code> PATCH Update/Partial No No Actualizar solo ciertos campos <code>PATCH /libros/123</code> DELETE Delete S\u00ed No Eliminar un recurso <code>DELETE /libros/123</code> <p>Consejos de dise\u00f1o</p> <ul> <li>No uses verbos en la URL (<code>/getLibros</code>), usa solo sustantivos.  </li> <li>Usa c\u00f3digos de estado correctos: 201 (Created), 204 (No Content), 400, 401, 404, 409, 500.</li> </ul>"},{"location":"content/p2/#5-endpoints","title":"5. Endpoints","text":"<p>Endpoint</p> <p>Es la combinaci\u00f3n de un verbo HTTP y una ruta que apunta a un recurso o colecci\u00f3n.</p>"},{"location":"content/p2/#51-convenciones-de-nomenclatura","title":"5.1 Convenciones de nomenclatura","text":"Recurso Colecci\u00f3n (plural) Ejemplo colecci\u00f3n Ejemplo elemento Usuario usuarios <code>GET /usuarios</code> <code>GET /usuarios/5</code> Pedido pedidos <code>POST /pedidos</code> <code>PUT /pedidos/99</code> Foto de perfil usuarios/{id}/foto \u2014 <code>GET /usuarios/5/foto</code>"},{"location":"content/p2/#52-filtrado-paginado-y-orden","title":"5.2 Filtrado, paginado y orden","text":"<p>Par\u00e1metros de consulta</p> <pre><code>GET /libros?autor=Garcia&amp;pagina=3&amp;tamanio=20&amp;orden=titulo,asc\n</code></pre>"},{"location":"content/p2/#53-versionado-de-api","title":"5.3 Versionado de API","text":"<ul> <li>Por URL: <code>/api/v1/libros</code> </li> <li>Por cabecera: <code>Accept: application/vnd.miapp.v1+json</code></li> </ul>"},{"location":"content/p2/#6-formato-json","title":"6. Formato JSON","text":"<p>\u00bfPor qu\u00e9 JSON?</p> <ul> <li>Ligero (menos verboso que XML).  </li> <li>Nativo en JavaScript.  </li> <li>F\u00e1cil de leer y escribir para humanos y m\u00e1quinas.  </li> <li>Soporte universal en lenguajes modernos.</li> </ul>"},{"location":"content/p2/#61-estructura-basica","title":"6.1 Estructura b\u00e1sica","text":"<pre><code>{\n  \"id\": 7,\n  \"titulo\": \"El Quijote\",\n  \"autor\": {\n    \"nombre\": \"Miguel\",\n    \"apellido\": \"de Cervantes\"\n  },\n  \"tags\": [\"novela\", \"cl\u00e1sico\", \"espa\u00f1a\"],\n  \"publicado\": 1605,\n  \"disponible\": true\n}\n</code></pre>"},{"location":"content/p2/#62-buenas-practicas","title":"6.2 Buenas pr\u00e1cticas","text":"<ul> <li>Usar camelCase para claves (<code>userName</code>).  </li> <li>Incluir enlaces (HATEOAS) para facilitar la navegaci\u00f3n.  </li> <li>Evitar anidamientos demasiado profundos (\u2264 3 niveles).  </li> <li>Usar fechas en ISO-8601 (<code>2024-07-19T15:30:00Z</code>).</li> </ul>"},{"location":"content/p2/#7-servicio-en-la-nube","title":"7. Servicio en la Nube","text":"<p>\u00bfQu\u00e9 significa \u00abservicio en la nube\u00bb?</p> <p>Es un entorno de ejecuci\u00f3n remoto (IaaS, PaaS o SaaS) donde se despliega la API REST, ofreciendo:</p> <ul> <li>Escalabilidad autom\u00e1tica (auto-scaling).  </li> <li>Alta disponibilidad (99.9% SLA).  </li> <li>Gesti\u00f3n de certificados SSL/TLS.  </li> <li>Balanceo de carga global.  </li> <li>Integraci\u00f3n con CI/CD.</li> </ul>"},{"location":"content/p2/#71-proveedores-habituales","title":"7.1 Proveedores habituales","text":"Proveedor Servicio de alojamiento de API Caracter\u00edsticas destacadas AWS API Gateway + Lambda Infraestructura serverless, pay-per-use. Azure API Management + Functions Integraci\u00f3n con Active Directory. GCP Cloud Endpoints + Cloud Run Soporte nativo de gRPC y REST."},{"location":"content/p2/#72-ejemplo-de-despliegue-serverless-con-aws","title":"7.2 Ejemplo de despliegue serverless con AWS","text":"<p><pre><code>sam deploy --guided \\\n  --template-file api-template.yml \\\n  --stack-name mi-api-rest \\\n  --capabilities CAPABILITY_IAM\n</code></pre> Esto genera: *   Una funci\u00f3n Lambda con tu c\u00f3digo.    Un API Gateway que mapea URLs a la Lambda.    Logs en CloudWatch y monitoreo en CloudWatch Alarms.</p>"},{"location":"content/p2/#8-clientes-rest","title":"8. Clientes REST","text":"<p>\u00bfQu\u00e9 es un cliente REST?</p> <p>Cualquier programa que consume la API siguiendo el contrato REST.</p>"},{"location":"content/p2/#81-tipos-de-clientes","title":"8.1 Tipos de clientes","text":"Tipo Ejemplos Consideraciones Navegador SPA Angular, React, Vue CORS, tokens JWT. M\u00f3vil Apps Android (Retrofit), iOS (Alamofire) Gesti\u00f3n de red offline, cach\u00e9. Backend Microservicio A llamando a microservicio B Circuit breakers, retries. CLI / Scripts cURL, Postman, PowerShell \u00datiles para pruebas y automatizaci\u00f3n."},{"location":"content/p2/#82-ejemplo-de-cliente-con-curl","title":"8.2 Ejemplo de cliente con <code>curl</code>","text":"<pre><code># Obtener token\ncurl -X POST https://api.miapp.com/auth \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"usuario\":\"ana\",\"clave\":\"secreto\"}'\n\n# Usar token\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     https://api.miapp.com/usuarios/42\n</code></pre>"},{"location":"content/p2/#83-sdks-generados","title":"8.3 SDKs generados","text":"<p>Muchos proveedores publican SDKs oficiales que abstraen las peticiones HTTP:</p> JavaScript (Axios)Python (requests) <pre><code>import axios from 'axios';\nconst api = axios.create({baseURL: 'https://api.miapp.com/v1'});\nconst {data} = await api.get('/libros');\n</code></pre> <pre><code>import requests\nr = requests.get('https://api.miapp.com/v1/libros',\n                 headers={'Authorization': f'Bearer {token}'})\nlibros = r.json()\n</code></pre>"},{"location":"content/p2/#9-resumen-visual","title":"9. Resumen visual","text":"<pre><code>graph TD\n  subgraph Cliente\n    A[SPA Web] --&gt;|HTTPS| GW\n    B[App M\u00f3vil] --&gt;|HTTPS| GW\n    C[CLI cURL] --&gt;|HTTPS| GW\n  end\n  GW[API Gateway&lt;br/&gt;en la nube]\n  GW --&gt;|invoca| S1[Lambda / Contenedor]\n  GW --&gt;|invoca| S2[Lambda / Contenedor]\n  S1 --&gt;|query| DB[(Base de datos)]\n  style GW fill:#f9f,stroke:#333</code></pre>"},{"location":"content/p2/#10-recursos-adicionales","title":"10. Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de REST \u2013 Roy Fielding </li> <li>OpenAPI 3.x \u2013 Estandariza la descripci\u00f3n de tu API REST.  </li> <li>Postman Learning Center \u2013 Pruebas y generaci\u00f3n de documentaci\u00f3n.  </li> <li>Google Cloud API Design Guide \u2013 Buenas pr\u00e1cticas de Google.</li> </ul>"},{"location":"content/p3/","title":"Semana 3 - Patrones de Dise\u00f1o: MVC y su aplicaci\u00f3n en una API REST con Spring Boot","text":"<p>Resumen ejecutivo</p> <p>El patr\u00f3n Modelo-Vista-Controlador (MVC) separa responsabilidades en tres capas:  </p> <ul> <li>Modelo \u2192 datos y l\u00f3gica de negocio.  </li> <li>Vista \u2192 representaci\u00f3n al usuario (JSON, HTML, XML, etc.).  </li> <li>Controlador \u2192 orquesta las peticiones y respuestas.  </li> </ul> <p>En una API REST con Spring Boot la Vista se reduce a los DTO/JSON y los Controladores REST (<code>@RestController</code>) gestionan el flujo. A continuaci\u00f3n veremos la teor\u00eda detallada con diagramas, c\u00f3digo y buenas pr\u00e1cticas.</p>"},{"location":"content/p3/#1-que-es-un-patron-de-diseno","title":"1. \u00bfQu\u00e9 es un patr\u00f3n de dise\u00f1o?","text":"<p>Definici\u00f3n</p> <p>Un patr\u00f3n de dise\u00f1o es una soluci\u00f3n reutilizable a un problema com\u00fan en el dise\u00f1o de software.  </p> <ul> <li>No es c\u00f3digo terminado, es una receta.  </li> <li>Mejora la mantenibilidad, escalabilidad y claridad del sistema.</li> </ul>"},{"location":"content/p3/#2-patron-mvc-modelo-vista-controlador","title":"2. Patr\u00f3n MVC (Modelo-Vista-Controlador)","text":""},{"location":"content/p3/#21-origen-y-proposito","title":"2.1 Origen y prop\u00f3sito","text":"A\u00f1o Autor Contexto 1979 Trygve Reenskaug Interfaces de usuario en Smalltalk-80 Hoy Comunidad Aplicaciones web, m\u00f3viles, APIs REST <p>Objetivo</p> <p>Separar la interfaz de usuario (Vista) de la l\u00f3gica de negocio (Modelo) y del flujo de control (Controlador).</p>"},{"location":"content/p3/#22-diagrama-conceptual","title":"2.2 Diagrama conceptual","text":"<pre><code>graph TD\n    subgraph \"Aplicaci\u00f3n MVC\"\n        U[Usuario]\n        V[Vista]\n        C[Controlador]\n        M[Modelo]\n        DB[(Base de datos)]\n    end\n    U --&gt;|interacci\u00f3n| V\n    V --&gt;|evento| C\n    C --&gt;|actualiza estado| M\n    M --&gt;|notifica cambios| V\n    M --&gt;|persiste| DB\n    style C fill:#ffaaaa\n    style M fill:#aaffaa\n    style V fill:#aaaaff</code></pre>"},{"location":"content/p3/#23-responsabilidades-de-cada-capa","title":"2.3 Responsabilidades de cada capa","text":"Capa Responsabilidades clave Ejemplo en API REST Modelo Entidades JPA, repositorios, servicios, reglas de negocio, validaciones. <code>Libro</code>, <code>LibroRepository</code>, <code>LibroService</code> Vista Representaci\u00f3n del recurso: JSON, XML, PDF, etc. <code>LibroDTO</code>, <code>LibroResponse</code> Controlador Recibe peticiones HTTP, llama al servicio, devuelve respuesta. <code>LibroController</code> (<code>@RestController</code>) <p>En las APIs REST la Vista NO es HTML, es el JSON serializado que Spring genera autom\u00e1ticamente.</p>"},{"location":"content/p3/#3-mvc-dentro-de-una-api-rest-con-spring-boot","title":"3. MVC dentro de una API REST con Spring Boot","text":""},{"location":"content/p3/#31-arquitectura-de-paquetes-recomendada","title":"3.1 Arquitectura de paquetes recomendada","text":"<pre><code>com.miempresa.apirest\n\u251c\u2500\u2500 controller        # \u2190 Capa Controlador\n\u251c\u2500\u2500 service           # \u2190 L\u00f3gica de negocio\n\u251c\u2500\u2500 repository        # \u2190 Acceso a datos (JPA)\n\u251c\u2500\u2500 model             # \u2190 Entidades JPA (Modelo)\n\u251c\u2500\u2500 dto               # \u2190 Objetos de transferencia (Vista)\n\u2514\u2500\u2500 config            # \u2190 Configuraciones globales\n</code></pre>"},{"location":"content/p3/#32-flujo-de-una-peticion-rest-con-mvc","title":"3.2 Flujo de una petici\u00f3n REST con MVC","text":"<pre><code>sequenceDiagram\n    participant Cliente\n    participant Controller\n    participant Service\n    participant Repository\n    participant DB\n\n    Cliente-&gt;&gt;Controller: GET /api/v1/libros/1\n    Controller-&gt;&gt;Service: obtenerLibro(1)\n    Service-&gt;&gt;Repository: findById(1)\n    Repository-&gt;&gt;DB: SELECT * FROM libro WHERE id=1\n    DB--&gt;&gt;Repository: libro entity\n    Repository--&gt;&gt;Service: Libro\n    Service--&gt;&gt;Controller: LibroDTO\n    Controller--&gt;&gt;Cliente: 200 OK + JSON</code></pre> <p>Nota</p> <p>La conversi\u00f3n de <code>Libro</code> (entidad) a <code>LibroDTO</code> se realiza normalmente con MapStruct o un mapper manual.</p>"},{"location":"content/p3/#4-implementacion-paso-a-paso-en-spring-boot","title":"4. Implementaci\u00f3n paso a paso en Spring Boot","text":""},{"location":"content/p3/#41-entidad-modelo","title":"4.1 Entidad (Modelo)","text":"<pre><code>package com.miempresa.apirest.model;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"libros\")\npublic class Libro {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String titulo;\n    private String autor;\n    private Integer anio;\n\n    /* getters y setters */\n}\n</code></pre>"},{"location":"content/p3/#42-repositorio-modelo","title":"4.2 Repositorio (Modelo)","text":"<pre><code>package com.miempresa.apirest.repository;\n\nimport com.miempresa.apirest.model.Libro;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface LibroRepository extends JpaRepository&lt;Libro, Long&gt; {\n    // CRUD ya disponible: findAll, findById, save, deleteById...\n}\n</code></pre>"},{"location":"content/p3/#43-dto-vista","title":"4.3 DTO (Vista)","text":"<pre><code>package com.miempresa.apirest.dto;\n\npublic record LibroDTO(\n        Long id,\n        String titulo,\n        String autor,\n        Integer anio\n) {}\n</code></pre>"},{"location":"content/p3/#44-servicio-modelo-logica","title":"4.4 Servicio (Modelo + l\u00f3gica)","text":"<pre><code>package com.miempresa.apirest.service;\n\nimport com.miempresa.apirest.dto.LibroDTO;\nimport com.miempresa.apirest.model.Libro;\nimport com.miempresa.apirest.repository.LibroRepository;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class LibroService {\n    private final LibroRepository repo;\n\n    public LibroService(LibroRepository repo) {\n        this.repo = repo;\n    }\n\n    public LibroDTO obtenerPorId(Long id) {\n        return repo.findById(id)\n                   .map(this::toDto)\n                   .orElseThrow(() -&gt; new LibroNoEncontradoException(id));\n    }\n\n    private LibroDTO toDto(Libro l) {\n        return new LibroDTO(l.getId(), l.getTitulo(), l.getAutor(), l.getAnio());\n    }\n}\n</code></pre>"},{"location":"content/p3/#45-controlador-rest-controlador","title":"4.5 Controlador REST (Controlador)","text":"<pre><code>package com.miempresa.apirest.controller;\n\nimport com.miempresa.apirest.dto.LibroDTO;\nimport com.miempresa.apirest.service.LibroService;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/v1/libros\")\npublic class LibroController {\n\n    private final LibroService service;\n\n    public LibroController(LibroService service) {\n        this.service = service;\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;LibroDTO&gt; obtener(@PathVariable Long id) {\n        LibroDTO dto = service.obtenerPorId(id);\n        return ResponseEntity.ok(dto);\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;LibroDTO&gt; crear(@RequestBody LibroDTO dto) {\n        LibroDTO nuevo = service.crear(dto);\n        return ResponseEntity\n                .created(URI.create(\"/api/v1/libros/\" + nuevo.id()))\n                .body(nuevo);\n    }\n\n    @PutMapping(\"/{id}\")\n    public LibroDTO actualizar(@PathVariable Long id, @RequestBody LibroDTO dto) {\n        return service.actualizar(id, dto);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; eliminar(@PathVariable Long id) {\n        service.eliminar(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"content/p3/#5-diagrama-de-clases-simplificado","title":"5. Diagrama de clases simplificado","text":"<pre><code>classDiagram\n    class Libro {\n        +Long id\n        +String titulo\n        +String autor\n        +Integer anio\n    }\n\n    class LibroRepository {\n        &lt;&lt;interface&gt;&gt;\n    }\n\n    class LibroService {\n        -LibroRepository repo\n        +LibroDTO obtenerPorId(Long)\n        +LibroDTO crear(LibroDTO)\n    }\n\n    class LibroController {\n        -LibroService service\n        +ResponseEntity~LibroDTO~ obtener(Long)\n        +ResponseEntity~LibroDTO~ crear(LibroDTO)\n    }\n\n    class LibroDTO {\n        +Long id\n        +String titulo\n        +String autor\n        +Integer anio\n    }\n\n    LibroController --&gt; LibroService\n    LibroService --&gt; LibroRepository\n    LibroService --&gt; LibroDTO\n    LibroRepository --&gt; Libro</code></pre>"},{"location":"content/p3/#6-buenas-practicas-y-errores-comunes","title":"6. Buenas pr\u00e1cticas y errores comunes","text":"Buena pr\u00e1ctica Ejemplo concreto No exponer entidades JPA Usar siempre DTOs (<code>LibroDTO</code>). Validaciones <code>@NotBlank</code>, <code>@Size</code>, <code>@Valid</code> en el DTO. Manejo global de excepciones <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code>. Paginaci\u00f3n <code>Pageable</code> de Spring Data. Logging SLF4J + <code>@Slf4j</code> (Lombok). Tests <code>@WebMvcTest</code>, <code>@DataJpaTest</code>, Testcontainers. <p>Errores comunes</p> <ul> <li>Devolver la entidad JPA directamente \u2192 exposici\u00f3n de datos sensibles o lazily loaded.  </li> <li>Colocar l\u00f3gica de negocio en el controlador \u2192 acoplamiento y dificultad de test.  </li> <li>Ignorar el versionado de API \u2192 romper a los clientes antiguos.</li> </ul>"},{"location":"content/p3/#7-extension-mvc-vs-mvvm-vs-mvp","title":"7. Extensi\u00f3n: MVC vs MVVM vs MVP","text":"Patr\u00f3n Vista Intermediario Caso de uso t\u00edpico MVC HTML/JSON Controlador APIs REST, monolitos web MVP Android View Presenter Android nativo MVVM WPF/Angular ViewModel SPA reactivas, WPF"},{"location":"content/p3/#8-recursos-adicionales","title":"8. Recursos adicionales","text":"<ul> <li>Spring Guides \u2013 Building a RESTful Web Service </li> <li>Spring Data JPA Reference </li> <li>MapStruct \u2013 Mapeo autom\u00e1tico de DTOs </li> <li>OpenAPI 3 + Springdoc \u2013 Documentaci\u00f3n autom\u00e1tica.</li> </ul>"},{"location":"content/p4/","title":"Semana 4 - Spring Boot Generalidades","text":""},{"location":"content/p4/#generalidades-de-spring-boot","title":"Generalidades de Spring Boot","text":"<p>Spring Boot es un framework de c\u00f3digo abierto basado en Java que simplifica el desarrollo de aplicaciones empresariales, permitiendo crear proyectos standalone con m\u00ednima configuraci\u00f3n. Desarrollado por Pivotal (ahora parte de VMware), Spring Boot resuelve problemas comunes en el desarrollo tradicional de Spring, como la configuraci\u00f3n manual extensa, mediante convenci\u00f3n sobre configuraci\u00f3n.</p>"},{"location":"content/p4/#por-que-usar-spring-boot","title":"\u00bfPor Qu\u00e9 Usar Spring Boot?","text":"<p>Spring Boot acelera el desarrollo al proporcionar starters (plantillas preconfiguradas) que incluyen dependencias comunes, autoconfiguraci\u00f3n y un servidor embebido como Tomcat. Por ejemplo, imagina que est\u00e1s desarrollando una aplicaci\u00f3n web: en lugar de configurar manualmente un servidor, dependencias y beans, Spring Boot lo hace autom\u00e1ticamente basado en las dependencias que agregues.</p>"},{"location":"content/p4/#2-preparar-windows-para-spring-boot","title":"2\ufe0f\u20e3 Preparar Windows para Spring Boot","text":""},{"location":"content/p4/#requisitos-y-versiones-recomendadas","title":"\ud83e\uddf0 Requisitos y versiones recomendadas","text":"Herramienta Versi\u00f3n m\u00ednima Instalador r\u00e1pido JDK 17 LTS Adoptium o <code>winget install EclipseAdoptium.Temurin.17</code> Maven 3.9.x apache.maven.org o <code>winget install Apache.Maven</code> Git 2.40+ <code>winget install Git.Git</code> VS Code Latest code.visualstudio.com"},{"location":"content/p4/#verificar-en-powershell-cmd","title":"\u2705 Verificar en PowerShell / CMD","text":"<pre><code>java -version\nmvn -version\ngit --version\ncode --version\n</code></pre> <p>Deben mostrar rutas sin errores.</p>"},{"location":"content/p4/#3-crear-proyecto-con-spring-initializr-solo-clicks","title":"3\ufe0f\u20e3 Crear proyecto con Spring Initializr (solo clicks)","text":""},{"location":"content/p4/#paso-1-abrir-el-generador","title":"\ud83c\udfaf Paso 1 \u2013 Abrir el generador","text":"<p>Navegador \u2192 https://start.spring.io</p>"},{"location":"content/p4/#paso-2-rellenar-formulario","title":"\ud83c\udfaf Paso 2 \u2013 Rellenar formulario","text":"Campo Valor recomendado \u00bfPor qu\u00e9? Project <code>Maven</code> Gesti\u00f3n est\u00e1ndar en Java Language <code>Java</code> \u2014 Spring Boot <code>3.3.x</code> (latest stable) Soporte LTS Group <code>com.tuempresa</code> Paquete ra\u00edz Artifact <code>demo</code> Nombre del JAR Name <code>demo</code> Mismo que Artifact Description <code>Proyecto demo Spring Boot</code> Metadato Package <code>com.tuempresa.demo</code> Auto-completado Packaging <code>Jar</code> Ejecutable con <code>java -jar</code> Java <code>17</code> LTS"},{"location":"content/p4/#paso-3-seleccionar-dependencias-starters","title":"\ud83c\udfaf Paso 3 \u2013 Seleccionar dependencias (starters)","text":"Starter \u00bfQu\u00e9 incluye? <code>Spring Web</code> Tomcat + Spring MVC <code>Spring Data JPA</code> Hibernate + repositorios <code>Spring Boot DevTools</code> Hot-reload y LiveReload <code>PostgreSQL Driver</code> Conector JDBC para PostgreSQL <code>MySQL Driver</code> Conector JDBC para MySQL <code>H2 Database</code> BD en memoria para pruebas <p>Puedes usar el buscador y pulsar + para a\u00f1adirlas.</p>"},{"location":"content/p4/#paso-4-generar-y-descargar","title":"\ud83c\udfaf Paso 4 \u2013 Generar y descargar","text":"<p>Click en GENERATE \u2192 se descarga <code>demo.zip</code>.</p>"},{"location":"content/p4/#paso-5-descomprimir","title":"\ud83c\udfaf Paso 5 \u2013 Descomprimir","text":"<p>Extraer en: <pre><code>C:\\dev\\spring-workspace\\\n\u2514\u2500\u2500 demo\\\n    \u251c\u2500\u2500 mvnw.cmd\n    \u251c\u2500\u2500 pom.xml\n    \u2514\u2500\u2500 src\\...\n</code></pre></p>"},{"location":"content/p4/#4-instalar-y-configurar-vs-code-spring-boot-extension-pack","title":"4\ufe0f\u20e3 Instalar y configurar VS Code + Spring Boot Extension Pack","text":""},{"location":"content/p4/#instalacion-de-extensiones","title":"\ud83d\udd0c Instalaci\u00f3n de extensiones","text":"Extensi\u00f3n C\u00f3mo instalar Spring Boot Extension Pack En VS Code \u2192 Extensions \u2192 buscar <code>Spring Boot Extension Pack</code> \u2192 Install Extension Pack for Java Incluye: Language Support, Debugger, Maven, Test Runner"},{"location":"content/p4/#verificar-configuracion","title":"\u2699\ufe0f Verificar configuraci\u00f3n","text":"<ol> <li>Abrir VS Code.</li> <li><code>Ctrl + Shift + P</code> \u2192 Java: Configure Java Runtime    Asegurar que apunta al JDK 17 instalado.</li> </ol>"},{"location":"content/p4/#5-abrir-y-ejecutar-el-proyecto-en-vs-code","title":"5\ufe0f\u20e3 Abrir y ejecutar el proyecto en VS Code","text":""},{"location":"content/p4/#abrir-carpeta","title":"\ud83d\udcc2 Abrir carpeta","text":"<ol> <li>VS Code \u2192 File \u2192 Open Folder... </li> <li>Seleccionar <code>C:\\dev\\spring-workspace\\demo</code>.</li> </ol>"},{"location":"content/p4/#ejecutar-con-un-clic","title":"\ud83d\ude80 Ejecutar con un clic","text":"<ol> <li>Panel Spring Boot Dashboard (icono \ud83c\udf3f en la barra lateral).  </li> <li>Click derecho sobre el proyecto \u2192 Run.</li> </ol>"},{"location":"content/p4/#depurar","title":"\ud83d\udc1e Depurar","text":"<ol> <li>Click derecho \u2192 Debug.  </li> <li>Se a\u00f1ade autom\u00e1ticamente un <code>launch.json</code>.</li> </ol>"},{"location":"content/p4/#alternativa-con-maven-wrapper","title":"\u25b6\ufe0f Alternativa con Maven Wrapper","text":"<pre><code>.\\mvnw.cmd spring-boot:run\n</code></pre>"},{"location":"content/p5/","title":"Semana 5: Entidades en Spring Boot","text":""},{"location":"content/p5/#introduccion","title":"Introducci\u00f3n","text":"<p>En Spring Boot, una entidad es una clase Java que representa una tabla en una base de datos relacional. Las entidades son fundamentales en aplicaciones que utilizan Spring Data JPA para mapear objetos Java a registros de bases de datos (ORM - Object-Relational Mapping).</p>"},{"location":"content/p5/#que-es-una-entidad-en-spring-boot","title":"\u00bfQu\u00e9 es una entidad en Spring Boot?","text":"<p>Una entidad es una clase Java anotada con <code>@Entity</code> que se mapea a una tabla en la base de datos. Cada instancia de la entidad representa una fila en la tabla, y los atributos de la clase representan las columnas. Las entidades son gestionadas por el EntityManager de JPA y se utilizan com\u00fanmente con Spring Data JPA para operaciones CRUD.</p>"},{"location":"content/p5/#anotaciones-comunes-para-entidades","title":"Anotaciones comunes para entidades","text":"<p>A continuaci\u00f3n, se describen las anotaciones m\u00e1s comunes utilizadas en entidades de Spring Boot con JPA, junto con su prop\u00f3sito:</p>"},{"location":"content/p5/#1-entity","title":"1. <code>@Entity</code>","text":"<p>Indica que la clase es una entidad y debe ser mapeada a una tabla en la base de datos.</p> <ul> <li>Uso: Se coloca encima de la clase.</li> <li>Ejemplo: <code>@Entity public class Producto { ... }</code></li> <li>Nota: La clase debe tener un constructor sin argumentos (puede ser impl\u00edcito con Lombok).</li> </ul>"},{"location":"content/p5/#2-table","title":"2. <code>@Table</code>","text":"<p>Especifica el nombre de la tabla en la base de datos a la que se mapea la entidad. Si no se usa, JPA asume que la tabla tiene el mismo nombre que la clase.</p> <ul> <li>Atributos comunes:</li> <li><code>name</code>: Nombre de la tabla.</li> <li><code>schema</code>: Esquema de la base de datos (opcional).</li> <li>Ejemplo: <code>@Table(name = \"productos\")</code></li> </ul>"},{"location":"content/p5/#3-id","title":"3. <code>@Id</code>","text":"<p>Marca un campo como la clave primaria de la entidad.</p> <ul> <li>Uso: Se coloca en el atributo que representa la clave primaria.</li> <li>Ejemplo: <code>@Id private Long id;</code></li> </ul>"},{"location":"content/p5/#4-generatedvalue","title":"4. <code>@GeneratedValue</code>","text":"<p>Define la estrategia para generar autom\u00e1ticamente los valores de la clave primaria.</p> <ul> <li>Atributos comunes:</li> <li><code>strategy</code>: Estrategia de generaci\u00f3n (<code>AUTO</code>, <code>IDENTITY</code>, <code>SEQUENCE</code>, <code>TABLE</code>).</li> <li><code>generator</code>: Nombre del generador personalizado (opcional).</li> <li>Ejemplo: <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code></li> <li>Estrategias:</li> <li><code>AUTO</code>: JPA elige la estrategia seg\u00fan la base de datos.</li> <li><code>IDENTITY</code>: Usa la funcionalidad de autoincremento de la base de datos.</li> <li><code>SEQUENCE</code>: Usa una secuencia de base de datos (por ejemplo, en PostgreSQL).</li> <li><code>TABLE</code>: Usa una tabla auxiliar para generar IDs.</li> </ul>"},{"location":"content/p5/#5-column","title":"5. <code>@Column</code>","text":"<p>Especifica detalles sobre c\u00f3mo un atributo se mapea a una columna en la base de datos.</p> <ul> <li>Atributos comunes:</li> <li><code>name</code>: Nombre de la columna.</li> <li><code>nullable</code>: Indica si la columna permite valores nulos (<code>true</code> o <code>false</code>).</li> <li><code>length</code>: Longitud m\u00e1xima para campos de tipo cadena.</li> <li><code>unique</code>: Indica si la columna debe ser \u00fanica.</li> <li>Ejemplo: <code>@Column(name = \"nombre_producto\", nullable = false, length = 100)</code></li> </ul>"},{"location":"content/p5/#6-temporal","title":"6. <code>@Temporal</code>","text":"<p>Se usa para mapear campos de tipo <code>java.util.Date</code> o <code>java.util.Calendar</code> a columnas de tipo fecha o hora en la base de datos.</p> <ul> <li>Atributos:</li> <li><code>TemporalType.DATE</code>: Solo fecha (sin hora).</li> <li><code>TemporalType.TIME</code>: Solo hora.</li> <li><code>TemporalType.TIMESTAMP</code>: Fecha y hora.</li> <li>Ejemplo: <code>@Temporal(TemporalType.DATE) private Date fechaCreacion;</code></li> <li>Nota: Desde Java 8, se recomienda usar <code>LocalDate</code>, <code>LocalTime</code> o <code>LocalDateTime</code> con <code>@Column</code>, ya que son m\u00e1s robustos.</li> </ul>"},{"location":"content/p5/#7-enumerated","title":"7. <code>@Enumerated</code>","text":"<p>Mapea un campo de tipo <code>enum</code> a una columna en la base de datos.</p> <ul> <li>Atributos:</li> <li><code>EnumType.STRING</code>: Almacena el nombre del enum como cadena.</li> <li><code>EnumType.ORDINAL</code>: Almacena el \u00edndice del enum (0, 1, 2, ...).</li> <li>Ejemplo: <code>@Enumerated(EnumType.STRING) private EstadoProducto estado;</code></li> </ul>"},{"location":"content/p5/#8-transient","title":"8. <code>@Transient</code>","text":"<p>Indica que un campo no debe ser persistido en la base de datos.</p> <ul> <li>Uso: Para campos calculados o temporales.</li> <li>Ejemplo: <code>@Transient private String campoCalculado;</code></li> </ul>"},{"location":"content/p5/#9-anotaciones-de-lombok","title":"9. Anotaciones de Lombok","text":"<p>Lombok reduce el c\u00f3digo repetitivo al generar autom\u00e1ticamente m\u00e9todos como getters, setters, constructores, etc.</p> <ul> <li><code>@Getter</code>: Genera getters para todos los campos.</li> <li><code>@Setter</code>: Genera setters para todos los campos.</li> <li><code>@NoArgsConstructor</code>: Genera un constructor sin argumentos.</li> <li><code>@AllArgsConstructor</code>: Genera un constructor con todos los argumentos.</li> <li><code>@ToString</code>: Genera un m\u00e9todo <code>toString()</code>.</li> <li><code>@EqualsAndHashCode</code>: Genera m\u00e9todos <code>equals()</code> y <code>hashCode()</code>.</li> <li><code>@Data</code>: Combina <code>@Getter</code>, <code>@Setter</code>, <code>@ToString</code>, <code>@EqualsAndHashCode</code> y <code>@RequiredArgsConstructor</code>.</li> <li>Ejemplo: <code>@Data public class Producto { ... }</code></li> </ul>"},{"location":"content/p5/#ejemplo-practico-entidad-producto","title":"Ejemplo pr\u00e1ctico: Entidad <code>Producto</code>","text":"<p>Vamos a crear una entidad <code>Producto</code> que representa un producto en una tienda en l\u00ednea. </p>"},{"location":"content/p5/#codigo-de-la-entidad","title":"C\u00f3digo de la entidad","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"nombre_producto\", nullable = false, length = 100)\n    private String nombre;\n\n    @Column(nullable = false)\n    private Double precio;\n\n    @Column(name = \"fecha_creacion\")\n    private LocalDate fechaCreacion;\n\n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false)\n    private EstadoProducto estado;\n\n    @Transient\n    private String descripcionCompleta;\n}\n\nenum EstadoProducto {\n    ACTIVO, INACTIVO, DESCONTINUADO\n}\n</code></pre>"},{"location":"content/p5/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ul> <li><code>@Entity</code>: Declara la clase como una entidad JPA.</li> <li><code>@Table(name = \"productos\")</code>: Mapea la entidad a la tabla <code>productos</code> en la base de datos.</li> <li><code>@Data</code>: Genera getters, setters, <code>toString()</code>, <code>equals()</code> y <code>hashCode()</code> autom\u00e1ticamente.</li> <li><code>@NoArgsConstructor</code> y <code>@AllArgsConstructor</code>: Generan constructores sin argumentos y con todos los argumentos, respectivamente.</li> <li><code>@Id</code> y <code>@GeneratedValue</code>: Definen <code>id</code> como clave primaria con autoincremento.</li> <li><code>@Column</code>: Especifica detalles de las columnas, como nombres y restricciones.</li> <li><code>@Enumerated(EnumType.STRING)</code>: Almacena el enum <code>EstadoProducto</code> como una cadena en la base de datos.</li> <li><code>@Transient</code>: El campo <code>descripcionCompleta</code> no se persiste en la base de datos.</li> </ul>"},{"location":"content/p5/#buenas-practicas-para-entidades","title":"Buenas pr\u00e1cticas para entidades","text":"<ol> <li>Usar Lombok con moderaci\u00f3n: Aunque <code>@Data</code> es \u00fatil, considera usar <code>@Getter</code> y <code>@Setter</code> individualmente para controlar qu\u00e9 m\u00e9todos se generan.</li> <li>Definir restricciones claras: Usa <code>@Column(nullable = false)</code> y otras restricciones para garantizar la integridad de los datos.</li> <li>Evitar l\u00f3gica de negocio en entidades: Las entidades deben ser simples y solo representar datos. La l\u00f3gica debe ir en servicios.</li> <li>Usar tipos modernos para fechas: Prefiere <code>LocalDate</code>, <code>LocalDateTime</code> en lugar de <code>java.util.Date</code>.</li> <li>Nombres expl\u00edcitos: Usa <code>@Table</code> y <code>@Column</code> para definir nombres claros en la base de datos, evitando conflictos.</li> </ol>"},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>http://seia.space\n</code></pre></p>"},{"location":"content/p7/","title":"Relaciones en Spring Boot con JPA","text":"<p>En Spring Boot, las relaciones entre entidades son fundamentales para modelar asociaciones entre tablas en una base de datos relacional utilizando Spring Data JPA. Estas relaciones se definen mediante anotaciones de JPA como <code>@OneToOne</code>, <code>@OneToMany</code>, <code>@ManyToOne</code> y <code>@ManyToMany</code>. Adem\u00e1s, para manejar la serializaci\u00f3n de objetos a JSON y evitar problemas como bucles infinitos, se utilizan anotaciones como <code>@JsonManagedReference</code> y <code>@JsonBackReference</code> de Jackson. Este documento explica en detalle todas las formas de relaciones en JPA, sus configuraciones, ejemplos pr\u00e1cticos con la entidad <code>Producto</code> y una nueva entidad <code>Categoria</code>, y el uso de estas anotaciones de Jackson.</p>"},{"location":"content/p7/#tipos-de-relaciones-en-jpa","title":"Tipos de relaciones en JPA","text":"<p>JPA soporta cuatro tipos principales de relaciones entre entidades:</p> <ol> <li>One-to-One (<code>@OneToOne</code>): Una entidad est\u00e1 asociada a exactamente una instancia de otra entidad.</li> <li>One-to-Many (<code>@OneToMany</code>): Una entidad est\u00e1 asociada a m\u00faltiples instancias de otra entidad.</li> <li>Many-to-One (<code>@ManyToOne</code>): M\u00faltiples instancias de una entidad est\u00e1n asociadas a una sola instancia de otra entidad.</li> <li>Many-to-Many (<code>@ManyToMany</code>): M\u00faltiples instancias de una entidad est\u00e1n asociadas a m\u00faltiples instancias de otra entidad.</li> </ol> <p>A continuaci\u00f3n, se explican cada una con ejemplos pr\u00e1cticos usando las entidades <code>Producto</code> y <code>Categoria</code>, incluyendo las anotaciones <code>@JsonManagedReference</code> y <code>@JsonBackReference</code> para manejar la serializaci\u00f3n JSON.</p>"},{"location":"content/p7/#anotaciones-clave-para-relaciones","title":"Anotaciones clave para relaciones","text":""},{"location":"content/p7/#anotaciones-de-jpa","title":"Anotaciones de JPA","text":"<ul> <li><code>@OneToOne</code>: Define una relaci\u00f3n uno a uno.</li> <li><code>@OneToMany</code>: Define una relaci\u00f3n uno a muchos.</li> <li><code>@ManyToOne</code>: Define una relaci\u00f3n muchos a uno.</li> <li><code>@ManyToMany</code>: Define una relaci\u00f3n muchos a muchos.</li> <li><code>@JoinColumn</code>: Especifica la columna de la clave for\u00e1nea en la base de datos.</li> <li><code>@JoinTable</code>: Define una tabla intermedia para relaciones muchos a muchos.</li> <li><code>mappedBy</code>: Indica el lado \"inverso\" de una relaci\u00f3n bidireccional, especificando el campo en la otra entidad que gestiona la relaci\u00f3n.</li> </ul>"},{"location":"content/p7/#anotaciones-de-jackson","title":"Anotaciones de Jackson","text":"<ul> <li><code>@JsonManagedReference</code>: Se usa en el lado \"padre\" de una relaci\u00f3n para indicar que este campo debe incluirse en la serializaci\u00f3n JSON.</li> <li><code>@JsonBackReference</code>: Se usa en el lado \"hijo\" para evitar bucles infinitos durante la serializaci\u00f3n JSON, excluyendo este campo de la serializaci\u00f3n.</li> </ul>"},{"location":"content/p7/#ejemplo-practico-entidades-producto-y-categoria","title":"Ejemplo pr\u00e1ctico: Entidades <code>Producto</code> y <code>Categoria</code>","text":"<p>Vamos a modelar una tienda en l\u00ednea con dos entidades: <code>Producto</code> (un producto en venta) y <code>Categoria</code> (la categor\u00eda a la que pertenece el producto). Usaremos Lombok para reducir c\u00f3digo repetitivo y definiremos todas las relaciones posibles entre estas entidades. Cada ejemplo incluye las anotaciones de JPA y Jackson, con explicaciones detalladas.</p>"},{"location":"content/p7/#1-relacion-one-to-one","title":"1. Relaci\u00f3n One-to-One","text":"<p>Una relaci\u00f3n uno a uno implica que una instancia de una entidad est\u00e1 asociada a exactamente una instancia de otra entidad. Por ejemplo, un <code>Producto</code> puede tener una \u00fanica <code>Categoria</code> exclusiva (en este caso, asumimos que cada producto pertenece a una categor\u00eda \u00fanica).</p>"},{"location":"content/p7/#codigo","title":"C\u00f3digo","text":""},{"location":"content/p7/#entidad-producto","title":"Entidad <code>Producto</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"nombre_producto\", nullable = false, length = 100)\n    private String nombre;\n\n    @Column(nullable = false)\n    private Double precio;\n\n    @Column(name = \"fecha_creacion\")\n    private LocalDate fechaCreacion;\n\n    @OneToOne\n    @JoinColumn(name = \"categoria_id\", referencedColumnName = \"id\")\n    @JsonManagedReference\n    private Categoria categoria;\n}\n</code></pre>"},{"location":"content/p7/#entidad-categoria","title":"Entidad <code>Categoria</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\n\n@Entity\n@Table(name = \"categorias\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Categoria {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 50)\n    private String nombre;\n\n    @OneToOne(mappedBy = \"categoria\")\n    @JsonBackReference\n    private Producto producto;\n}\n</code></pre>"},{"location":"content/p7/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>En <code>Producto</code>:</li> <li><code>@OneToOne</code>: Define la relaci\u00f3n uno a uno con <code>Categoria</code>.</li> <li><code>@JoinColumn(name = \"categoria_id\")</code>: Crea una columna <code>categoria_id</code> en la tabla <code>productos</code> como clave for\u00e1nea que referencia la tabla <code>categorias</code>.</li> <li> <p><code>@JsonManagedReference</code>: Indica que <code>Producto</code> es el lado \"padre\" y se incluir\u00e1 en la serializaci\u00f3n JSON.</p> </li> <li> <p>En <code>Categoria</code>:</p> </li> <li><code>@OneToOne(mappedBy = \"categoria\")</code>: Indica que <code>Producto</code> es el propietario de la relaci\u00f3n (el lado que tiene la clave for\u00e1nea). El campo <code>categoria</code> en <code>Producto</code> gestiona la relaci\u00f3n.</li> <li> <p><code>@JsonBackReference</code>: Evita que el campo <code>producto</code> se serialice, previniendo bucles infinitos (por ejemplo, <code>Producto -&gt; Categoria -&gt; Producto</code>).</p> </li> <li> <p>Serializaci\u00f3n JSON: Cuando serializas un <code>Producto</code>, obtendr\u00e1s su <code>Categoria</code>, pero no al rev\u00e9s. Esto evita problemas de recursi\u00f3n infinita.</p> </li> <li> <p>Estructura en la base de datos:</p> </li> <li>Tabla <code>productos</code>: Columnas <code>id</code>, <code>nombre_producto</code>, <code>precio</code>, <code>fecha_creacion</code>, <code>categoria_id</code>.</li> <li>Tabla <code>categorias</code>: Columnas <code>id</code>, <code>nombre</code>.</li> </ul>"},{"location":"content/p7/#2-relacion-many-to-one-y-one-to-many","title":"2. Relaci\u00f3n Many-to-One y One-to-Many","text":"<p>Una relaci\u00f3n muchos a uno implica que m\u00faltiples instancias de una entidad est\u00e1n asociadas a una sola instancia de otra entidad. Por ejemplo, varios <code>Producto</code>s pueden pertenecer a una misma <code>Categoria</code>. La relaci\u00f3n inversa es uno a muchos, donde una <code>Categoria</code> puede tener varios <code>Producto</code>s.</p>"},{"location":"content/p7/#codigo_1","title":"C\u00f3digo","text":""},{"location":"content/p7/#entidad-producto_1","title":"Entidad <code>Producto</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"nombre_producto\", nullable = false, length = 100)\n    private String nombre;\n\n    @Column(nullable = false)\n    private Double precio;\n\n    @Column(name = \"fecha_creacion\")\n    private LocalDate fechaCreacion;\n\n    @ManyToOne\n    @JoinColumn(name = \"categoria_id\", nullable = false)\n    @JsonBackReference\n    private Categoria categoria;\n}\n</code></pre>"},{"location":"content/p7/#entidad-categoria_1","title":"Entidad <code>Categoria</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.util.List;\n\n@Entity\n@Table(name = \"categorias\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Categoria {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 50)\n    private String nombre;\n\n    @OneToMany(mappedBy = \"categoria\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JsonManagedReference\n    private List&lt;Producto&gt; productos;\n}\n</code></pre>"},{"location":"content/p7/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>En <code>Producto</code>:</li> <li><code>@ManyToOne</code>: Indica que muchos <code>Producto</code>s pueden estar asociados a una sola <code>Categoria</code>.</li> <li><code>@JoinColumn(name = \"categoria_id\")</code>: Crea una columna <code>categoria_id</code> en la tabla <code>productos</code> como clave for\u00e1nea.</li> <li> <p><code>@JsonBackReference</code>: Evita serializar el campo <code>categoria</code> para prevenir bucles infinitos.</p> </li> <li> <p>En <code>Categoria</code>:</p> </li> <li><code>@OneToMany(mappedBy = \"categoria\")</code>: Define la relaci\u00f3n inversa, indicando que el campo <code>categoria</code> en <code>Producto</code> gestiona la relaci\u00f3n.</li> <li><code>cascade = CascadeType.ALL</code>: Propaga operaciones (como guardar o eliminar) de <code>Categoria</code> a sus <code>Producto</code>s asociados.</li> <li><code>fetch = FetchType.LAZY</code>: Carga los <code>Producto</code>s asociados solo cuando se accede a ellos (optimizaci\u00f3n).</li> <li> <p><code>@JsonManagedReference</code>: Incluye la lista de <code>Producto</code>s en la serializaci\u00f3n JSON de <code>Categoria</code>.</p> </li> <li> <p>Serializaci\u00f3n JSON: Al serializar una <code>Categoria</code>, obtendr\u00e1s su lista de <code>Producto</code>s, pero al serializar un <code>Producto</code>, no se incluir\u00e1 la <code>Categoria</code> para evitar recursi\u00f3n.</p> </li> <li> <p>Estructura en la base de datos:</p> </li> <li>Tabla <code>productos</code>: Columnas <code>id</code>, <code>nombre_producto</code>, <code>precio</code>, <code>fecha_creacion</code>, <code>categoria_id</code>.</li> <li>Tabla <code>categorias</code>: Columnas <code>id</code>, <code>nombre</code>.</li> </ul>"},{"location":"content/p7/#3-relacion-many-to-many","title":"3. Relaci\u00f3n Many-to-Many","text":"<p>Una relaci\u00f3n muchos a muchos implica que m\u00faltiples instancias de una entidad pueden estar asociadas a m\u00faltiples instancias de otra entidad. Por ejemplo, un <code>Producto</code> puede pertenecer a varias <code>Categoria</code>s, y una <code>Categoria</code> puede estar asociada a varios <code>Producto</code>s. Esto requiere una tabla intermedia.</p>"},{"location":"content/p7/#codigo_2","title":"C\u00f3digo","text":""},{"location":"content/p7/#entidad-producto_2","title":"Entidad <code>Producto</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"nombre_producto\", nullable = false, length = 100)\n    private String nombre;\n\n    @Column(nullable = false)\n    private Double precio;\n\n    @Column(name = \"fecha_creacion\")\n    private LocalDate fechaCreacion;\n\n    @ManyToMany\n    @JoinTable(\n        name = \"producto_categoria\",\n        joinColumns = @JoinColumn(name = \"producto_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"categoria_id\")\n    )\n    @JsonManagedReference\n    private List&lt;Categoria&gt; categorias;\n}\n</code></pre>"},{"location":"content/p7/#entidad-categoria_2","title":"Entidad <code>Categoria</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport java.util.List;\n\n@Entity\n@Table(name = \"categorias\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Categoria {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 50)\n    private String nombre;\n\n    @ManyToMany(mappedBy = \"categorias\")\n    @JsonBackReference\n    private List&lt;Producto&gt; productos;\n}\n</code></pre>"},{"location":"content/p7/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>En <code>Producto</code>:</li> <li><code>@ManyToMany</code>: Define la relaci\u00f3n muchos a muchos con <code>Categoria</code>.</li> <li><code>@JoinTable</code>: Crea una tabla intermedia <code>producto_categoria</code> con dos columnas: <code>producto_id</code> (clave for\u00e1nea a <code>productos</code>) y <code>categoria_id</code> (clave for\u00e1nea a <code>categorias</code>).</li> <li> <p><code>@JsonManagedReference</code>: Incluye la lista de <code>Categoria</code>s en la serializaci\u00f3n JSON de <code>Producto</code>.</p> </li> <li> <p>En <code>Categoria</code>:</p> </li> <li><code>@ManyToMany(mappedBy = \"categorias\")</code>: Indica que <code>Producto</code> es el propietario de la relaci\u00f3n, y el campo <code>categorias</code> en <code>Producto</code> gestiona la relaci\u00f3n.</li> <li> <p><code>@JsonBackReference</code>: Evita serializar la lista de <code>Producto</code>s para prevenir bucles infinitos.</p> </li> <li> <p>Serializaci\u00f3n JSON: Al serializar un <code>Producto</code>, obtendr\u00e1s sus <code>Categoria</code>s, pero al serializar una <code>Categoria</code>, no se incluir\u00e1n los <code>Producto</code>s.</p> </li> <li> <p>Estructura en la base de datos:</p> </li> <li>Tabla <code>productos</code>: Columnas <code>id</code>, <code>nombre_producto</code>, <code>precio</code>, <code>fecha_creacion</code>.</li> <li>Tabla <code>categorias</code>: Columnas <code>id</code>, <code>nombre</code>.</li> <li>Tabla <code>producto_categoria</code>: Columnas <code>producto_id</code>, <code>categoria_id</code>.</li> </ul>"},{"location":"content/p7/#notas-sobre-jsonmanagedreference-y-jsonbackreference","title":"Notas sobre <code>@JsonManagedReference</code> y <code>@JsonBackReference</code>","text":"<ul> <li>Prop\u00f3sito: Estas anotaciones evitan bucles infinitos durante la serializaci\u00f3n JSON en relaciones bidireccionales. Sin ellas, serializar un <code>Producto</code> incluir\u00eda su <code>Categoria</code>, que a su vez incluir\u00eda el <code>Producto</code>, y as\u00ed sucesivamente.</li> <li>Uso:</li> <li><code>@JsonManagedReference</code> se coloca en el lado que deseas incluir en la serializaci\u00f3n (generalmente el \"padre\").</li> <li><code>@JsonBackReference</code> se coloca en el lado que deseas excluir (generalmente el \"hijo\").</li> <li>Alternativas: Si no deseas usar estas anotaciones, puedes usar <code>@JsonIgnore</code> en uno de los lados de la relaci\u00f3n, pero esto excluye completamente el campo de la serializaci\u00f3n. Otra opci\u00f3n es usar DTOs (Data Transfer Objects) para controlar manualmente qu\u00e9 datos se serializan.</li> </ul>"},{"location":"content/p7/#buenas-practicas-para-relaciones","title":"Buenas pr\u00e1cticas para relaciones","text":"<ol> <li>Elegir el lado propietario: En relaciones bidireccionales, siempre define un lado propietario (el que tiene la clave for\u00e1nea o la <code>@JoinTable</code>) usando <code>mappedBy</code> en el lado inverso.</li> <li>Usar <code>cascade</code> con cuidado: Configura <code>cascade = CascadeType.ALL</code> solo si deseas propagar operaciones (como eliminar) a las entidades relacionadas.</li> <li>Configurar <code>fetch</code> apropiadamente:</li> <li><code>FetchType.LAZY</code>: Carga datos solo cuando se accede (mejor para rendimiento).</li> <li><code>FetchType.EAGER</code>: Carga datos inmediatamente (puede causar problemas de rendimiento).</li> <li>Evitar bucles infinitos: Usa <code>@JsonManagedReference</code> y <code>@JsonBackReference</code> o DTOs para manejar serializaci\u00f3n JSON.</li> <li>Validar datos: Usa <code>@NotNull</code> o restricciones en la base de datos para garantizar la integridad de las relaciones.</li> <li>Evitar relaciones innecesarias: Modela solo las relaciones necesarias para tu caso de uso para mantener el dise\u00f1o simple.</li> </ol>"},{"location":"content/p7/#ejemplo-completo-de-relaciones-en-spring-boot-con-jackson","title":"Ejemplo Completo de Relaciones en Spring Boot con Jackson","text":"<p>Ejemplo completo que integra todas las relaciones en Spring Boot con Spring Data JPA: uno a uno, uno a muchos/muchos a uno, y muchos a muchos, utilizando las anotaciones <code>@JsonManagedReference</code> y <code>@JsonBackReference</code> de Jackson para gestionar la serializaci\u00f3n JSON en relaciones bidireccionales. El caso pr\u00e1ctico se basa en una tienda en l\u00ednea con las entidades <code>Cliente</code>, <code>Perfil</code>, <code>Pedido</code>, <code>Producto</code>, y <code>Categoria</code>.</p>"},{"location":"content/p7/#descripcion-del-caso","title":"Descripci\u00f3n del caso","text":"<p>En una tienda en l\u00ednea: - Un <code>Cliente</code> tiene un \u00fanico <code>Perfil</code> (relaci\u00f3n uno a uno bidireccional). - Un <code>Cliente</code> puede tener m\u00faltiples <code>Pedidos</code>, y cada <code>Pedido</code> pertenece a un \u00fanico <code>Cliente</code> (relaci\u00f3n uno a muchos/muchos a uno bidireccional). - Un <code>Pedido</code> puede contener m\u00faltiples <code>Productos</code>, y un <code>Producto</code> puede estar en m\u00faltiples <code>Pedidos</code> (relaci\u00f3n muchos a muchos bidireccional). - Un <code>Producto</code> puede pertenecer a m\u00faltiples <code>Categorias</code>, y una <code>Categoria</code> puede estar asociada con m\u00faltiples <code>Productos</code> (relaci\u00f3n muchos a muchos bidireccional).</p>"},{"location":"content/p7/#codigo-de-las-entidades","title":"C\u00f3digo de las entidades","text":""},{"location":"content/p7/#entidad-cliente","title":"Entidad <code>Cliente</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\n@Table(name = \"clientes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Cliente {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 50)\n    private String nombre;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JoinColumn(name = \"perfil_id\", nullable = false)\n    @JsonManagedReference\n    private Perfil perfil;\n\n    @OneToMany(mappedBy = \"cliente\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n    @JsonManagedReference\n    private List&lt;Pedido&gt; pedidos = new ArrayList&lt;&gt;();\n}\n</code></pre>"},{"location":"content/p7/#entidad-perfil","title":"Entidad <code>Perfil</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"perfiles\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Perfil {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String telefono;\n\n    @Column\n    private LocalDate fechaNacimiento;\n\n    @Column(length = 200)\n    private String direccion;\n\n    @OneToOne(mappedBy = \"perfil\", fetch = FetchType.LAZY)\n    @JsonBackReference\n    private Cliente cliente;\n}\n</code></pre>"},{"location":"content/p7/#entidad-pedido","title":"Entidad <code>Pedido</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.time.LocalDate;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"pedidos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Pedido {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private LocalDate fecha;\n\n    @Column(nullable = false)\n    private Double total;\n\n    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n    @JoinColumn(name = \"cliente_id\", nullable = false)\n    @JsonBackReference\n    private Cliente cliente;\n\n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)\n    @JoinTable(\n        name = \"pedido_producto\",\n        joinColumns = @JoinColumn(name = \"pedido_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"producto_id\")\n    )\n    @JsonManagedReference\n    private Set&lt;Producto&gt; productos = new HashSet&lt;&gt;();\n}\n</code></pre>"},{"location":"content/p7/#entidad-producto_3","title":"Entidad <code>Producto</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 100)\n    private String nombre;\n\n    @Column(nullable = false)\n    private Double precio;\n\n    @ManyToMany(mappedBy = \"productos\", fetch = FetchType.LAZY)\n    @JsonBackReference\n    private Set&lt;Pedido&gt; pedidos = new HashSet&lt;&gt;();\n\n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)\n    @JoinTable(\n        name = \"producto_categoria\",\n        joinColumns = @JoinColumn(name = \"producto_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"categoria_id\")\n    )\n    @JsonManagedReference\n    private Set&lt;Categoria&gt; categorias = new HashSet&lt;&gt;();\n}\n</code></pre>"},{"location":"content/p7/#entidad-categoria_3","title":"Entidad <code>Categoria</code>","text":"<pre><code>package com.tienda.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"categorias\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Categoria {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 50)\n    private String nombre;\n\n    @Column(length = 200)\n    private String descripcion;\n\n    @ManyToMany(mappedBy = \"categorias\", fetch = FetchType.LAZY)\n    @JsonBackReference\n    private Set&lt;Producto&gt; productos = new HashSet&lt;&gt;();\n}\n</code></pre>"},{"location":"content/p8/","title":"Semana 8 - Repositorios en Spring Boot (Spring Data JPA)","text":"<p>Resumen ejecutivo</p> <p>Los repositorios en Spring Boot son interfaces que proporcionan m\u00e9todos para realizar operaciones CRUD (Create, Read, Update, Delete) sobre las entidades sin necesidad de escribir c\u00f3digo SQL. Spring Data JPA genera autom\u00e1ticamente la implementaci\u00f3n bas\u00e1ndose en convenciones de nombres y anotaciones.</p>"},{"location":"content/p8/#1-que-es-un-repositorio-en-spring-boot","title":"1. \u00bfQu\u00e9 es un repositorio en Spring Boot?","text":"<p>Definici\u00f3n</p> <p>Un repositorio es una interfaz que act\u00faa como una capa de abstracci\u00f3n entre la l\u00f3gica de negocio y la base de datos. Proporciona m\u00e9todos para acceder y manipular datos de las entidades de forma sencilla y eficiente.</p>"},{"location":"content/p8/#11-ventajas-de-usar-repositorios","title":"1.1 Ventajas de usar repositorios","text":"Ventaja Descripci\u00f3n Abstracci\u00f3n Oculta la complejidad de las consultas SQL Productividad Reduce significativamente el c\u00f3digo boilerplate Mantenibilidad Centraliza las operaciones de datos Testabilidad Facilita las pruebas unitarias con mocks Consistencia Estandariza el acceso a datos en toda la aplicaci\u00f3n"},{"location":"content/p8/#2-jerarquia-de-interfaces-de-repositorio","title":"2. Jerarqu\u00eda de interfaces de repositorio","text":"<p>Spring Data JPA proporciona una jerarqu\u00eda de interfaces con diferentes niveles de funcionalidad:</p> <pre><code>graph TD\n    A[Repository&lt;T, ID&gt;] --&gt; B[CrudRepository&lt;T, ID&gt;]\n    B --&gt; C[PagingAndSortingRepository&lt;T, ID&gt;]\n    C --&gt; D[JpaRepository&lt;T, ID&gt;]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#fff3e0\n    style D fill:#e8f5e8</code></pre>"},{"location":"content/p8/#21-descripcion-de-cada-interfaz","title":"2.1 Descripci\u00f3n de cada interfaz","text":""},{"location":"content/p8/#repositoryt-id","title":"<code>Repository&lt;T, ID&gt;</code>","text":"<ul> <li>Prop\u00f3sito: Interfaz marcadora base</li> <li>M\u00e9todos: Ninguno (solo marcador)</li> <li>Uso: Cuando quieres crear m\u00e9todos completamente personalizados</li> </ul>"},{"location":"content/p8/#crudrepositoryt-id","title":"<code>CrudRepository&lt;T, ID&gt;</code>","text":"<ul> <li>Prop\u00f3sito: Operaciones CRUD b\u00e1sicas</li> <li>M\u00e9todos principales:   <pre><code>save(S entity)           // Guardar entidad\nfindById(ID id)          // Buscar por ID\nfindAll()                // Obtener todas las entidades\ndeleteById(ID id)        // Eliminar por ID\ncount()                  // Contar registros\nexistsById(ID id)        // Verificar existencia\n</code></pre></li> </ul>"},{"location":"content/p8/#pagingandsortingrepositoryt-id","title":"<code>PagingAndSortingRepository&lt;T, ID&gt;</code>","text":"<ul> <li>Prop\u00f3sito: A\u00f1ade paginaci\u00f3n y ordenamiento</li> <li>M\u00e9todos adicionales:   <pre><code>findAll(Sort sort)           // Buscar con ordenamiento\nfindAll(Pageable pageable)   // Buscar con paginaci\u00f3n\n</code></pre></li> </ul>"},{"location":"content/p8/#jparepositoryt-id","title":"<code>JpaRepository&lt;T, ID&gt;</code>","text":"<ul> <li>Prop\u00f3sito: Funcionalidad completa de JPA</li> <li>M\u00e9todos adicionales:   <pre><code>flush()                      // Sincronizar con BD\nsaveAndFlush(S entity)       // Guardar y sincronizar\ndeleteInBatch(Iterable&lt;T&gt;)   // Eliminaci\u00f3n en lote\ngetOne(ID id)                // Referencia lazy\n</code></pre></li> </ul>"},{"location":"content/p8/#3-creando-tu-primer-repositorio","title":"3. Creando tu primer repositorio","text":""},{"location":"content/p8/#31-ejemplo-practico-entidad-producto","title":"3.1 Ejemplo pr\u00e1ctico: Entidad Producto","text":"<p>Primero, definamos una entidad simple:</p> <pre><code>package com.ejemplo.demo.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.AllArgsConstructor;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"productos\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 100)\n    private String nombre;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String descripcion;\n\n    @Column(nullable = false, precision = 10, scale = 2)\n    private BigDecimal precio;\n\n    @Column(nullable = false)\n    private Integer stock;\n\n    @Column(nullable = false)\n    private Boolean activo = true;\n\n    @Column(name = \"fecha_creacion\", nullable = false)\n    private LocalDateTime fechaCreacion;\n\n    @PrePersist\n    protected void onCreate() {\n        fechaCreacion = LocalDateTime.now();\n    }\n}\n</code></pre>"},{"location":"content/p8/#32-repositorio-basico","title":"3.2 Repositorio b\u00e1sico","text":"<pre><code>package com.ejemplo.demo.repository;\n\nimport com.ejemplo.demo.entity.Producto;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n    // Spring Data JPA genera autom\u00e1ticamente la implementaci\u00f3n\n    // Ya tienes disponibles todos los m\u00e9todos CRUD\n}\n</code></pre>"},{"location":"content/p8/#33-usando-el-repositorio-en-un-servicio","title":"3.3 Usando el repositorio en un servicio","text":"<pre><code>package com.ejemplo.demo.service;\n\nimport com.ejemplo.demo.entity.Producto;\nimport com.ejemplo.demo.repository.ProductoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Crear producto\n    public Producto crearProducto(Producto producto) {\n        return productoRepository.save(producto);\n    }\n\n    // Obtener todos los productos\n    public List&lt;Producto&gt; obtenerTodos() {\n        return productoRepository.findAll();\n    }\n\n    // Buscar por ID\n    public Optional&lt;Producto&gt; buscarPorId(Long id) {\n        return productoRepository.findById(id);\n    }\n\n    // Actualizar producto\n    public Producto actualizarProducto(Producto producto) {\n        return productoRepository.save(producto);\n    }\n\n    // Eliminar producto\n    public void eliminarProducto(Long id) {\n        productoRepository.deleteById(id);\n    }\n\n    // Contar productos\n    public long contarProductos() {\n        return productoRepository.count();\n    }\n}\n</code></pre>"},{"location":"content/p8/#4-metodos-de-consulta-derivados-query-methods","title":"4. M\u00e9todos de consulta derivados (Query Methods)","text":"<p>Convenci\u00f3n sobre configuraci\u00f3n</p> <p>Spring Data JPA puede generar consultas autom\u00e1ticamente bas\u00e1ndose en el nombre del m\u00e9todo. Esto elimina la necesidad de escribir SQL en muchos casos.</p>"},{"location":"content/p8/#41-palabras-clave-para-nombres-de-metodos","title":"4.1 Palabras clave para nombres de m\u00e9todos","text":"Palabra clave Ejemplo SQL equivalente <code>findBy</code> <code>findByNombre(String nombre)</code> <code>WHERE nombre = ?</code> <code>findAllBy</code> <code>findAllByActivo(Boolean activo)</code> <code>WHERE activo = ?</code> <code>countBy</code> <code>countByActivo(Boolean activo)</code> <code>SELECT COUNT(*) WHERE activo = ?</code> <code>deleteBy</code> <code>deleteByActivo(Boolean activo)</code> <code>DELETE WHERE activo = ?</code> <code>existsBy</code> <code>existsByNombre(String nombre)</code> <code>SELECT COUNT(*) &gt; 0 WHERE nombre = ?</code>"},{"location":"content/p8/#42-operadores-de-comparacion","title":"4.2 Operadores de comparaci\u00f3n","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n\n    // Igualdad\n    List&lt;Producto&gt; findByNombre(String nombre);\n\n    // M\u00faltiples condiciones con AND\n    List&lt;Producto&gt; findByNombreAndActivo(String nombre, Boolean activo);\n\n    // M\u00faltiples condiciones con OR\n    List&lt;Producto&gt; findByNombreOrDescripcion(String nombre, String descripcion);\n\n    // Mayor que\n    List&lt;Producto&gt; findByPrecioGreaterThan(BigDecimal precio);\n\n    // Menor que\n    List&lt;Producto&gt; findByPrecioLessThan(BigDecimal precio);\n\n    // Entre valores\n    List&lt;Producto&gt; findByPrecioBetween(BigDecimal min, BigDecimal max);\n\n    // Contiene texto (LIKE %texto%)\n    List&lt;Producto&gt; findByNombreContaining(String texto);\n\n    // Empieza con texto (LIKE texto%)\n    List&lt;Producto&gt; findByNombreStartingWith(String prefijo);\n\n    // Termina con texto (LIKE %texto)\n    List&lt;Producto&gt; findByNombreEndingWith(String sufijo);\n\n    // Ignorar may\u00fasculas/min\u00fasculas\n    List&lt;Producto&gt; findByNombreIgnoreCase(String nombre);\n\n    // Valores nulos\n    List&lt;Producto&gt; findByDescripcionIsNull();\n    List&lt;Producto&gt; findByDescripcionIsNotNull();\n\n    // En una lista de valores\n    List&lt;Producto&gt; findByNombreIn(List&lt;String&gt; nombres);\n\n    // Ordenamiento\n    List&lt;Producto&gt; findByActivoOrderByNombreAsc(Boolean activo);\n    List&lt;Producto&gt; findByActivoOrderByPrecioDesc(Boolean activo);\n\n    // Limitar resultados\n    List&lt;Producto&gt; findTop5ByActivoOrderByFechaCreacionDesc(Boolean activo);\n    Producto findFirstByActivoOrderByPrecioAsc(Boolean activo);\n}\n</code></pre>"},{"location":"content/p8/#43-ejemplo-de-uso-en-el-servicio","title":"4.3 Ejemplo de uso en el servicio","text":"<pre><code>@Service\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Buscar productos activos\n    public List&lt;Producto&gt; obtenerProductosActivos() {\n        return productoRepository.findByActivo(true);\n    }\n\n    // Buscar por rango de precios\n    public List&lt;Producto&gt; buscarPorRangoPrecios(BigDecimal min, BigDecimal max) {\n        return productoRepository.findByPrecioBetween(min, max);\n    }\n\n    // Buscar productos por texto en nombre\n    public List&lt;Producto&gt; buscarPorTexto(String texto) {\n        return productoRepository.findByNombreContaining(texto);\n    }\n\n    // Obtener productos m\u00e1s caros\n    public List&lt;Producto&gt; obtenerMasCaros() {\n        return productoRepository.findTop5ByActivoOrderByPrecioDesc(true);\n    }\n}\n</code></pre>"},{"location":"content/p8/#5-consultas-personalizadas-con-query","title":"5. Consultas personalizadas con @Query","text":"<p>Cuando los m\u00e9todos derivados no son suficientes, puedes escribir consultas personalizadas:</p>"},{"location":"content/p8/#51-consultas-jpql","title":"5.1 Consultas JPQL","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n\n    // JPQL b\u00e1sico\n    @Query(\"SELECT p FROM Producto p WHERE p.precio &gt; :precio\")\n    List&lt;Producto&gt; findProductosCaros(@Param(\"precio\") BigDecimal precio);\n\n    // JPQL con m\u00faltiples par\u00e1metros\n    @Query(\"SELECT p FROM Producto p WHERE p.nombre LIKE %:nombre% AND p.activo = :activo\")\n    List&lt;Producto&gt; buscarPorNombreYEstado(@Param(\"nombre\") String nombre, \n                                         @Param(\"activo\") Boolean activo);\n\n    // Consulta de agregaci\u00f3n\n    @Query(\"SELECT AVG(p.precio) FROM Producto p WHERE p.activo = true\")\n    BigDecimal obtenerPrecioPromedio();\n\n    // Consulta que retorna valores espec\u00edficos\n    @Query(\"SELECT p.nombre, p.precio FROM Producto p WHERE p.stock &lt; :stockMinimo\")\n    List&lt;Object[]&gt; obtenerProductosBajoStock(@Param(\"stockMinimo\") Integer stockMinimo);\n}\n</code></pre>"},{"location":"content/p8/#52-consultas-sql-nativas","title":"5.2 Consultas SQL nativas","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n\n    // SQL nativo b\u00e1sico\n    @Query(value = \"SELECT * FROM productos WHERE precio &gt; ?1\", nativeQuery = true)\n    List&lt;Producto&gt; findProductosCarosNativo(BigDecimal precio);\n\n    // SQL nativo con par\u00e1metros nombrados\n    @Query(value = \"SELECT * FROM productos WHERE nombre ILIKE %:nombre%\", \n           nativeQuery = true)\n    List&lt;Producto&gt; buscarPorNombreIgnorandoMayusculas(@Param(\"nombre\") String nombre);\n\n    // Consulta de actualizaci\u00f3n\n    @Modifying\n    @Query(\"UPDATE Producto p SET p.activo = false WHERE p.stock = 0\")\n    int desactivarProductosSinStock();\n\n    // Consulta de eliminaci\u00f3n\n    @Modifying\n    @Query(\"DELETE FROM Producto p WHERE p.activo = false\")\n    int eliminarProductosInactivos();\n}\n</code></pre>"},{"location":"content/p8/#6-paginacion-y-ordenamiento","title":"6. Paginaci\u00f3n y ordenamiento","text":""},{"location":"content/p8/#61-implementacion-basica","title":"6.1 Implementaci\u00f3n b\u00e1sica","text":"<pre><code>@Service\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Paginaci\u00f3n simple\n    public Page&lt;Producto&gt; obtenerProductosPaginados(int pagina, int tama\u00f1o) {\n        Pageable pageable = PageRequest.of(pagina, tama\u00f1o);\n        return productoRepository.findAll(pageable);\n    }\n\n    // Paginaci\u00f3n con ordenamiento\n    public Page&lt;Producto&gt; obtenerProductosOrdenados(int pagina, int tama\u00f1o, String campo, String direccion) {\n        Sort sort = direccion.equalsIgnoreCase(\"desc\") ? \n                   Sort.by(campo).descending() : \n                   Sort.by(campo).ascending();\n\n        Pageable pageable = PageRequest.of(pagina, tama\u00f1o, sort);\n        return productoRepository.findAll(pageable);\n    }\n\n    // Paginaci\u00f3n con filtros\n    public Page&lt;Producto&gt; buscarProductosActivos(int pagina, int tama\u00f1o) {\n        Pageable pageable = PageRequest.of(pagina, tama\u00f1o, \n                                          Sort.by(\"fechaCreacion\").descending());\n        return productoRepository.findByActivo(true, pageable);\n    }\n}\n</code></pre>"},{"location":"content/p8/#62-repositorio-con-paginacion-personalizada","title":"6.2 Repositorio con paginaci\u00f3n personalizada","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n\n    // M\u00e9todo que acepta Pageable\n    Page&lt;Producto&gt; findByActivo(Boolean activo, Pageable pageable);\n\n    // Consulta personalizada con paginaci\u00f3n\n    @Query(\"SELECT p FROM Producto p WHERE p.precio BETWEEN :min AND :max\")\n    Page&lt;Producto&gt; findByRangoPrecios(@Param(\"min\") BigDecimal min, \n                                     @Param(\"max\") BigDecimal max, \n                                     Pageable pageable);\n}\n</code></pre>"},{"location":"content/p8/#7-ejemplo-completo-controlador-rest","title":"7. Ejemplo completo: Controlador REST","text":"<pre><code>package com.ejemplo.demo.controller;\n\nimport com.ejemplo.demo.entity.Producto;\nimport com.ejemplo.demo.service.ProductoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/productos\")\npublic class ProductoController {\n\n    @Autowired\n    private ProductoService productoService;\n\n    // Obtener todos los productos con paginaci\u00f3n\n    @GetMapping\n    public ResponseEntity&lt;Page&lt;Producto&gt;&gt; obtenerProductos(\n            @RequestParam(defaultValue = \"0\") int pagina,\n            @RequestParam(defaultValue = \"10\") int tama\u00f1o,\n            @RequestParam(defaultValue = \"id\") String ordenarPor,\n            @RequestParam(defaultValue = \"asc\") String direccion) {\n\n        Page&lt;Producto&gt; productos = productoService.obtenerProductosOrdenados(\n                pagina, tama\u00f1o, ordenarPor, direccion);\n        return ResponseEntity.ok(productos);\n    }\n\n    // Obtener producto por ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;Producto&gt; obtenerProducto(@PathVariable Long id) {\n        Optional&lt;Producto&gt; producto = productoService.buscarPorId(id);\n        return producto.map(ResponseEntity::ok)\n                      .orElse(ResponseEntity.notFound().build());\n    }\n\n    // Crear nuevo producto\n    @PostMapping\n    public ResponseEntity&lt;Producto&gt; crearProducto(@RequestBody Producto producto) {\n        Producto nuevoProducto = productoService.crearProducto(producto);\n        return ResponseEntity.ok(nuevoProducto);\n    }\n\n    // Buscar productos por texto\n    @GetMapping(\"/buscar\")\n    public ResponseEntity&lt;List&lt;Producto&gt;&gt; buscarProductos(\n            @RequestParam String texto) {\n        List&lt;Producto&gt; productos = productoService.buscarPorTexto(texto);\n        return ResponseEntity.ok(productos);\n    }\n\n    // Buscar por rango de precios\n    @GetMapping(\"/precio\")\n    public ResponseEntity&lt;List&lt;Producto&gt;&gt; buscarPorPrecio(\n            @RequestParam BigDecimal min,\n            @RequestParam BigDecimal max) {\n        List&lt;Producto&gt; productos = productoService.buscarPorRangoPrecios(min, max);\n        return ResponseEntity.ok(productos);\n    }\n}\n</code></pre>"},{"location":"content/p8/#8-mejores-practicas","title":"8. Mejores pr\u00e1cticas","text":""},{"location":"content/p8/#81-convenciones-de-nomenclatura","title":"8.1 Convenciones de nomenclatura","text":"<p>Recomendaciones</p> <ul> <li>Usa nombres descriptivos: <code>findByNombreContaining</code> en lugar de <code>findByNombreLike</code></li> <li>Mant\u00e9n consistencia en los nombres de m\u00e9todos</li> <li>Prefiere m\u00e9todos derivados sobre consultas personalizadas cuando sea posible</li> <li>Usa <code>@Param</code> para mayor claridad en consultas JPQL</li> </ul>"},{"location":"content/p8/#82-optimizacion-de-rendimiento","title":"8.2 Optimizaci\u00f3n de rendimiento","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n\n    // Usar proyecciones para obtener solo campos necesarios\n    @Query(\"SELECT p.id, p.nombre, p.precio FROM Producto p WHERE p.activo = true\")\n    List&lt;Object[]&gt; obtenerResumenProductos();\n\n    // Usar EXISTS para verificaciones de existencia\n    @Query(\"SELECT CASE WHEN COUNT(p) &gt; 0 THEN true ELSE false END FROM Producto p WHERE p.nombre = :nombre\")\n    boolean existeProductoConNombre(@Param(\"nombre\") String nombre);\n\n    // Limitar resultados cuando sea apropiado\n    List&lt;Producto&gt; findTop10ByActivoOrderByFechaCreacionDesc(Boolean activo);\n}\n</code></pre>"},{"location":"content/p8/#83-manejo-de-transacciones","title":"8.3 Manejo de transacciones","text":"<pre><code>@Service\n@Transactional\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // M\u00e9todo que requiere transacci\u00f3n\n    @Transactional\n    public void actualizarStockMasivo(List&lt;Producto&gt; productos) {\n        for (Producto producto : productos) {\n            productoRepository.save(producto);\n        }\n        // Si hay error, toda la operaci\u00f3n se revierte\n    }\n\n    // M\u00e9todo de solo lectura (optimizaci\u00f3n)\n    @Transactional(readOnly = true)\n    public List&lt;Producto&gt; obtenerProductosActivos() {\n        return productoRepository.findByActivo(true);\n    }\n}\n</code></pre>"},{"location":"content/p9/","title":"Semana 9 - Servicios en Spring Boot (Conceptos B\u00e1sicos)","text":"<p>Resumen ejecutivo</p> <p>Los servicios en Spring Boot contienen la l\u00f3gica de negocio de la aplicaci\u00f3n. Act\u00faan como una capa intermedia entre controladores y repositorios, implementando reglas de negocio y validaciones.</p>"},{"location":"content/p9/#1-que-es-un-servicio","title":"1. \u00bfQu\u00e9 es un servicio?","text":"<p>Definici\u00f3n</p> <p>Un servicio es una clase anotada con <code>@Service</code> que encapsula la l\u00f3gica de negocio. Procesa datos, aplica reglas de negocio y prepara informaci\u00f3n para los controladores.</p>"},{"location":"content/p9/#11-responsabilidades-principales","title":"1.1 Responsabilidades principales","text":"Responsabilidad Descripci\u00f3n Ejemplo L\u00f3gica de negocio Reglas espec\u00edficas del dominio Calcular descuentos Transformaci\u00f3n Convierte DTOs \u2194 Entidades Mapeo de datos Validaci\u00f3n Validaciones de negocio Verificar stock Transacciones Consistencia de datos Operaciones at\u00f3micas"},{"location":"content/p9/#12-ventajas","title":"1.2 Ventajas","text":"<ul> <li>Separaci\u00f3n de responsabilidades: Controladores manejan HTTP, servicios la l\u00f3gica</li> <li>Reutilizaci\u00f3n: Un servicio puede usarse en m\u00faltiples controladores</li> <li>Testabilidad: F\u00e1cil de probar con mocks</li> <li>Mantenibilidad: Cambios centralizados</li> </ul>"},{"location":"content/p9/#2-estructura-basica","title":"2. Estructura b\u00e1sica","text":"<pre><code>package com.ejemplo.demo.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service                    // Marca la clase como servicio\n@Transactional             // Manejo autom\u00e1tico de transacciones\npublic class ProductoService {\n\n    @Autowired             // Inyecci\u00f3n de dependencias\n    private ProductoRepository productoRepository;\n\n    // M\u00e9todos con l\u00f3gica de negocio\n    public ProductoDTO crearProducto(CrearProductoDTO dto) {\n        // L\u00f3gica aqu\u00ed\n    }\n}\n</code></pre>"},{"location":"content/p9/#21-anotaciones-importantes","title":"2.1 Anotaciones importantes","text":""},{"location":"content/p9/#service","title":"<code>@Service</code>","text":"<ul> <li>Marca la clase como servicio</li> <li>Spring la detecta autom\u00e1ticamente</li> <li>Especializaci\u00f3n de <code>@Component</code></li> </ul>"},{"location":"content/p9/#transactional","title":"<code>@Transactional</code>","text":"<ul> <li>Manejo autom\u00e1tico de transacciones</li> <li>Rollback autom\u00e1tico en caso de error</li> <li>Se puede usar a nivel de clase o m\u00e9todo</li> </ul>"},{"location":"content/p9/#3-implementacion-practica","title":"3. Implementaci\u00f3n pr\u00e1ctica","text":""},{"location":"content/p9/#31-entidades-y-dtos","title":"3.1 Entidades y DTOs","text":"<pre><code>// Entidad\n@Entity\n@Table(name = \"productos\")\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Producto {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String nombre;\n\n    private String descripcion;\n\n    @Column(nullable = false)\n    private BigDecimal precio;\n\n    @Column(nullable = false)\n    private Integer stock;\n\n    @Column(nullable = false)\n    private Boolean activo = true;\n\n    // getters y setters...\n}\n\n// DTO para transferencia\n@Data\npublic class ProductoDTO {\n    private Long id;\n    private String nombre;\n    private String descripcion;\n    private BigDecimal precio;\n    private Integer stock;\n    private Boolean activo;\n}\n\n// DTO para creaci\u00f3n\n@Data\npublic class CrearProductoDTO {\n    @NotBlank(message = \"El nombre es obligatorio\")\n    private String nombre;\n\n    private String descripcion;\n\n    @NotNull(message = \"El precio es obligatorio\")\n    @DecimalMin(value = \"0.01\", message = \"El precio debe ser mayor a 0\")\n    private BigDecimal precio;\n\n    @NotNull(message = \"El stock es obligatorio\")\n    @Min(value = 0, message = \"El stock no puede ser negativo\")\n    private Integer stock;\n}\n</code></pre>"},{"location":"content/p9/#32-repositorio","title":"3.2 Repositorio","text":"<pre><code>@Repository\npublic interface ProductoRepository extends JpaRepository&lt;Producto, Long&gt; {\n    List&lt;Producto&gt; findByActivo(Boolean activo);\n    List&lt;Producto&gt; findByNombreContainingIgnoreCase(String nombre);\n}\n</code></pre>"},{"location":"content/p9/#33-servicio-basico","title":"3.3 Servicio b\u00e1sico","text":"<pre><code>@Service\n@Transactional\npublic class ProductoService {\n\n    @Autowired\n    private ProductoRepository productoRepository;\n\n    // Crear producto\n    public ProductoDTO crearProducto(CrearProductoDTO dto) {\n        // 1. Validar datos\n        if (dto.getNombre() == null || dto.getNombre().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"El nombre es obligatorio\");\n        }\n\n        // 2. Convertir DTO a entidad\n        Producto producto = new Producto();\n        producto.setNombre(dto.getNombre());\n        producto.setDescripcion(dto.getDescripcion());\n        producto.setPrecio(dto.getPrecio());\n        producto.setStock(dto.getStock());\n        producto.setActivo(true);\n\n        // 3. Guardar\n        Producto guardado = productoRepository.save(producto);\n\n        // 4. Convertir a DTO y retornar\n        return convertirADTO(guardado);\n    }\n\n    // Obtener por ID\n    @Transactional(readOnly = true)\n    public ProductoDTO obtenerPorId(Long id) {\n        Producto producto = productoRepository.findById(id)\n            .orElseThrow(() -&gt; new RuntimeException(\"Producto no encontrado\"));\n        return convertirADTO(producto);\n    }\n\n    // Listar productos activos\n    @Transactional(readOnly = true)\n    public List&lt;ProductoDTO&gt; obtenerActivos() {\n        List&lt;Producto&gt; productos = productoRepository.findByActivo(true);\n        return productos.stream()\n                .map(this::convertirADTO)\n                .collect(Collectors.toList());\n    }\n\n    // Buscar por nombre\n    @Transactional(readOnly = true)\n    public List&lt;ProductoDTO&gt; buscarPorNombre(String nombre) {\n        List&lt;Producto&gt; productos = productoRepository.findByNombreContainingIgnoreCase(nombre);\n        return productos.stream()\n                .map(this::convertirADTO)\n                .collect(Collectors.toList());\n    }\n\n    // M\u00e9todo auxiliar para convertir entidad a DTO\n    private ProductoDTO convertirADTO(Producto producto) {\n        ProductoDTO dto = new ProductoDTO();\n        dto.setId(producto.getId());\n        dto.setNombre(producto.getNombre());\n        dto.setDescripcion(producto.getDescripcion());\n        dto.setPrecio(producto.getPrecio());\n        dto.setStock(producto.getStock());\n        dto.setActivo(producto.getActivo());\n        return dto;\n    }\n}\n</code></pre> <p>```</p>"},{"location":"content/p9/#4-ejercicios-practicos","title":"4. Ejercicios pr\u00e1cticos","text":""},{"location":"content/p9/#ejercicio-1-crear-un-servicio-basico","title":"Ejercicio 1: Crear un servicio b\u00e1sico","text":"<p>Crea un servicio <code>UsuarioService</code> con m\u00e9todos para: - Crear usuario - Buscar por email - Listar usuarios activos</p>"},{"location":"content/p9/#ejercicio-2-agregar-validaciones","title":"Ejercicio 2: Agregar validaciones","text":"<p>A\u00f1ade validaciones al <code>ProductoService</code> para: - Verificar que el precio sea positivo - Validar que el stock no sea negativo - Comprobar que el nombre no est\u00e9 vac\u00edo</p>"},{"location":"content/p9/#ejercicio-3-metodo-de-negocio","title":"Ejercicio 3: M\u00e9todo de negocio","text":"<p>Implementa un m\u00e9todo <code>calcularDescuento()</code> que: - Aplique 10% de descuento si el stock &gt; 100 - Aplique 5% de descuento si el stock &gt; 50 - Sin descuento si el stock \u2264 50</p>"},{"location":"content/p9/#5-puntos-clave","title":"5. Puntos clave","text":"<p>Recuerda</p> <ul> <li>Los servicios contienen la l\u00f3gica de negocio</li> <li>Usa <code>@Service</code> para marcar la clase</li> <li><code>@Transactional</code> maneja las transacciones autom\u00e1ticamente</li> <li>Convierte siempre entre DTOs y entidades</li> <li>Valida los datos antes de procesarlos</li> </ul>"},{"location":"pi/p1/","title":"Fork del Repositorio para el Proyecto Integrador - B\u00e1sico","text":""},{"location":"pi/p1/#objetivo","title":"Objetivo","text":"<p>Iniciar el Proyecto Integrador realizando un fork del repositorio original por parte del l\u00edder del grupo, seguido por los forks de los dem\u00e1s integrantes desde el repositorio del l\u00edder, configurando el archivo <code>info.json</code>, completando el tutorial de estructuraci\u00f3n de un proyecto API REST en Spring Boot por parte del l\u00edder con ayuda del equipo, y sincronizando los forks de los integrantes con los cambios del l\u00edder.</p>"},{"location":"pi/p1/#instrucciones-para-el-lider-del-grupo","title":"Instrucciones para el L\u00edder del Grupo","text":"<ol> <li> <p>Fork del Repositorio Original </p> <ul> <li>Responsable: Solo el l\u00edder del grupo debe realizar esta acci\u00f3n.  </li> <li>Accede al repositorio oficial en: https://github.com/jfinfocesde/pi_backend2.git.  </li> <li>Haz clic en el bot\u00f3n Fork en la parte superior derecha de la p\u00e1gina de GitHub.  </li> <li>Selecciona tu cuenta personal como destino del fork. Esto crear\u00e1 una copia del repositorio en tu cuenta de GitHub (por ejemplo, <code>https://github.com/LIDER_USUARIO/pi_backend2</code>).</li> </ul> </li> <li> <p>Clonar el Repositorio </p> <ul> <li>Clona tu repositorio forkeado a tu m\u00e1quina local utilizando el comando: <pre><code>git clone https://github.com/LIDER_USUARIO/pi_backend2.git\n</code></pre>     Reemplaza <code>LIDER_USUARIO</code> con tu nombre de usuario de GitHub.</li> </ul> </li> <li> <p>Editar el archivo <code>info.json</code> </p> <ul> <li>Abre el archivo <code>info.json</code> ubicado en la ra\u00edz del repositorio clonado.  </li> <li>Completa el archivo con los datos del l\u00edder y el n\u00famero de grupo, siguiendo este formato: <pre><code>{\n    \"identificacion\": \"ID_DEL_LIDER\",\n    \"nombres\": \"NOMBRES_DEL_LIDER\",\n    \"apellidos\": \"APELLIDOS_DEL_LIDER\",\n    \"grupo\": \"b2-sabado-#\"\n}\n</code></pre>     Por ejemplo, para el l\u00edder Juan P\u00e9rez con identificaci\u00f3n 123456 y grupo 5: <pre><code>{\n    \"identificacion\": \"123456\",\n    \"nombres\": \"Juan\",\n    \"apellidos\": \"P\u00e9rez\",\n    \"grupo\": \"b2-sabado-5\"\n}\n</code></pre></li> <li>Aseg\u00farate de reemplazar <code>#</code> con el n\u00famero de grupo asignado.</li> </ul> </li> <li> <p>Confirmar y Subir Cambios del <code>info.json</code> </p> <ul> <li>Guarda los cambios en el archivo <code>info.json</code>.  </li> <li>Realiza un commit con los cambios: <pre><code>git add info.json\ngit commit -m \"Actualizaci\u00f3n de info.json con datos del l\u00edder y grupo\"\ngit push origin main\n</code></pre></li> </ul> </li> <li> <p>Completar el Tutorial de Spring Boot </p> <ul> <li>El l\u00edder, con la ayuda del equipo, debe completar el tutorial \"Estructuraci\u00f3n de un Proyecto API REST en Spring Boot\", disponible en la p\u00e1gina oficial del curso, en la secci\u00f3n de Tutoriales.  </li> <li>Sigue las instrucciones del tutorial para configurar y estructurar el proyecto en tu repositorio local (<code>LIDER_USUARIO/pi_backend2</code>).  </li> <li>Coordina con el equipo para dividir tareas, como la configuraci\u00f3n del entorno, creaci\u00f3n de archivos iniciales, o pruebas, seg\u00fan sea necesario.  </li> <li>Una vez completado el tutorial, realiza un commit con los cambios: <pre><code>git add .\ngit commit -m \"Implementaci\u00f3n inicial del proyecto API REST seg\u00fan tutorial\"\ngit push origin main\n</code></pre></li> </ul> </li> <li> <p>Compartir el Repositorio </p> <ul> <li>Comparte el enlace de tu repositorio forkeado (<code>https://github.com/LIDER_USUARIO/pi_backend2</code>) con los dem\u00e1s miembros del grupo para que realicen sus forks.</li> </ul> </li> </ol>"},{"location":"pi/p1/#instrucciones-para-los-demas-integrantes-del-grupo","title":"Instrucciones para los Dem\u00e1s Integrantes del Grupo","text":"<ol> <li> <p>Fork del Repositorio del L\u00edder </p> <ul> <li>Accede al repositorio forkeado por el l\u00edder del grupo (por ejemplo, <code>https://github.com/LIDER_USUARIO/pi_backend2</code>).  </li> <li>Haz clic en el bot\u00f3n Fork en la parte superior derecha de la p\u00e1gina de GitHub.  </li> <li>Selecciona tu cuenta personal como destino del fork. Esto crear\u00e1 una copia del repositorio del l\u00edder en tu cuenta de GitHub (por ejemplo, <code>https://github.com/TU_USUARIO/pi_backend2</code>).</li> </ul> </li> <li> <p>Clonar el Repositorio </p> <ul> <li>Clona tu repositorio forkeado a tu m\u00e1quina local utilizando el comando: <pre><code>git clone https://github.com/TU_USUARIO/pi_backend2.git\n</code></pre>     Reemplaza <code>TU_USUARIO</code> con tu nombre de usuario de GitHub.</li> </ul> </li> <li> <p>Verificar el archivo <code>info.json</code> </p> <ul> <li>Abre el archivo <code>info.json</code> ubicado en la ra\u00edz del repositorio clonado.  </li> <li>Verifica que el archivo contenga los datos correctos del l\u00edder y el grupo, como los configur\u00f3 el l\u00edder. Por ejemplo: <pre><code>{\n    \"identificacion\": \"123456\",\n    \"nombres\": \"Juan\",\n    \"apellidos\": \"P\u00e9rez\",\n    \"grupo\": \"b2-sabado-5\"\n}\n</code></pre></li> <li>Nota: No modifiques el archivo <code>info.json</code> a menos que el l\u00edder indique que necesitas corregir algo espec\u00edfico.</li> </ul> </li> <li> <p>Confirmar y Subir Cambios (si aplica) </p> <ul> <li>Si realizas cambios adicionales en el proyecto (por ejemplo, tareas asignadas por el l\u00edder), haz un commit: <pre><code>git add .\ngit commit -m \"Descripci\u00f3n de los cambios realizados\"\ngit push origin main\n</code></pre></li> </ul> </li> <li> <p>Crear un Pull Request al Repositorio del L\u00edder </p> <ul> <li>Una vez que hayas realizado cambios, ve a tu repositorio en GitHub (<code>TU_USUARIO/pi_backend2</code>).  </li> <li>Haz clic en Contribute o New Pull Request.  </li> <li>Selecciona el repositorio del l\u00edder (<code>LIDER_USUARIO/pi_backend2</code>) como destino del pull request.  </li> <li>Describe los cambios realizados en el pull request y env\u00edalo.  </li> <li>El l\u00edder revisar\u00e1 y, si es correcto, aceptar\u00e1 los cambios para integrarlos en su repositorio.</li> </ul> </li> </ol>"},{"location":"pi/p1/#notas-importantes","title":"Notas Importantes","text":"<ul> <li>L\u00edder: Solo el l\u00edder realiza el fork del repositorio original (<code>jfinfocesde/pi_backend2</code>) y configura el archivo <code>info.json</code> con sus datos y el n\u00famero de grupo. El l\u00edder, con la ayuda del equipo, completa el tutorial de Spring Boot en su repositorio.</li> <li>Integrantes: Cada integrante (excepto el l\u00edder) debe realizar un fork del repositorio del l\u00edder, no del repositorio original.  </li> <li>Aseg\u00farate de que el n\u00famero de grupo y los datos del l\u00edder en <code>info.json</code> sean correctos y no los modifiques a menos que se indique lo contrario.</li> <li>Los pull requests deben enviarse al repositorio del l\u00edder (<code>LIDER_USUARIO/pi_backend2</code>), no al repositorio original.</li> <li>Comun\u00edcate con el l\u00edder para coordinar las tareas y garantizar que los cambios enviados sean relevantes para el proyecto.</li> <li>Sincroniza tu fork con el repositorio del l\u00edder despu\u00e9s de que se complete el tutorial para asegurarte de tener la estructura inicial del proyecto API REST.</li> <li>Si encuentras conflictos al enviar un pull request o sincronizar, resu\u00e9lvelos localmente o consulta con el l\u00edder.</li> </ul>"},{"location":"pi/p2/","title":"Repositorio para el Proyecto Integrador - Seguridad y Documentaci\u00f3n API","text":"<pre><code>git clone https://github.com/jfinfocesde/pi_backend2_security_openapi.git\n</code></pre>"},{"location":"tutorials/p1/","title":"Estructuraci\u00f3n de un Proyecto API REST en Spring Boot","text":"<p>Introducci\u00f3n</p> <p>La estructura de un proyecto API REST en Spring Boot debe ser clara, modular y seguir principios de dise\u00f1o como separaci\u00f3n de preocupaciones (SoC) y arquitectura limpia. Esto facilita el mantenimiento, la escalabilidad y las pruebas del c\u00f3digo. En esta gu\u00eda, se detalla una estructura recomendada basada en una arquitectura por capas, explicando el prop\u00f3sito de cada componente, con ejemplos pr\u00e1cticos y diagramas para ilustrar la organizaci\u00f3n.</p>"},{"location":"tutorials/p1/#principios-de-diseno","title":"Principios de Dise\u00f1o","text":"<p>Antes de definir la estructura, es importante basarse en principios clave:</p> <ul> <li>Separaci\u00f3n de Preocupaciones (SoC): Divide el proyecto en capas con responsabilidades espec\u00edficas (presentaci\u00f3n, l\u00f3gica de negocio, acceso a datos).</li> <li>Arquitectura Limpia: Mant\u00e9n las reglas de negocio independientes de frameworks y bases de datos.</li> <li>Escalabilidad: La estructura debe permitir agregar nuevas funcionalidades sin afectar las existentes.</li> <li>Testeabilidad: Facilita la escritura de pruebas unitarias e integrales.</li> <li>Modularidad: Organiza el c\u00f3digo para que sea f\u00e1cil de entender y modificar.</li> </ul>"},{"location":"tutorials/p1/#estructura-recomendada-arquitectura-por-capas","title":"Estructura Recomendada: Arquitectura por Capas","text":"<p>La arquitectura por capas es una de las m\u00e1s utilizadas en proyectos Spring Boot. Divide el proyecto en las siguientes capas:</p> <ol> <li>Capa de Presentaci\u00f3n (Controllers): Maneja las solicitudes HTTP y las respuestas.</li> <li>Capa de Servicio (Services): Contiene la l\u00f3gica de negocio.</li> <li>Capa de Acceso a Datos (Repositories): Gestiona la interacci\u00f3n con la base de datos.</li> <li>Capa de Modelo (Entities/DTOs): Define las entidades de la base de datos y objetos de transferencia de datos (DTOs).</li> <li>Capa de Configuraci\u00f3n: Configura beans, seguridad, y otras dependencias.</li> <li>Capa de Utilidades (Utils): Contiene clases transversales como manejadores de excepciones, validadores, etc.</li> </ol>"},{"location":"tutorials/p1/#diagrama-de-arquitectura","title":"Diagrama de Arquitectura","text":"<pre><code>graph TD\n    A[Cliente HTTP] --&gt;|Solicitudes HTTP| B[Controladores]\n    B --&gt;|Llama| C[Servicios]\n    C --&gt;|Consulta/Actualiza| D[Repositorios]\n    D --&gt;|Accede| E[Base de Datos]\n    C --&gt;|Usa| F[DTOs]\n    D --&gt;|Mapea| G[Entidades]\n    B --&gt;|Maneja Excepciones| H[Excepciones Personalizadas]\n    C --&gt;|Usa| I[Utilidades]</code></pre>"},{"location":"tutorials/p1/#estructura-de-carpetas","title":"Estructura de Carpetas","text":"<p>A continuaci\u00f3n, se propone una estructura de directorios para un proyecto Spring Boot API REST:</p> <pre><code>my-api-rest/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 myapi/\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 Application.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 SwaggerConfig.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 SecurityConfig.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 UserController.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 impl/\n\u2502   \u2502   \u2502               \u2502   \u2502   \u251c\u2500\u2500 UserServiceImpl.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 UserRepository.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 entity/\n\u2502   \u2502   \u2502               \u2502   \u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u2502               \u2502   \u2502   \u251c\u2500\u2500 UserDTO.java\n\u2502   \u2502   \u2502               \u2502   \u2502   \u251c\u2500\u2500 UserCreateDTO.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 exception/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 ResourceNotFoundException.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 util/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 MapperUtil.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 Constants.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.properties\n\u2502   \u2502       \u251c\u2500\u2500 application-dev.properties\n\u2502   \u2502       \u251c\u2500\u2500 application-prod.properties\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       \u2502   \u2514\u2500\u2500 com/\n\u2502       \u2502       \u2514\u2500\u2500 example/\n\u2502       \u2502           \u2514\u2500\u2500 myapi/\n\u2502       \u2502               \u251c\u2500\u2500 controller/\n\u2502       \u2502               \u2502   \u251c\u2500\u2500 UserControllerTest.java\n\u2502       \u2502               \u251c\u2500\u2500 service/\n\u2502       \u2502               \u2502   \u251c\u2500\u2500 UserServiceTest.java\n\u2502       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 application-test.properties\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"tutorials/p1/#explicacion-de-cada-carpetapaquete","title":"Explicaci\u00f3n de Cada Carpeta/Paquete","text":"<ol> <li>config/: Contiene configuraciones de la aplicaci\u00f3n, como:</li> <li>Configuraci\u00f3n de Swagger/OpenAPI para documentar la API.</li> <li>Configuraci\u00f3n de seguridad (Spring Security, JWT, etc.).</li> <li> <p>Configuraci\u00f3n de beans personalizados.</p> </li> <li> <p>controller/: Contiene los controladores REST que manejan las solicitudes HTTP. Usan anotaciones como <code>@RestController</code>, <code>@GetMapping</code>, <code>@PostMapping</code>, etc.</p> </li> <li> <p>service/: Contiene interfaces y clases que implementan la l\u00f3gica de negocio. La subcarpeta <code>impl/</code> almacena las implementaciones de las interfaces.</p> </li> <li> <p>repository/: Contiene interfaces que extienden <code>JpaRepository</code> o <code>CrudRepository</code> para interactuar con la base de datos.</p> </li> <li> <p>model/:</p> </li> <li><code>entity/</code>: Almacena las entidades JPA (mapeadas a tablas de la base de datos).</li> <li> <p><code>dto/</code>: Contiene objetos de transferencia de datos (DTOs) para aislar la l\u00f3gica de negocio de la capa de presentaci\u00f3n.</p> </li> <li> <p>exception/: Define excepciones personalizadas, como <code>ResourceNotFoundException</code>, y manejadores globales de excepciones (<code>@ControllerAdvice</code>).</p> </li> <li> <p>util/: Incluye clases utilitarias, como mapeadores (ej. MapStruct), constantes, o validadores.</p> </li> <li> <p>resources/: Contiene archivos de configuraci\u00f3n:</p> </li> <li><code>application.properties</code>: Configuraci\u00f3n general.</li> <li> <p>Perfiles espec\u00edficos (<code>application-dev.properties</code>, <code>application-prod.properties</code>) para entornos.</p> </li> <li> <p>test/: Contiene pruebas unitarias e integrales para controladores, servicios y repositorios.</p> </li> </ol>"},{"location":"tutorials/p1/#ejemplo-completo","title":"Ejemplo Completo","text":"<p>A continuaci\u00f3n, se presenta un ejemplo pr\u00e1ctico de una API REST para gestionar usuarios, con todas las capas implementadas.</p>"},{"location":"tutorials/p1/#1-entidad-userjava","title":"1. Entidad (<code>User.java</code>)","text":"<pre><code>package com.example.myapi.model.entity;\n\nimport jakarta.persistence.*;\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @Column(nullable = false)\n    private String name;\n\n    @Column(name = \"created_at\", nullable = false)\n    private LocalDateTime createdAt;\n\n    // Constructores, getters y setters\n    public User() {\n        this.createdAt = LocalDateTime.now();\n    }\n\n    public User(String email, String name) {\n        this.email = email;\n        this.name = name;\n        this.createdAt = LocalDateTime.now();\n    }\n\n    // Getters y setters omitidos por brevedad\n}\n</code></pre>"},{"location":"tutorials/p1/#2-dto-userdtojava","title":"2. DTO (<code>UserDTO.java</code>)","text":"<pre><code>package com.example.myapi.model.dto;\n\npublic class UserDTO {\n    private Long id;\n    private String email;\n    private String name;\n\n    // Constructores, getters y setters\n    public UserDTO() {}\n\n    public UserDTO(Long id, String email, String name) {\n        this.id = id;\n        this.email = email;\n        this.name = name;\n    }\n\n    // Getters y setters omitidos por brevedad\n}\n</code></pre>"},{"location":"tutorials/p1/#3-repositorio-userrepositoryjava","title":"3. Repositorio (<code>UserRepository.java</code>)","text":"<pre><code>package com.example.myapi.repository;\n\nimport com.example.myapi.model.entity.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    boolean existsByEmail(String email);\n}\n</code></pre>"},{"location":"tutorials/p1/#4-servicio-userservicejava-y-userserviceimpljava","title":"4. Servicio (<code>UserService.java</code> y <code>UserServiceImpl.java</code>)","text":"<pre><code>package com.example.myapi.service;\n\nimport com.example.myapi.model.dto.UserDTO;\n\npublic interface UserService {\n    UserDTO createUser(UserDTO userDTO);\n    UserDTO getUserById(Long id);\n}\n</code></pre> <pre><code>package com.example.myapi.service.impl;\n\nimport com.example.myapi.exception.ResourceNotFoundException;\nimport com.example.myapi.model.dto.UserDTO;\nimport com.example.myapi.model.entity.User;\nimport com.example.myapi.repository.UserRepository;\nimport com.example.myapi.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDTO createUser(UserDTO userDTO) {\n        if (userRepository.existsByEmail(userDTO.getEmail())) {\n            throw new IllegalArgumentException(\"Email already exists\");\n        }\n        User user = new User(userDTO.getEmail(), userDTO.getName());\n        user = userRepository.save(user);\n        return new UserDTO(user.getId(), user.getEmail(), user.getName());\n    }\n\n    @Override\n    public UserDTO getUserById(Long id) {\n        User user = userRepository.findById(id)\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\"User not found with id: \" + id));\n        return new UserDTO(user.getId(), user.getEmail(), user.getName());\n    }\n}\n</code></pre>"},{"location":"tutorials/p1/#5-controlador-usercontrollerjava","title":"5. Controlador (<code>UserController.java</code>)","text":"<pre><code>package com.example.myapi.controller;\n\nimport com.example.myapi.model.dto.UserDTO;\nimport com.example.myapi.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @PostMapping\n    public ResponseEntity&lt;UserDTO&gt; createUser(@RequestBody UserDTO userDTO) {\n        UserDTO createdUser = userService.createUser(userDTO);\n        return ResponseEntity.status(201).body(createdUser);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;UserDTO&gt; getUserById(@PathVariable Long id) {\n        UserDTO user = userService.getUserById(id);\n        return ResponseEntity.ok(user);\n    }\n}\n</code></pre>"},{"location":"tutorials/p1/#6-excepcion-personalizada-resourcenotfoundexceptionjava","title":"6. Excepci\u00f3n Personalizada (<code>ResourceNotFoundException.java</code>)","text":"<pre><code>package com.example.myapi.exception;\n\npublic class ResourceNotFoundException extends RuntimeException {\n    public ResourceNotFoundException(String message) {\n        super(message);\n    }\n}\n</code></pre>"},{"location":"tutorials/p1/#7-manejador-de-excepciones-globalexceptionhandlerjava","title":"7. Manejador de Excepciones (<code>GlobalExceptionHandler.java</code>)","text":"<pre><code>package com.example.myapi.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity&lt;String&gt; handleResourceNotFoundException(ResourceNotFoundException ex) {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    public ResponseEntity&lt;String&gt; handleIllegalArgumentException(IllegalArgumentException ex) {\n        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());\n    }\n}\n</code></pre>"},{"location":"tutorials/p1/#8-configuracion-applicationproperties","title":"8. Configuraci\u00f3n (<code>application.properties</code>)","text":"<pre><code>spring.datasource.url=jdbc:postgresql://localhost:5432/myapi\nspring.datasource.username=postgres\nspring.datasource.password=secret\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n</code></pre>"},{"location":"tutorials/p1/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Usa DTOs: Separa las entidades de la API p\u00fablica para evitar exponer detalles de la base de datos.</li> <li>Inyecci\u00f3n de Dependencias: Usa <code>@Autowired</code> o inyecci\u00f3n por constructor para servicios y repositorios.</li> <li>Manejo de Excepciones: Implementa un manejador global de excepciones con <code>@ControllerAdvice</code>.</li> <li>Documentaci\u00f3n: Usa Swagger/OpenAPI para documentar los endpoints.</li> <li>Pruebas: Escribe pruebas unitarias para servicios (<code>@Mockito</code>) y pruebas integrales para controladores (<code>@SpringBootTest</code>).</li> <li>Perfiles: Usa perfiles de Spring (<code>dev</code>, <code>prod</code>) para configuraciones espec\u00edficas por entorno.</li> <li>Seguridad: Implementa Spring Security para proteger los endpoints.</li> </ol>"},{"location":"tutorials/p1/#diagrama-de-flujo-de-una-solicitud","title":"Diagrama de Flujo de una Solicitud","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Controller\n    participant Service\n    participant Repository\n    participant Database\n\n    Client-&gt;&gt;Controller: POST /api/users\n    Controller-&gt;&gt;Service: createUser(UserDTO)\n    Service-&gt;&gt;Repository: existsByEmail(email)\n    Repository-&gt;&gt;Database: SELECT COUNT(*) FROM users WHERE email = ?\n    Database--&gt;&gt;Repository: Result\n    Repository--&gt;&gt;Service: boolean\n    Service-&gt;&gt;Repository: save(User)\n    Repository-&gt;&gt;Database: INSERT INTO users ...\n    Database--&gt;&gt;Repository: Saved User\n    Repository--&gt;&gt;Service: User\n    Service--&gt;&gt;Controller: UserDTO\n    Controller--&gt;&gt;Client: 201 Created (UserDTO)</code></pre>"},{"location":"tutorials/p2/","title":"Spring Boot Actuator: Monitoreo y Gesti\u00f3n de Aplicaciones","text":"<p>Introducci\u00f3n</p> <p>Spring Boot Actuator es un m\u00f3dulo esencial de Spring Boot que proporciona herramientas para monitorear y gestionar aplicaciones en tiempo real. Ofrece endpoints HTTP y JMX que exponen informaci\u00f3n sobre la salud, m\u00e9tricas, configuraci\u00f3n, entorno y otros aspectos de la aplicaci\u00f3n. Es especialmente \u00fatil para aplicaciones en producci\u00f3n, ya que permite a los desarrolladores y equipos de operaciones supervisar el rendimiento, diagnosticar problemas y gestionar la aplicaci\u00f3n sin necesidad de herramientas externas. Esta gu\u00eda detalla su prop\u00f3sito, funcionalidades, configuraci\u00f3n, ejemplos pr\u00e1cticos y un diagrama para ilustrar su uso.</p>"},{"location":"tutorials/p2/#para-que-sirve-spring-boot-actuator","title":"\u00bfPara Qu\u00e9 Sirve Spring Boot Actuator?","text":"<p>Spring Boot Actuator sirve para proporcionar visibilidad y control sobre una aplicaci\u00f3n Spring Boot en ejecuci\u00f3n. Sus principales prop\u00f3sitos son:</p> <p>Monitoreo de Salud:</p> <ul> <li>Verifica si la aplicaci\u00f3n est\u00e1 funcionando correctamente (ej. conexi\u00f3n a base de datos, servicios externos, etc.).</li> <li>Ejemplo: El endpoint <code>/actuator/health</code> indica si la aplicaci\u00f3n est\u00e1 \"UP\" o \"DOWN\".</li> </ul> <p>M\u00e9tricas de Rendimiento:</p> <ul> <li>Expone m\u00e9tricas como uso de memoria, CPU, solicitudes HTTP, tiempo de respuesta, etc.</li> <li>Ejemplo: El endpoint <code>/actuator/metrics</code> proporciona estad\u00edsticas detalladas.</li> </ul> <p>Informaci\u00f3n de Configuraci\u00f3n:</p> <ul> <li>Permite inspeccionar propiedades de configuraci\u00f3n, variables de entorno y beans gestionados por Spring.</li> <li>Ejemplo: <code>/actuator/env</code> muestra las propiedades del entorno.</li> </ul> <p>Gesti\u00f3n Operativa:</p> <ul> <li>Ofrece herramientas para realizar tareas administrativas, como reiniciar la aplicaci\u00f3n o cambiar propiedades en tiempo real.</li> <li>Ejemplo: <code>/actuator/restart</code> (en configuraciones avanzadas) permite reiniciar la aplicaci\u00f3n.</li> </ul> <p>Depuraci\u00f3n y Diagn\u00f3stico:</p> <ul> <li>Proporciona informaci\u00f3n detallada para diagnosticar problemas, como trazas de solicitudes HTTP o estado de los hilos.</li> <li>Ejemplo: <code>/actuator/httptrace</code> muestra las \u00faltimas solicitudes HTTP.</li> </ul> <p>Integraci\u00f3n con Herramientas Externas:</p> <ul> <li>Actuator es compatible con herramientas de monitoreo como Prometheus, Grafana, New Relic o Datadog, permitiendo exportar m\u00e9tricas para an\u00e1lisis avanzados.</li> </ul>"},{"location":"tutorials/p2/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Endpoints Predefinidos: Actuator proporciona una serie de endpoints HTTP y JMX para acceder a informaci\u00f3n y realizar acciones.</li> <li>Personalizaci\u00f3n: Puedes habilitar/deshabilitar endpoints, configurar seguridad y personalizar la informaci\u00f3n expuesta.</li> <li>Extensibilidad: Permite crear endpoints personalizados para necesidades espec\u00edficas.</li> <li>Seguridad Integrada: Se integra con Spring Security para restringir el acceso a endpoints sensibles.</li> <li>Soporte para Microservicios: Es ideal para arquitecturas de microservicios, donde el monitoreo distribuido es cr\u00edtico.</li> </ul>"},{"location":"tutorials/p2/#endpoints-comunes-de-spring-boot-actuator","title":"Endpoints Comunes de Spring Boot Actuator","text":"<p>Actuator ofrece una variedad de endpoints predefinidos. Los m\u00e1s utilizados son:</p> Endpoint Prop\u00f3sito Ejemplo de Respuesta (JSON) <code>/actuator/health</code> Muestra el estado de salud de la aplicaci\u00f3n (UP/DOWN) y componentes. <code>{\"status\":\"UP\"}</code> <code>/actuator/info</code> Expone informaci\u00f3n personalizada sobre la aplicaci\u00f3n (ej. nombre, versi\u00f3n). <code>{\"app\":{\"name\":\"My API\",\"version\":\"1.0.0\"}}</code> <code>/actuator/metrics</code> Proporciona m\u00e9tricas de rendimiento (CPU, memoria, solicitudes, etc.). <code>{\"names\":[\"jvm.memory.used\",\"http.server.requests\"]}</code> <code>/actuator/env</code> Muestra propiedades de configuraci\u00f3n y variables de entorno. <code>{\"activeProfiles\":[\"dev\"],\"propertySources\":[...]}</code> <code>/actuator/beans</code> Lista todos los beans gestionados por Spring. <code>[{\"bean\":\"myBean\",\"scope\":\"singleton\"}]</code> <code>/actuator/httptrace</code> Registra las \u00faltimas solicitudes HTTP (\u00fatil para depuraci\u00f3n). <code>[{\"timestamp\":\"2025-08-01T23:25:00Z\",\"method\":\"GET\"}]</code> <code>/actuator/loggers</code> Muestra y permite modificar niveles de logging en tiempo real. <code>{\"levels\":{\"com.example\":\"INFO\"}}</code> <code>/actuator/threaddump</code> Proporciona un volcado de hilos para analizar el estado de la aplicaci\u00f3n. <code>[{\"threadName\":\"main\",\"threadId\":1}]</code> <p>Note</p> <p>Los endpoints est\u00e1n deshabilitados por defecto, excepto <code>/actuator/health</code> e <code>/actuator/info</code>. Debes habilitarlos expl\u00edcitamente en la configuraci\u00f3n.</p>"},{"location":"tutorials/p2/#configuracion-de-spring-boot-actuator","title":"Configuraci\u00f3n de Spring Boot Actuator","text":"<p>Para usar Actuator, debes incluir la dependencia en tu proyecto Spring Boot y configurar los endpoints que deseas exponer.</p>"},{"location":"tutorials/p2/#dependencia-en-pomxml","title":"Dependencia en <code>pom.xml</code>","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Esta dependencia ya est\u00e1 incluida si usaste Spring Initializr y seleccionaste \"Spring Boot Actuator\" en el asistente.</p>"},{"location":"tutorials/p2/#configuracion-basica-applicationproperties","title":"Configuraci\u00f3n B\u00e1sica (<code>application.properties</code>)","text":"<p>Habilita los endpoints necesarios y configura la informaci\u00f3n personalizada:</p> <pre><code># Habilitar endpoints espec\u00edficos\nmanagement.endpoints.web.exposure.include=health,info,metrics,env,beans,httptrace,loggers,threaddump\nmanagement.endpoint.health.show-details=always\nmanagement.endpoint.info.show-details=always\n\n# Informaci\u00f3n personalizada para /actuator/info\ninfo.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API built with Spring Boot\ninfo.author.name=John Doe\ninfo.author.email=john.doe@example.com\ninfo.author.organization=Example Corp\n</code></pre> <ul> <li><code>management.endpoints.web.exposure.include</code>: Lista los endpoints a exponer (usa <code>*</code> para exponer todos).</li> <li><code>management.endpoint.health.show-details=always</code>: Muestra detalles de los componentes de salud (ej. base de datos, disco).</li> <li><code>info.*</code>: Define propiedades personalizadas para el endpoint <code>/actuator/info</code>.</li> </ul>"},{"location":"tutorials/p2/#ejemplo-de-respuesta-de-actuatorhealth","title":"Ejemplo de Respuesta de <code>/actuator/health</code>","text":"<p>Si tienes configurada una base de datos (ej. PostgreSQL), una solicitud a <code>http://localhost:8080/actuator/health</code> podr\u00eda devolver:</p> <pre><code>{\n    \"status\": \"UP\",\n    \"components\": {\n        \"db\": {\n            \"status\": \"UP\",\n            \"details\": {\n                \"database\": \"PostgreSQL\",\n                \"validationQuery\": \"isValid()\"\n            }\n        },\n        \"diskSpace\": {\n            \"status\": \"UP\",\n            \"details\": {\n                \"total\": 500000000,\n                \"free\": 300000000,\n                \"threshold\": 10000000\n            }\n        },\n        \"ping\": {\n            \"status\": \"UP\"\n        }\n    }\n}\n</code></pre>"},{"location":"tutorials/p2/#ejemplo-de-respuesta-de-actuatorinfo","title":"Ejemplo de Respuesta de <code>/actuator/info</code>","text":"<p>Con la configuraci\u00f3n anterior, una solicitud a <code>http://localhost:8080/actuator/info</code> devolver\u00e1:</p> <pre><code>{\n    \"app\": {\n        \"name\": \"My REST API\",\n        \"version\": \"1.0.0\",\n        \"description\": \"A sample REST API built with Spring Boot\",\n        \"author\": {\n            \"name\": \"John Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"organization\": \"Example Corp\"\n        }\n    }\n}\n</code></pre>"},{"location":"tutorials/p2/#seguridad-con-spring-boot-actuator","title":"Seguridad con Spring Boot Actuator","text":"<p>Dado que los endpoints de Actuator pueden exponer informaci\u00f3n sensible (como propiedades de entorno o m\u00e9tricas detalladas), es crucial protegerlos con Spring Security.</p>"},{"location":"tutorials/p2/#configuracion-de-seguridad-securityconfigjava","title":"Configuraci\u00f3n de Seguridad (<code>SecurityConfig.java</code>)","text":"<pre><code>package com.example.myapi.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(auth -&gt; auth\n                .requestMatchers(\"/actuator/health\", \"/actuator/info\").permitAll() // Acceso p\u00fablico\n                .requestMatchers(\"/actuator/**\").hasRole(\"ADMIN\") // Solo para admin\n                .anyRequest().authenticated()\n            )\n            .csrf(csrf -&gt; csrf.disable())\n            .httpBasic();\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"tutorials/p2/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li><code>/actuator/health</code> e <code>/actuator/info</code> son accesibles p\u00fablicamente para monitoreo b\u00e1sico.</li> <li>Otros endpoints (como <code>/actuator/metrics</code>, <code>/actuator/env</code>) est\u00e1n restringidos a usuarios con el rol <code>ADMIN</code>.</li> <li>Deshabilitar CSRF es com\u00fan para APIs REST, pero eval\u00faa si es necesario seg\u00fan tu caso.</li> </ul>"},{"location":"tutorials/p2/#ejemplo-practico-monitoreo-de-una-api-rest","title":"Ejemplo Pr\u00e1ctico: Monitoreo de una API REST","text":"<p>Supongamos que tienes una API REST para gestionar usuarios. Puedes usar Actuator para monitorear su estado.</p>"},{"location":"tutorials/p2/#configuracion-applicationproperties","title":"Configuraci\u00f3n (<code>application.properties</code>)","text":"<pre><code>spring.datasource.url=jdbc:postgresql://localhost:5432/myapi\nspring.datasource.username=postgres\nspring.datasource.password=secret\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\n# Actuator configuration\nmanagement.endpoints.web.exposure.include=health,info,metrics,httptrace\nmanagement.endpoint.health.show-details=always\ninfo.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API for user management\ninfo.author.name=John Doe\n</code></pre>"},{"location":"tutorials/p2/#probando-los-endpoints","title":"Probando los Endpoints","text":"<p>Verificar Salud:</p> <ul> <li>Solicitud: <code>GET http://localhost:8080/actuator/health</code></li> <li>Respuesta: Confirma que la base de datos y otros componentes est\u00e1n funcionando.</li> </ul> <p>Obtener Informaci\u00f3n:</p> <ul> <li>Solicitud: <code>GET http://localhost:8080/actuator/info</code></li> <li>Respuesta: Muestra los metadatos de la API (nombre, versi\u00f3n, autor).</li> </ul> <p>Consultar M\u00e9tricas:</p> <ul> <li>Solicitud: <code>GET http://localhost:8080/actuator/metrics</code></li> <li>Respuesta: Lista m\u00e9tricas disponibles (ej. <code>http.server.requests</code>).</li> <li>Detalle: <code>GET http://localhost:8080/actuator/metrics/http.server.requests</code> para m\u00e9tricas espec\u00edficas.</li> </ul>"},{"location":"tutorials/p2/#diagrama-de-flujo-de-una-solicitud-a-actuator","title":"Diagrama de Flujo de una Solicitud a Actuator","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Security\n    participant Actuator\n    participant Database\n\n    Client-&gt;&gt;Security: GET /actuator/health\n    Security--&gt;&gt;Actuator: Autoriza (permitAll)\n    Actuator-&gt;&gt;Database: Verifica conexi\u00f3n\n    Database--&gt;&gt;Actuator: Estado OK\n    Actuator--&gt;&gt;Client: 200 OK {\"status\":\"UP\", \"components\": {...}}\n\n    Client-&gt;&gt;Security: GET /actuator/metrics\n    Security--&gt;&gt;Client: 401 Unauthorized (si no tiene rol ADMIN)\n    alt Autenticado como ADMIN\n        Security--&gt;&gt;Actuator: Autoriza\n        Actuator--&gt;&gt;Client: 200 OK {\"names\": [\"jvm.memory.used\", ...]}\n    end</code></pre>"},{"location":"tutorials/p2/#integracion-con-herramientas-externas","title":"Integraci\u00f3n con Herramientas Externas","text":"<p>Actuator se integra f\u00e1cilmente con herramientas de monitoreo:</p> <p>Prometheus:</p> <ul> <li>Agrega la dependencia <code>micrometer-registry-prometheus</code>:      <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Habilita el endpoint <code>/actuator/prometheus</code>:      <pre><code>management.endpoints.web.exposure.include=prometheus\n</code></pre></li> <li>Configura Prometheus para scrapear m\u00e9tricas desde <code>/actuator/prometheus</code>.</li> </ul> <p>Grafana:</p> <ul> <li>Usa las m\u00e9tricas de Prometheus para visualizarlas en dashboards de Grafana.</li> </ul> <p>Spring Boot Admin:</p> <ul> <li>Implementa un servidor de Spring Boot Admin para monitorear m\u00faltiples aplicaciones con Actuator.</li> </ul>"},{"location":"tutorials/p2/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Restringe Endpoints Sensibles:</p> <ul> <li>Usa Spring Security para limitar el acceso a endpoints como <code>/actuator/env</code> o <code>/actuator/beans</code>.</li> </ul> <p>Habilita Solo lo Necesario:</p> <ul> <li>Evita exponer todos los endpoints con <code>management.endpoints.web.exposure.include=*</code> a menos que sea estrictamente necesario.</li> </ul> <p>Personaliza <code>/actuator/info</code>:</p> <ul> <li>Incluye metadatos \u00fatiles como el nombre, versi\u00f3n y autor de la API.</li> </ul> <p>Usa Perfiles:</p> <ul> <li>Configura Actuator de manera diferente en entornos de desarrollo (<code>application-dev.properties</code>) y producci\u00f3n (<code>application-prod.properties</code>).</li> </ul> <p>Monitoreo Proactivo:</p> <ul> <li>Configura alertas basadas en <code>/actuator/health</code> para detectar fallos r\u00e1pidamente.</li> </ul> <p>Integraci\u00f3n con Documentaci\u00f3n:</p> <ul> <li>Si usas Swagger, documenta que <code>/actuator/info</code> es el punto de entrada para informaci\u00f3n general de la API.</li> </ul>"},{"location":"tutorials/p3/","title":"Tutorial Completo de Lombok en Spring Boot","text":"<p>Introducci\u00f3n</p> <p>Lombok es una biblioteca de Java que simplifica el desarrollo al eliminar c\u00f3digo repetitivo mediante anotaciones que generan autom\u00e1ticamente m\u00e9todos como getters, setters, constructores, <code>toString</code>, <code>equals</code>, y <code>hashCode</code>. En proyectos Spring Boot, Lombok es ampliamente utilizado para reducir el boilerplate en entidades JPA, DTOs, y otras clases, mejorando la legibilidad y mantenibilidad. Este tutorial cubre c\u00f3mo integrar Lombok en un proyecto Spring Boot, incluyendo la configuraci\u00f3n, ejemplos pr\u00e1cticos, integraci\u00f3n con tu setup existente (PostgreSQL, Spring Security, Actuator), y mejores pr\u00e1cticas. Incluye un diagrama  para ilustrar el flujo.</p>"},{"location":"tutorials/p3/#que-es-lombok","title":"\u00bfQu\u00e9 es Lombok?","text":"<p>Lombok (Project Lombok) es una biblioteca que utiliza el procesamiento de anotaciones (annotation processing) para generar c\u00f3digo en tiempo de compilaci\u00f3n. En lugar de escribir manualmente m\u00e9todos repetitivos, puedes usar anotaciones como <code>@Getter</code>, <code>@Setter</code>, <code>@Data</code>, o <code>@Builder</code> para que Lombok los genere autom\u00e1ticamente.</p>"},{"location":"tutorials/p3/#beneficios","title":"Beneficios","text":"<ul> <li>Reducci\u00f3n de C\u00f3digo: Elimina la necesidad de escribir getters, setters, y otros m\u00e9todos est\u00e1ndar.</li> <li>Legibilidad: Hace que las clases sean m\u00e1s limpias y f\u00e1ciles de mantener.</li> <li>Productividad: Acelera el desarrollo al evitar tareas repetitivas.</li> <li>Integraci\u00f3n con Spring: Funciona perfectamente con Spring Boot, especialmente en entidades JPA y DTOs.</li> </ul>"},{"location":"tutorials/p3/#limitaciones","title":"Limitaciones","text":"<ul> <li>Dependencia en IDE: Requiere configuraci\u00f3n en IDEs como IntelliJ o Eclipse para soportar las anotaciones.</li> <li>Debugging: El c\u00f3digo generado no es visible en el archivo fuente, lo que puede complicar la depuraci\u00f3n.</li> <li>Uso Prudente: Anotaciones como <code>@Data</code> pueden generar m\u00e9todos innecesarios si no se usan con cuidado.</li> </ul>"},{"location":"tutorials/p3/#configuracion-de-lombok-en-spring-boot","title":"Configuraci\u00f3n de Lombok en Spring Boot","text":""},{"location":"tutorials/p3/#paso-1-agrega-la-dependencia-de-lombok","title":"Paso 1: Agrega la Dependencia de Lombok","text":"<p>Incluye la dependencia de Lombok en tu <code>pom.xml</code>. Si usaste Spring Initializr (como en tu contexto previo), puedes seleccionarla directamente.</p>"},{"location":"tutorials/p3/#pomxml","title":"<code>pom.xml</code>","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;my-api-rest&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;my-api-rest&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot API REST&lt;/description&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.3.2&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;lombok.version&gt;1.18.34&lt;/lombok.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Spring Web --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Spring Data JPA --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- PostgreSQL Driver --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Spring Security --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Spring Boot Actuator --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;${lombok.version}&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Spring Boot Test --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.13.0&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;${java.version}&lt;/source&gt;\n                    &lt;target&gt;${java.version}&lt;/target&gt;\n                    &lt;annotationProcessorPaths&gt;\n                        &lt;path&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                            &lt;version&gt;${lombok.version}&lt;/version&gt;\n                        &lt;/path&gt;\n                    &lt;/annotationProcessorPaths&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <ul> <li>Notas:</li> <li><code>&lt;scope&gt;provided&lt;/scope&gt;</code>: Indica que Lombok solo se usa en compilaci\u00f3n, no en runtime.</li> <li><code>maven-compiler-plugin</code>: Configura el procesador de anotaciones de Lombok.</li> </ul>"},{"location":"tutorials/p3/#paso-2-configura-tu-ide","title":"Paso 2: Configura tu IDE","text":"<p>Lombok requiere soporte en el IDE para reconocer las anotaciones y evitar errores falsos en el c\u00f3digo.</p>"},{"location":"tutorials/p3/#intellij-idea","title":"IntelliJ IDEA","text":"<ol> <li>Ve a File &gt; Settings &gt; Plugins.</li> <li>Busca e instala el plugin Lombok.</li> <li>Habilita el procesamiento de anotaciones:</li> <li>File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler &gt; Annotation Processors.</li> <li>Marca Enable annotation processing.</li> <li>Reinicia IntelliJ.</li> </ol>"},{"location":"tutorials/p3/#eclipse","title":"Eclipse","text":"<ol> <li>Descarga el JAR de Lombok desde projectlombok.org.</li> <li>Ejecuta <code>java -jar lombok.jar</code> y sigue el instalador para agregar Lombok al IDE.</li> <li>Aseg\u00farate de que el proyecto tenga habilitado el procesamiento de anotaciones:</li> <li>Haz clic derecho en el proyecto &gt; Properties &gt; Java Compiler &gt; Annotation Processing &gt; Enable annotation processing.</li> </ol>"},{"location":"tutorials/p3/#paso-3-configura-applicationproperties","title":"Paso 3: Configura <code>application.properties</code>","text":"<p>Integra Lombok con tu configuraci\u00f3n existente de PostgreSQL, Actuator, y Spring Security.</p>"},{"location":"tutorials/p3/#applicationproperties","title":"<code>application.properties</code>","text":"<pre><code># Configuraci\u00f3n de PostgreSQL (Supabase)\nspring.datasource.url=jdbc:postgresql://aws-0-us-east-1.pooler.supabase.com:5432/postgres\nspring.datasource.username=postgres.atnasvyigqgxxpavyvvw\nspring.datasource.password=[YOUR-PASSWORD]\nspring.datasource.driver-class-name=org.postgresql.Driver\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\n# Configuraci\u00f3n de Actuator\nmanagement.endpoints.web.exposure.include=health,info\nmanagement.endpoint.info.enabled=true\nmanagement.endpoint.health.show-details=always\ninfo.app.name=My REST API\ninfo.app.version=1.0.0\ninfo.app.description=A sample REST API built with Spring Boot\ninfo.app.author.name=John Doe\ninfo.app.author.email=john.doe@example.com\ninfo.app.author.organization=Example Corp\n\n# Configuraci\u00f3n de usuario para Spring Security\nspring.security.user.name=admin\nspring.security.user.password=secret\nspring.security.user.roles=ADMIN\n</code></pre> <ul> <li>Notas:</li> <li>Reemplaza <code>[YOUR-PASSWORD]</code> con la contrase\u00f1a de Supabase.</li> <li>La configuraci\u00f3n de Actuator asegura que <code>/actuator/info</code> funcione correctamente (solucionando tu problema previo de respuesta vac\u00eda).</li> </ul>"},{"location":"tutorials/p3/#paso-4-configura-spring-security","title":"Paso 4: Configura Spring Security","text":"<p>Aseg\u00farate de que los endpoints de Actuator sean accesibles y que tu API sea segura.</p>"},{"location":"tutorials/p3/#securityconfigjava","title":"<code>SecurityConfig.java</code>","text":"<pre><code>package com.example.myapi.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(auth -&gt; auth\n                .requestMatchers(\"/actuator/info\", \"/actuator/health\", \"/api/users\").permitAll()\n                .requestMatchers(\"/actuator/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            )\n            .csrf(csrf -&gt; csrf.disable())\n            .httpBasic(httpBasic -&gt; httpBasic.realmName(\"My API\"));\n        return http.build();\n    }\n}\n</code></pre> <ul> <li>Notas:</li> <li><code>/api/users</code> se agreg\u00f3 como accesible p\u00fablicamente para facilitar las pruebas.</li> </ul>"},{"location":"tutorials/p3/#uso-de-anotaciones-de-lombok","title":"Uso de Anotaciones de Lombok","text":"<p>Lombok ofrece varias anotaciones para simplificar el c\u00f3digo. A continuaci\u00f3n, se presentan las m\u00e1s comunes con ejemplos en el contexto de una API REST.</p>"},{"location":"tutorials/p3/#1-data","title":"1. <code>@Data</code>","text":"<p>Genera getters, setters, <code>toString</code>, <code>equals</code>, <code>hashCode</code>, y un constructor requerido.</p>"},{"location":"tutorials/p3/#ejemplo-entidad-jpa-userjava","title":"Ejemplo: Entidad JPA (<code>User.java</code>)","text":"<pre><code>package com.example.myapi.model.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Table(name = \"users\")\n@Data\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @Column(nullable = false)\n    private String name;\n}\n</code></pre> <ul> <li>Equivalente sin Lombok:   <pre><code>public class User {\n    private Long id;\n    private String email;\n    private String name;\n\n    public User() {}\n    public User(Long id, String email, String name) {\n        this.id = id;\n        this.email = email;\n        this.name = name;\n    }\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    @Override\n    public String toString() { return \"User{id=\" + id + \", email='\" + email + \"', name='\" + name + \"'}\"; }\n    @Override\n    public boolean equals(Object o) { /* Implementaci\u00f3n */ }\n    @Override\n    public int hashCode() { /* Implementaci\u00f3n */ }\n}\n</code></pre></li> </ul>"},{"location":"tutorials/p3/#2-getter-y-setter","title":"2. <code>@Getter</code> y <code>@Setter</code>","text":"<p>Genera solo getters y/o setters para los campos especificados.</p>"},{"location":"tutorials/p3/#ejemplo-dto-userdtojava","title":"Ejemplo: DTO (<code>UserDTO.java</code>)","text":"<pre><code>package com.example.myapi.model.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserDTO {\n    private String email;\n    private String name;\n}\n</code></pre> <ul> <li>Notas:</li> <li>Usa <code>@Getter</code> y <code>@Setter</code> individualmente si no necesitas todos los m\u00e9todos generados por <code>@Data</code>.</li> </ul>"},{"location":"tutorials/p3/#3-builder","title":"3. <code>@Builder</code>","text":"<p>Proporciona un patr\u00f3n Builder para crear instancias de la clase.</p>"},{"location":"tutorials/p3/#ejemplo-dto-con-builder-createuserdtojava","title":"Ejemplo: DTO con Builder (<code>CreateUserDTO.java</code>)","text":"<pre><code>package com.example.myapi.model.dto;\n\nimport lombok.Builder;\n\n@Builder\npublic class CreateUserDTO {\n    private String email;\n    private String name;\n}\n</code></pre> <ul> <li>Uso:   <pre><code>CreateUserDTO userDTO = CreateUserDTO.builder()\n    .email(\"test@example.com\")\n    .name(\"Test User\")\n    .build();\n</code></pre></li> </ul>"},{"location":"tutorials/p3/#4-allargsconstructor-y-noargsconstructor","title":"4. <code>@AllArgsConstructor</code> y <code>@NoArgsConstructor</code>","text":"<p>Genera constructores con todos los campos o sin argumentos.</p>"},{"location":"tutorials/p3/#ejemplo-entidad-con-constructores-productjava","title":"Ejemplo: Entidad con Constructores (<code>Product.java</code>)","text":"<pre><code>package com.example.myapi.model.entity;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Table(name = \"products\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String name;\n\n    private double price;\n}\n</code></pre>"},{"location":"tutorials/p3/#5-tostring-y-equalsandhashcode","title":"5. <code>@ToString</code> y <code>@EqualsAndHashCode</code>","text":"<p>Genera m\u00e9todos <code>toString</code>, <code>equals</code>, y <code>hashCode</code> personalizados.</p>"},{"location":"tutorials/p3/#ejemplo-clase-con-exclusion-orderjava","title":"Ejemplo: Clase con Exclusi\u00f3n (<code>Order.java</code>)","text":"<pre><code>package com.example.myapi.model.entity;\n\nimport jakarta.persistence.*;\nimport lombok.ToString;\nimport lombok.EqualsAndHashCode;\n\n@Entity\n@Table(name = \"orders\")\n@ToString(exclude = \"sensitiveData\")\n@EqualsAndHashCode(exclude = \"sensitiveData\")\npublic class Order {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String orderNumber;\n\n    @Column(name = \"sensitive_data\")\n    private String sensitiveData;\n}\n</code></pre> <ul> <li>Notas:</li> <li>Usa <code>exclude</code> para omitir campos sensibles en <code>toString</code> o <code>equals</code>.</li> </ul>"},{"location":"tutorials/p3/#ejemplo-practico-api-rest-con-lombok","title":"Ejemplo Pr\u00e1ctico: API REST con Lombok","text":""},{"location":"tutorials/p3/#repositorio-userrepositoryjava","title":"Repositorio (<code>UserRepository.java</code>)","text":"<pre><code>package com.example.myapi.repository;\n\nimport com.example.myapi.model.entity.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n</code></pre>"},{"location":"tutorials/p3/#controlador-usercontrollerjava","title":"Controlador (<code>UserController.java</code>)","text":"<pre><code>package com.example.myapi.controller;\n\nimport com.example.myapi.model.entity.User;\nimport com.example.myapi.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @PostMapping\n    public ResponseEntity&lt;User&gt; createUser(@RequestBody User user) {\n        User savedUser = userRepository.save(user);\n        return ResponseEntity.status(201).body(savedUser);\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;Iterable&lt;User&gt;&gt; getAllUsers() {\n        return ResponseEntity.ok(userRepository.findAll());\n    }\n}\n</code></pre>"},{"location":"tutorials/p3/#prueba-la-api","title":"Prueba la API","text":"<ol> <li> <p>Inicia la aplicaci\u00f3n:    <pre><code>mvn spring-boot:run\n</code></pre></p> </li> <li> <p>Crea un usuario:    <pre><code>curl -X POST http://localhost:8080/api/users \\\n-H \"Content-Type: application/json\" \\\n-d '{\"email\":\"test@example.com\",\"name\":\"Test User\"}'\n</code></pre></p> </li> <li> <p>Lista usuarios:    <pre><code>curl http://localhost:8080/api/users\n</code></pre></p> </li> <li> <p>Verifica Actuator:    <pre><code>curl http://localhost:8080/actuator/info\n</code></pre>    Respuesta esperada:    <pre><code>{\n    \"app\": {\n        \"name\": \"My REST API\",\n        \"version\": \"1.0.0\",\n        \"description\": \"A sample REST API built with Spring Boot\",\n        \"author\": {\n            \"name\": \"John Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"organization\": \"Example Corp\"\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"tutorials/p3/#diagrama-de-flujo-con-lombok","title":"Diagrama de Flujo con Lombok","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Controller\n    participant Repository\n    participant Entity\n    participant Database\n\n    Client-&gt;&gt;Controller: POST /api/users\n    Controller-&gt;&gt;Entity: Crea User (@Data genera setters)\n    Entity--&gt;&gt;Controller: User configurado\n    Controller-&gt;&gt;Repository: save(User)\n    Repository-&gt;&gt;Database: Persistir (PostgreSQL Supabase)\n    Database--&gt;&gt;Repository: User guardado\n    Repository--&gt;&gt;Controller: User\n    Controller--&gt;&gt;Client: 201 Created {User}\n\n    Client-&gt;&gt;Actuator: GET /actuator/info\n    Actuator--&gt;&gt;Client: 200 OK {\"app\": {\"name\": \"My REST API\", ...}}</code></pre>"},{"location":"tutorials/p3/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Usa Anotaciones Espec\u00edficas:</p> <ul> <li>Evita <code>@Data</code> si no necesitas todos los m\u00e9todos. Usa <code>@Getter</code>, <code>@Setter</code>, o <code>@Builder</code> seg\u00fan sea necesario.</li> <li>Ejemplo: Usa <code>@Getter</code> y <code>@Setter</code> para DTOs, <code>@Data</code> para entidades simples.</li> </ul> <p>Evita <code>@Data</code> en Entidades Complejas:</p> <ul> <li><code>@Data</code> genera <code>equals</code> y <code>hashCode</code>, lo que puede causar problemas en entidades JPA con relaciones. Usa <code>@EqualsAndHashCode</code> con <code>exclude</code> para campos relacionados.</li> </ul> <p>Configura Correctamente el IDE:</p> <ul> <li>Aseg\u00farate de que el plugin de Lombok est\u00e9 instalado para evitar errores falsos.</li> </ul> <p>Minimiza Dependencias:</p> <ul> <li>Usa Lombok solo donde reduzca significativamente el c\u00f3digo repetitivo.</li> </ul> <p>Pruebas:</p> <ul> <li>Verifica que los m\u00e9todos generados (getters, setters) funcionen correctamente en pruebas unitarias.</li> </ul> <p>Documentaci\u00f3n:</p> <ul> <li>Documenta que usas Lombok en el proyecto para que otros desarrolladores configuren sus IDEs.</li> </ul>"},{"location":"tutorials/tools/","title":"Herramientas Backend II - Proyecto Integrador","text":""},{"location":"tutorials/tools/#1-xampp-mysql-8212","title":"1. XAMPP (MySQL 8.2.12)","text":"<p>Prop\u00f3sito: Servidor local para desarrollo web con stack Apache/MySQL/PHP</p> <p>Caracter\u00edsticas t\u00e9cnicas: - Versi\u00f3n MySQL: 8.2.12 - Incluye phpMyAdmin para gesti\u00f3n visual - Configuraci\u00f3n autom\u00e1tica de servicios Windows</p> <p>Uso en el proyecto: - Alojamiento local de la base de datos acad\u00e9mica - Ejecuci\u00f3n de scripts SQL iniciales - Pruebas de conectividad backend</p> <p>Descargar XAMPP</p>"},{"location":"tutorials/tools/#2-echo-api","title":"2. Echo API","text":"<p>Prop\u00f3sito: Cliente REST ligero para pruebas y documentaci\u00f3n de endpoints API</p> <p>Caracter\u00edsticas t\u00e9cnicas: - Soporte para OpenAPI/Swagger - Autenticaci\u00f3n integrada con JWT - Generaci\u00f3n autom\u00e1tica de clientes SDK - Pruebas de contract-first</p> <p>Uso en el proyecto: - Validaci\u00f3n de especificaciones API - Pruebas de integraci\u00f3n continua - Documentaci\u00f3n t\u00e9cnica automatizada</p> <p>Descargar EchoApi</p>"},{"location":"tutorials/tools/#3-dbeaver-gestor-de-bases-de-datos","title":"3. DBeaver (Gestor de Bases de Datos)","text":"<p>Prop\u00f3sito: Herramienta universal para administraci\u00f3n de bases de datos</p> <p>Caracter\u00edsticas t\u00e9cnicas: - Soporte multiplataforma (Windows/Linux/Mac) - Conexi\u00f3n simult\u00e1nea a m\u00faltiples motores SQL - Editor ER Diagram integrado</p> <p>Uso en el proyecto: - Dise\u00f1o del modelo entidad-relaci\u00f3n - Ejecuci\u00f3n de consultas complejas - Migraci\u00f3n de datos entre ambientes</p> <p>Descargar DBeaver</p>"}]}